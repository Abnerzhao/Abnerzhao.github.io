<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abnerzhao</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-19T04:52:12.089Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abnerzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QuerySet API 学习笔记</title>
    <link href="http://yoursite.com/2018/08/19/QuerySet-API-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/19/QuerySet-API-学习笔记/</id>
    <published>2018-08-19T04:51:03.000Z</published>
    <updated>2018-08-19T04:52:12.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QuerySets-evaluated"><a href="#QuerySets-evaluated" class="headerlink" title="QuerySets evaluated"></a>QuerySets evaluated</h3><p>可以创建、过滤、切片和传递查询集而不用真实操作数据库。在你对查询集做求值之前，不会发生任何实际的数据库操作。</p>
<p>对于查询集我们使用以下方法进行求值：</p>
<ul>
<li>Iteration</li>
<li>Slicing</li>
<li>Pickling/Caching</li>
<li>repr()</li>
<li>len()</li>
<li>list()</li>
<li>bool()</li>
</ul>
<h3 id="QuerySet-API"><a href="#QuerySet-API" class="headerlink" title="QuerySet API"></a>QuerySet API</h3><h4 id="返回新的查询集方法"><a href="#返回新的查询集方法" class="headerlink" title="返回新的查询集方法"></a>返回新的查询集方法</h4><ul>
<li>filter</li>
</ul>
<p>返回一个新的 QuerySet 包含给定参数的查询匹配对象，更复杂的查询可以使用 Q 对象。</p>
<ul>
<li>exclude</li>
</ul>
<p>返回一个新的 QuerySet，它包含不满足给定的查找参数的对象，更复杂的查询同样可以使用 Q 对象。</p>
<a id="more"></a>
<ul>
<li>annotate</li>
</ul>
<p>使用提供的查询表达式给 QuerySet 的每个对象增加注释，可以理解为增加一个新的属性。</p>
<p>查询表达式可以是一个简单的值、模型（或关联模型）字段的一个引用或对查询集中的对象一个聚合函数（平均值、和等）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.db.models import Count</div><div class="line">&gt;&gt;&gt; q = Blog.objects.annotate(Count(&apos;entry&apos;))</div><div class="line">&gt;&gt;&gt; q[0].name</div><div class="line">&apos;Blogasaurus&apos;</div><div class="line">&gt;&gt;&gt; q[0].entry__count # 新增的 entry__count 属性</div><div class="line">42</div><div class="line"></div><div class="line"># 指定注释名称</div><div class="line">&gt;&gt;&gt; q = Blog.objects.annotate(number_of_entries=Count(&apos;entry&apos;))</div><div class="line">&gt;&gt;&gt; q[0].number_of_entries</div><div class="line">42</div></pre></td></tr></table></figure>
<p>使用 annotate 需要用 django.db.models 的统计方法。除了 Count 统计方法之外，还有 Max、Min、Sum、Avg 等方法。</p>
<ul>
<li>order_by</li>
</ul>
<p>指定 QuerySet 排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 升序</div><div class="line">&gt;&gt;&gt; Author.objects.filter().order_by(&apos;name&apos;)</div><div class="line">&lt;QuerySet [&lt;Author: abner&gt;, &lt;Author: mike&gt;]&gt;</div><div class="line"> </div><div class="line"># 降序</div><div class="line">&gt;&gt;&gt; Author.objects.filter().order_by(&apos;-name&apos;)</div><div class="line">&lt;QuerySet [&lt;Author: mike&gt;, &lt;Author: abner&gt;]&gt;</div><div class="line"></div><div class="line"># 随机排序，不推荐使用(速度慢、查询昂贵)</div><div class="line">&gt;&gt;&gt; Author.objects.order_by(&apos;?&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>reverse</li>
</ul>
<p>反向排序 QuerySet 中返回的元素</p>
<ul>
<li>distinct</li>
</ul>
<p>返回一个新的 QuerySet 并去除查询结果中的重复的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; CompileRules.objects.values(&apos;business__name&apos;).distinct()</div><div class="line">&lt;QuerySet [&#123;&apos;business__name&apos;: &apos;img.ppdai.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;api.alert.risk.ppdaicorp.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;api.antifraud.risk.ppdaicorp.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;chargingjob.ppdapi.com&apos;&#125;]&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; rules = CompileRules.objects.distinct().values_list(&apos;business__name&apos;)</div><div class="line">&gt;&gt;&gt; [i[0] for i in rules]</div><div class="line">[&apos;img.ppdai.com&apos;,&apos;api.alert.risk.ppdaicorp.com&apos;,&apos;api.antifraud.risk.ppdaicorp.com&apos;,&apos;chargingjob.ppdapi.com&apos;]</div></pre></td></tr></table></figure>
<ul>
<li>values</li>
</ul>
<p>把 QuerySets 当作迭代器使用，返回一个字典，而不是模型实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Author.objects.filter(name=&apos;abner&apos;).values()</div><div class="line">&lt;QuerySet [&#123;&apos;id&apos;: 2, &apos;name&apos;: &apos;abner&apos;, &apos;email&apos;: &apos;abner@163.com&apos;&#125;, &#123;&apos;id&apos;: 3, &apos;name&apos;: &apos;abner&apos;, &apos;email&apos;: &apos;abner@qq.com&apos;&#125;]&gt;</div><div class="line"></div><div class="line"></div><div class="line"># 指定字段</div><div class="line">&gt;&gt;&gt; Author.objects.values(&apos;name&apos;)</div><div class="line">&lt;QuerySet [&#123;&apos;name&apos;: &apos;abner&apos;&#125;,&#123;&apos;name&apos;: &apos;abner&apos;&#125;,v&#123;&apos;name&apos;: &apos;mike&apos;&#125;]&gt;</div><div class="line"></div><div class="line"></div><div class="line"># 数据库函数，Lower 返回小写形式</div><div class="line">&gt;&gt;&gt; from django.db.models.functions import Lower</div><div class="line">&gt;&gt;&gt; Author.objects.values(lower=Lower(&apos;name&apos;))</div><div class="line">&lt;QuerySet [&#123;&apos;lower&apos;: &apos;dkey&apos;&#125;, &#123;&apos;lower&apos;: &apos;jerry&apos;&#125;, &#123;&apos;lower&apos;: &apos;jerry&apos;&#125;]&gt;</div></pre></td></tr></table></figure>
<ul>
<li>values_list</li>
</ul>
<p>以元组的形式返回查询集，可以返回特定字段的值，也可以是列表的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Business.objects.filter(level=1).values_list(&apos;id&apos;, &apos;name&apos;)</div><div class="line">&lt;TreeQuerySet [(3, &apos;借入运营&apos;), (106, &apos;借入借贷&apos;), (219, &apos;数据决策平台&apos;), (225, &apos;数据架构&apos;), (234, &apos;测试&apos;)]&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; Business.objects.filter(level=1).values_list(&apos;name&apos;, flat=True)</div><div class="line">&lt;TreeQuerySet [&apos;借入运营&apos;, &apos;借入借贷&apos;, &apos;数据决策平台&apos;, &apos;数据架构&apos;, &apos;测试&apos;]&gt;</div></pre></td></tr></table></figure>
<ul>
<li>dates</li>
</ul>
<blockquote>
<p>dates(field, kind, order=’ASC’)</p>
</blockquote>
<p>返回 datetime.date 对象列表，查询的字段应该是 DateField 模型，kind应为”year”、”month”或”day”。隐式的是升序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.year:返回字段不同年份值列表</div><div class="line">2.month:返回字段所有不同年/月值列表</div><div class="line">3.day:返回字段所有不同年/月/日值列表</div></pre></td></tr></table></figure>
<ul>
<li>datetimes</li>
</ul>
<blockquote>
<p>datetimes(field_name, kind, order=’ASC’, tzinfo=None)</p>
</blockquote>
<p>返回 datetime.datetimes 对象列表，查询的字段应该是 DateField 模型，kind应为”year”、”month”或”day”。隐式的是升序排序</p>
<ul>
<li>none</li>
</ul>
<p>创建一个不返回任何对象的查询集，访问结果时不会执行任何查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Entry.objects.none()</div><div class="line">[]</div><div class="line">&gt;&gt;&gt; from django.db.models.query import EmptyQuerySet</div><div class="line">&gt;&gt;&gt; isinstance(Entry.objects.none(), EmptyQuerySet)</div><div class="line">True</div></pre></td></tr></table></figure>
<ul>
<li>all</li>
</ul>
<p>所有查询集</p>
<ul>
<li>select_related</li>
</ul>
<blockquote>
<p>对于 ForeignKey 和 OneToOneField 等字段，通过添加 select_related，可以把相关的对象在一次查询中查出，之后使用时就不需要再次查数据库</p>
</blockquote>
<p>返回一个新的查询集，沿着外键查询关联对象的数据。它会生成一个复杂的查询并引起性能的损耗，但是在以后使用外键关系时将不需要数据库查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 普通查询</div><div class="line"># Hits the database.</div><div class="line">e = Entry.objects.get(id=5)</div><div class="line"># Hits the database again to get the related Blog object.</div><div class="line">b = e.blog</div><div class="line"></div><div class="line">#select_related 查询 </div><div class="line"># Hits the database.</div><div class="line">e = Entry.objects.select_related(&apos;blog&apos;).get(id=5)</div><div class="line"># Doesn&apos;t hit the database, because e.blog has been prepopulated</div><div class="line"># in the previous query.</div><div class="line">b = e.blog</div></pre></td></tr></table></figure>
<ul>
<li>prefetch_related</li>
</ul>
<blockquote>
<p>prefetch_related 对于相关对象会进行一次独立的查询，然后在 Python 中把对象关联起来。所以prefetch_related可以用于many-to-many and many-to-one关系</p>
</blockquote>
<ul>
<li>extra</li>
</ul>
<blockquote>
<p>extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)</p>
</blockquote>
<p>有些情况下，Django的查询语法难以简单的表达复杂的 WHERE 子句，对于这种情况, Django 提供了 extra() QuerySet 修改机制 — 它能在 QuerySet生成的SQL从句中注入新子句</p>
<p>extra可以指定一个或多个参数,例如 select, where or tables。 这些参数都不是必须的，但是你至少要使用一个</p>
<ul>
<li>defer</li>
</ul>
<p>排除不需要的字段，降低性能损耗</p>
<ul>
<li>only</li>
</ul>
<p>仅选择需要的字段</p>
<ul>
<li>using</li>
</ul>
<blockquote>
<p>using(alias) // alias 数据库别名</p>
</blockquote>
<p>如果使用多个数据库，改方法可以控制从哪个数据库上求值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># queries the database with the &apos;default&apos; alias.</div><div class="line">&gt;&gt;&gt; Entry.objects.all()</div><div class="line"></div><div class="line"># queries the database with the &apos;backup&apos; alias</div><div class="line">&gt;&gt;&gt; Entry.objects.using(&apos;backup&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>select_for_update</li>
</ul>
<p>返回一个 queryset ，会锁定相关行直到事务结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">entries = Entry.objects.select_for_update().filter(author=request.user)</div></pre></td></tr></table></figure>
<p>所有匹配的行将被锁定，直到事务结束。这意味着可以通过锁防止数据被其它事务修改。</p>
<ul>
<li>raw</li>
</ul>
<p>接收一个原始的SQL 查询，执行它并返回一个django.db.models.query.RawQuerySet 实例</p>
<p>Django提供两种方法使用原始SQL进行查询：一种是使用Manager.raw()方法，进行原始查询并返回模型实例；另一种是完全避开模型层，直接执行自定义的SQL语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; raw = Author.objects.raw(&apos;select * from polls_author&apos;)</div><div class="line">&gt;&gt;&gt; type(raw)</div><div class="line">&lt;class &apos;django.db.models.query.RawQuerySet&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="不返回新的查询集"><a href="#不返回新的查询集" class="headerlink" title="不返回新的查询集"></a>不返回新的查询集</h4><ul>
<li>get</li>
</ul>
<p>返回按照参数匹配的对象</p>
<ul>
<li>create</li>
</ul>
<p>创建并保存对象</p>
<ul>
<li>get_or_create</li>
</ul>
<p>通过给定参数来查询对象，如果对象不存在则会创建一个新的对象</p>
<p>返回一个由(object, created)组成的元组，元组中的object 是一个查询到的或者是被创建的对象， created 是一个表示是否创建了新的对象的布尔值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">try:</div><div class="line">    obj = Person.objects.get(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;)</div><div class="line">except Person.DoesNotExist:</div><div class="line">    obj = Person(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;, birthday=date(1940, 10, 9))</div><div class="line">    obj.save()</div><div class="line">    </div><div class="line"># use get_or_create</div><div class="line">obj, created = Person.objects.get_or_create(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;,</div><div class="line">                  defaults=&#123;&apos;birthday&apos;: date(1940, 10, 9)&#125;)</div></pre></td></tr></table></figure>
<p>任何传递给 get_or_create() 的关键字参数，除了一个可选的defaults，都将传递给get() 调用</p>
<blockquote>
<p>get_or_create() 在Django 视图中的使用。请确保只在POST 请求中使用，除非你有充分的理由。GET 请求不应该对数据有任何影响。而POST 则用于对数据产生影响的请求</p>
</blockquote>
<ul>
<li>update_or_create</li>
</ul>
<p>通过给定参数来更新对象，如果对象不存在则会创建一个新的对象</p>
<p>一个通过给出的kwargs 来更新对象的便捷方法， 如果需要的话创建一个新的对象。defaults 是一个由 (field, value) 对组成的字典，用于更新对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">try:</div><div class="line">    obj = Person.objects.get(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;)</div><div class="line">    for key, value in updated_values.iteritems():</div><div class="line">        setattr(obj, key, value)</div><div class="line">    obj.save()</div><div class="line">except Person.DoesNotExist:</div><div class="line">    updated_values.update(&#123;&apos;first_name&apos;: &apos;John&apos;, &apos;last_name&apos;: &apos;Lennon&apos;&#125;)</div><div class="line">    obj = Person(**updated_values)</div><div class="line">    obj.save()</div><div class="line">    </div><div class="line"></div><div class="line"># use update_or_create</div><div class="line">obj, created = Person.objects.update_or_create(</div><div class="line">    first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;, defaults=updated_values)</div></pre></td></tr></table></figure>
<blockquote>
<p>和上文描述的get_or_create() 一样，这个方式容易导致竞态条件，如果数据库层级没有前置唯一性它会让多行同时插入。</p>
</blockquote>
<ul>
<li>bulk_create</li>
</ul>
<p>批量写入数据</p>
<ul>
<li>count</li>
</ul>
<p>返回 QuerySet 对象个数</p>
<ul>
<li>in_bulk</li>
</ul>
<p>获取主键值的列表，并返回将每个主键值映射到具有给定ID的对象的实例的字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([1])</div><div class="line">&#123;1: &lt;Blog: Beatles Blog&gt;&#125;</div><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([1, 2])</div><div class="line">&#123;1: &lt;Blog: Beatles Blog&gt;, 2: &lt;Blog: Cheddar Talk&gt;&#125;</div><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([])</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>iterator</li>
<li>latest:使用作为日期字段提供的field_name，按日期返回表中的最新对象</li>
<li>earliest</li>
<li>first</li>
<li>last</li>
<li>aggregate:聚合查询</li>
</ul>
<p>返回一个字典，包含根据QuerySet 计算得到的聚合值（平均数、和等等）。aggregate() 的每个参数指定返回的字典中将要包含的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.db.models import Count</div><div class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(Count(&apos;entry&apos;))</div><div class="line">&#123;&apos;entry__count&apos;: 16&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(number_of_entries=Count(&apos;entry&apos;))</div><div class="line">&#123;&apos;number_of_entries&apos;: 16&#125;</div></pre></td></tr></table></figure>
<ul>
<li>exists</li>
</ul>
<p>exists() 用于搜寻对象是否在QuerySet 中以及QuerySet 是否存在任何对象，特别是QuerySet 比较大的时候。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># exists 方法比普通方法快</div><div class="line">entry = Entry.objects.get(pk=123)</div><div class="line">if some_queryset.filter(pk=entry.pk).exists():</div><div class="line">    print(&quot;Entry contained in queryset&quot;)</div><div class="line">    </div><div class="line"># 普通方法</div><div class="line">if entry in some_queryset:</div><div class="line">   print(&quot;Entry contained in QuerySet&quot;)    </div><div class="line">   </div><div class="line"># 判断 queryset 是否含有对象，exists 比普通判断快特别是查询集比较大的情况下   </div><div class="line">if some_queryset.exists():</div><div class="line">    print(&quot;There is at least one object in some_queryset&quot;)</div><div class="line">    </div><div class="line">if some_queryset:</div><div class="line">    print(&quot;There is at least one object in some_queryset&quot;)</div></pre></td></tr></table></figure>
<ul>
<li>update</li>
</ul>
<p>对指定的字段执行SQL更新查询，并返回匹配的行数</p>
<ul>
<li>delete</li>
</ul>
<p>对QuerySet中的所有行执行SQL删除查询</p>
<ul>
<li>as_manager</li>
</ul>
<h4 id="字段查找"><a href="#字段查找" class="headerlink" title="字段查找"></a>字段查找</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">exact</td>
<td style="text-align:left">精确匹配</td>
</tr>
<tr>
<td style="text-align:left">iexact</td>
<td style="text-align:left">忽略大小写精确匹配</td>
</tr>
<tr>
<td style="text-align:left">contains</td>
<td style="text-align:left">包含关系</td>
</tr>
<tr>
<td style="text-align:left">icontains</td>
<td style="text-align:left">忽略大小写包含关系</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">在给定的列表</td>
</tr>
<tr>
<td style="text-align:left">gt</td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:left">gte</td>
<td style="text-align:left">大于等于</td>
</tr>
<tr>
<td style="text-align:left">lt</td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:left">lte</td>
<td style="text-align:left">小于等于</td>
</tr>
<tr>
<td style="text-align:left">startswith</td>
<td style="text-align:left">区分大小写，从开始位置匹配</td>
</tr>
<tr>
<td style="text-align:left">istartswith</td>
<td style="text-align:left">不区分大小写，从开始位置匹配</td>
</tr>
<tr>
<td style="text-align:left">endswith</td>
<td style="text-align:left">区分大小写，从结束位置匹</td>
</tr>
<tr>
<td style="text-align:left">iendswith</td>
<td style="text-align:left">不区分大小写，从结束位置匹配</td>
</tr>
<tr>
<td style="text-align:left">range</td>
<td style="text-align:left">范围测试（包含于之中）</td>
</tr>
<tr>
<td style="text-align:left">year</td>
<td style="text-align:left">对于日期和日期时间字段，年份匹配</td>
</tr>
<tr>
<td style="text-align:left">month</td>
<td style="text-align:left">对于日期和日期时间字段，月份匹配</td>
</tr>
<tr>
<td style="text-align:left">day</td>
<td style="text-align:left">对于日期和日期时间字段，天数匹配</td>
</tr>
<tr>
<td style="text-align:left">week_day</td>
<td style="text-align:left">星期匹配</td>
</tr>
<tr>
<td style="text-align:left">hour</td>
<td style="text-align:left">对于日期时间字段，精确的小时匹配</td>
</tr>
<tr>
<td style="text-align:left">minute</td>
<td style="text-align:left">对于日期时间字段，精确的分钟匹配</td>
</tr>
<tr>
<td style="text-align:left">second</td>
<td style="text-align:left">对于datetime字段，精确的秒匹配</td>
</tr>
<tr>
<td style="text-align:left">isnull</td>
<td style="text-align:left">判断字段值为 True 或 False</td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">一个Boolean类型的全文搜索，以全文搜索的优势</td>
</tr>
<tr>
<td style="text-align:left">regex</td>
<td style="text-align:left">正则表达式</td>
</tr>
<tr>
<td style="text-align:left">iregex</td>
<td style="text-align:left">不区分大小写的正则表达式匹配</td>
</tr>
</tbody>
</table>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/" target="_blank" rel="external">官方文档</a></p>
<p><a href="https://wizardforcel.gitbooks.io/django-chinese-docs-18/content/2_2_2_QuerySet%20method%20reference.html" target="_blank" rel="external">Django 1.8 中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;QuerySets-evaluated&quot;&gt;&lt;a href=&quot;#QuerySets-evaluated&quot; class=&quot;headerlink&quot; title=&quot;QuerySets evaluated&quot;&gt;&lt;/a&gt;QuerySets evaluated&lt;/h3&gt;&lt;p&gt;可以创建、过滤、切片和传递查询集而不用真实操作数据库。在你对查询集做求值之前，不会发生任何实际的数据库操作。&lt;/p&gt;
&lt;p&gt;对于查询集我们使用以下方法进行求值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;li&gt;Slicing&lt;/li&gt;
&lt;li&gt;Pickling/Caching&lt;/li&gt;
&lt;li&gt;repr()&lt;/li&gt;
&lt;li&gt;len()&lt;/li&gt;
&lt;li&gt;list()&lt;/li&gt;
&lt;li&gt;bool()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;QuerySet-API&quot;&gt;&lt;a href=&quot;#QuerySet-API&quot; class=&quot;headerlink&quot; title=&quot;QuerySet API&quot;&gt;&lt;/a&gt;QuerySet API&lt;/h3&gt;&lt;h4 id=&quot;返回新的查询集方法&quot;&gt;&lt;a href=&quot;#返回新的查询集方法&quot; class=&quot;headerlink&quot; title=&quot;返回新的查询集方法&quot;&gt;&lt;/a&gt;返回新的查询集方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回一个新的 QuerySet 包含给定参数的查询匹配对象，更复杂的查询可以使用 Q 对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exclude&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回一个新的 QuerySet，它包含不满足给定的查找参数的对象，更复杂的查询同样可以使用 Q 对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant 使用笔记</title>
    <link href="http://yoursite.com/2018/04/26/vagrant-notes/"/>
    <id>http://yoursite.com/2018/04/26/vagrant-notes/</id>
    <published>2018-04-26T15:20:54.000Z</published>
    <updated>2018-04-26T15:26:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Vagrant 是一个基于 Ruby 用于创建和部署虚拟化环境的工具。</p>
<p>Vagrant 提供了易于配置、便于重现、且便携的工作环境，它基于行业技术标准，通过一个统一的流程控制来最大限度地提高 团队的灵活性及生产力。</p>
<p>为了实现其功能，Vagrant 站在了巨人的肩膀上，基于 VirtualBox、VMware、 AWS或其他虚拟机管理软件(provider) 的接口来创建虚拟机。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>软件包下载地址 <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">Vagrant Downloads</a></p>
<p>我本地是 MAC OSX 环境，下载 Vagrant 和 ViruteBox dmg 文件安装即可</p>
<p>安装完成之后，Vagrant的软件安装目录在 <code>/opt/vagrant</code>，基本数据配置目录在 <code>/Users/{your-hostname}/.vagrant.d/</code></p>
<a id="more"></a>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="BOXES"><a href="#BOXES" class="headerlink" title="BOXES"></a>BOXES</h4><p>Vagrant 是通过基础镜像包来实现快速克隆创建虚拟机的。这些基础镜像包在 Vagrant 中被称为 boxes。</p>
<h5 id="获取-boxes"><a href="#获取-boxes" class="headerlink" title="获取 boxes"></a>获取 boxes</h5><ul>
<li><a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="external"> HashiCorp’s Vagrant Cloud box catalog</a></li>
<li><a href="http://www.vagrantbox.es/" target="_blank" rel="external">Vagrantbox.es</a></li>
<li>自定义 url</li>
<li>本地文件</li>
</ul>
<p>添加启动步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vagrant box add &#123;title&#125; &#123;url&#125;  # 添加 box 到 vagrant</div><div class="line">$ vagrant init &#123;title&#125; # 初始化，生成配置文件</div><div class="line">$ vagrant up # 启动虚拟机</div></pre></td></tr></table></figure>
<p>通过 <code>vagrant box add</code> 默认会把 box 添加到下载添加到 <code>/Users/{your-hostname}/.vagrant.d/boxes</code> 目录下，而使用 <code>vagrant box list</code>查看 box 列表时会把该路径的文件夹的名字显示出来。</p>
<p>通过 URL 获取一个 centos 6.7 的 box 并启动它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vagrant box add centos-6.7 https://github.com/CommanderK5/packer-centos-template/releases/download/0.6.7/vagrant-centos-6.7.box</div><div class="line">$ ls ~/.vagrant.d/boxes</div><div class="line">centos-6.7</div><div class="line">$ vagrant box list</div><div class="line">centos-6.7 (virtualbox, 0)</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>通过上面的方法获取到的 box 是全局的，可以被不同项目使用。Vagrant 是以项目形式组织你的虚拟机群的。首先设置你的项目目录.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mkdir ~/vagrant-project</div><div class="line">$ cd ~/vagrant-project</div><div class="line">$ mkdir centos6.7-base</div><div class="line">$ cd centos6.7-base</div><div class="line">$ vagrant init</div><div class="line">A `Vagrantfile` has been placed in this directory. You are now</div><div class="line">ready to `vagrant up` your first virtual environment! Please read</div><div class="line">the comments in the Vagrantfile as well as documentation on</div><div class="line">`vagrantup.com` for more information on using Vagrant.</div><div class="line">$ ls</div><div class="line">Vagrantfile # 虚拟机的配置文件</div></pre></td></tr></table></figure>
<p>Vagrantfile 是用 ruby 代码来配置虚拟机的各种参数，包括配置多台虚拟机，每台虚拟机使用哪个box，虚拟机的资源分配、虚拟机的名字、网络等等。</p>
<p>这里我们先只指定使用的 box，其他参数暂且不配置，后面再介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat Vagrantfile</div><div class="line">...</div><div class="line">config.vm.box = &quot;centos-6.7&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vagrant up</div><div class="line">Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...</div><div class="line">==&gt; default: Importing base box &apos;centos-6.7&apos;...</div><div class="line">==&gt; default: Matching MAC address for NAT networking...</div><div class="line">==&gt; default: Setting the name of the VM: centos67-base_default_1524754885870_78735</div><div class="line">==&gt; default: Clearing any previously set network interfaces...</div><div class="line">==&gt; default: Preparing network interfaces based on configuration...</div><div class="line">    default: Adapter 1: nat</div><div class="line">==&gt; default: Forwarding ports...</div><div class="line">    default: 22 =&gt; 2222 (adapter 1)</div><div class="line">==&gt; default: Booting VM...</div><div class="line">==&gt; default: Waiting for machine to boot. This may take a few minutes...</div><div class="line">    default: SSH address: 127.0.0.1:2222</div><div class="line">    default: SSH username: vagrant</div><div class="line">    default: SSH auth method: private key</div><div class="line">    default: Warning: Connection timeout. Retrying...</div><div class="line">    default: Warning: Remote connection disconnect. Retrying...</div><div class="line">    default:</div><div class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</div><div class="line">    default: this with a newly generated keypair for better security.</div><div class="line">    default:</div><div class="line">    default: Inserting generated public key within guest...</div><div class="line">    default: Removing insecure key from the guest if it&apos;s present...</div><div class="line">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</div><div class="line">==&gt; default: Machine booted and ready!</div><div class="line">==&gt; default: Checking for guest additions in VM...</div><div class="line">==&gt; default: Mounting shared folders...</div><div class="line">    default: /vagrant =&gt; /Users/&#123;your-hostname&#125;/vagrant-project/centos6.7-base</div></pre></td></tr></table></figure>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vagrant status</div><div class="line">Current machine states:</div><div class="line"></div><div class="line">default                   running (virtualbox)</div><div class="line"></div><div class="line">The VM is running. To stop this VM, you can run `vagrant halt` to</div><div class="line">shut it down forcefully, or you can run `vagrant suspend` to simply</div><div class="line">suspend the virtual machine. In either case, to restart it again,</div><div class="line">simply run `vagrant up`.</div><div class="line">$ vagrant ssh default</div><div class="line">[vagrant@localhost ~]$ cat /etc/issue</div><div class="line">CentOS release 6.7 (Final)</div><div class="line">Kernel \r on an \m</div></pre></td></tr></table></figure>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vagrant -h</div><div class="line">Usage: vagrant [options] &lt;command&gt; [&lt;args&gt;]</div><div class="line"></div><div class="line">    -v, --version                    Print the version and exit.</div><div class="line">    -h, --help                       Print this help.</div><div class="line"></div><div class="line">Common commands:</div><div class="line">     box             manages boxes: installation, removal, etc. # box 管理</div><div class="line">     connect         connect to a remotely shared Vagrant environment # 连接远程共享环境</div><div class="line">     destroy         stops and deletes all traces of the vagrant machine # 销毁</div><div class="line">     global-status   outputs status Vagrant environments for this user</div><div class="line">     halt            stops the vagrant machine # 强制关闭虚拟机</div><div class="line">     help            shows the help for a subcommand</div><div class="line">     init            initializes a new Vagrant environment by creating a Vagrantfile # 初始化生成配置文件</div><div class="line">     login           log in to HashiCorp&apos;s Atlas</div><div class="line">     package         packages a running vagrant environment into a box</div><div class="line">     plugin          manages plugins: install, uninstall, update, etc.</div><div class="line">     provision       provisions the vagrant machine</div><div class="line">     push            deploys code in this environment to a configured destination</div><div class="line">     rdp             connects to machine via RDP</div><div class="line">     reload          restarts vagrant machine, loads new Vagrantfile configuration # 重启</div><div class="line">     resume          resume a suspended vagrant machine # 恢复暂停的虚拟机</div><div class="line">     share           share your Vagrant environment with anyone in the world</div><div class="line">     ssh             connects to machine via SSH</div><div class="line">     ssh-config      outputs OpenSSH valid configuration to connect to the machine</div><div class="line">     status          outputs status of the vagrant machine</div><div class="line">     suspend         suspends the machine # 挂起</div><div class="line">     up              starts and provisions the vagrant environment # 启动</div><div class="line">     version         prints current and latest Vagrant version</div><div class="line"></div><div class="line">For help on any individual command run `vagrant COMMAND -h`</div><div class="line"></div><div class="line">Additional subcommands are available, but are either more advanced</div><div class="line">or not commonly used. To see all subcommands, run the command</div><div class="line">`vagrant list-commands`.</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.vagrantup.com/docs/index.html" target="_blank" rel="external">vagrant 官方文档</a></p>
<p><a href="http://tangbaoping.github.io/vagrant_doc_zh/v2/" target="_blank" rel="external">vagrant 中文文档</a></p>
<p><a href="http://linbo.github.io/2013/01/06/intro-vagrant" target="_blank" rel="external">Vagrant初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Vagrant 是一个基于 Ruby 用于创建和部署虚拟化环境的工具。&lt;/p&gt;
&lt;p&gt;Vagrant 提供了易于配置、便于重现、且便携的工作环境，它基于行业技术标准，通过一个统一的流程控制来最大限度地提高 团队的灵活性及生产力。&lt;/p&gt;
&lt;p&gt;为了实现其功能，Vagrant 站在了巨人的肩膀上，基于 VirtualBox、VMware、 AWS或其他虚拟机管理软件(provider) 的接口来创建虚拟机。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;软件包下载地址 &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;Vagrant Downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我本地是 MAC OSX 环境，下载 Vagrant 和 ViruteBox dmg 文件安装即可&lt;/p&gt;
&lt;p&gt;安装完成之后，Vagrant的软件安装目录在 &lt;code&gt;/opt/vagrant&lt;/code&gt;，基本数据配置目录在 &lt;code&gt;/Users/{your-hostname}/.vagrant.d/&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vagrant" scheme="http://yoursite.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>jsTree 使用笔记</title>
    <link href="http://yoursite.com/2018/04/11/jsTree-notes/"/>
    <id>http://yoursite.com/2018/04/11/jsTree-notes/</id>
    <published>2018-04-11T03:02:46.000Z</published>
    <updated>2018-04-11T03:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>jsTree 是一个免费开源的 jQuery 插件，可以提供交互式树型结构。jsTree 很容易扩展，配置方便，支持 HTML 和 JSON 数据源以及 AJAX 数据加载。它使用 jQuery 的事件系统，因此绑定树中各种事件的回调很容易实现。</p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><p>要想正常加载 jsTree 需要满足一下三个条件：</p>
<ul>
<li>jQuery &gt; 1.9.1</li>
<li>A jstree theme</li>
<li>The jstree source file</li>
</ul>
<a id="more"></a>
<h5 id="下载文件到本地"><a href="#下载文件到本地" class="headerlink" title="下载文件到本地"></a>下载文件到本地</h5><ul>
<li><a href="https://code.jquery.com/jquery-3.3.1.min.js" target="_blank" rel="external">Download jquery</a></li>
<li><a href="https://codeload.github.com/vakata/jstree/legacy.zip/3.3.5" target="_blank" rel="external">Download jsTree</a></li>
</ul>
<p>本地引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># jsTree 默认主题</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/themes/default/style.min.css&quot; /&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;jquery/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;dist/jstree.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># jsTree 默认主题</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css&quot; /&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="填充树结构"><a href="#填充树结构" class="headerlink" title="填充树结构"></a>填充树结构</h4><p>将下载的文件解压到本地，通过一个简单的 HTML 页面先来看效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ ls</div><div class="line">LICENSE-MIT        bower.json         composer.json      dist               gruntfile.js       jstree.jquery.json src</div><div class="line">README.md          component.json     demo               exp1.html          jquery             package.json       test</div><div class="line">$ cat exp1.html</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</div><div class="line">    &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;</div><div class="line"></div><div class="line">    &lt;title&gt;Jstree&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;dist/themes/default/style.min.css&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;jstree_demo_div&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;Root node</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;Child node 1&lt;/li&gt;</div><div class="line">                    &lt;li&gt;Child node 2&lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script src=&quot;jquery/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;dist/jstree.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    </div><div class="line">    </div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    $(function () &#123; $(&apos;#jstree_demo_div&apos;).jstree(); &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器效果</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C50152E0-0A00-4D2A-A176-E0F4BFC89BE9.png" alt=""></p>
<p>这里我们使用的 HTML 的元素进行树的数据填充但不够灵活，我们可以使用 JSON 数据进行填充。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</div><div class="line">    &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;</div><div class="line"></div><div class="line">    &lt;title&gt;Jstree&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;dist/themes/default/style.min.css&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;jstree_demo_div&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script src=&quot;jquery/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;dist/jstree.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    $(function () &#123;</div><div class="line">        $(&apos;#jstree_demo_div&apos;).jstree(&#123;</div><div class="line">            &apos;core&apos; : &#123;</div><div class="line">              &apos;data&apos; : [</div><div class="line">                &#123; &apos;text&apos; : &apos;Root node&apos;, &apos;children&apos; : [</div><div class="line">                    &#123; &apos;text&apos; : &apos;Child node 1&apos; &#125;,</div><div class="line">                    &#123; &apos;text&apos; : &apos;Child node 2&apos; &#125;</div><div class="line">                  ]</div><div class="line">                &#125;</div><div class="line">              ]</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>除了 HTML 数据元素 JSON 格式数据进行填充之外，还可以通过 Ajax 的请求数据进行填充。现在我们对 jsTree 就有一定的认知了，它其实就是将我们的数据进行结构化，通过树型进行展示。</p>
<h3 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$(&apos;#jstree_demo_div&apos;).jstree(&#123;</div><div class="line">  &apos;core&apos; : &#123;</div><div class="line">    &apos;themes&apos; : &#123;</div><div class="line">        &apos;variant&apos; : &apos;large&apos;  //主题样式</div><div class="line">    &#125;,</div><div class="line">    &apos;data&apos; : [</div><div class="line">        &#123; &apos;text&apos; : &apos;Root node&apos;, &apos;children&apos; : [</div><div class="line">            &#123; &apos;text&apos; : &apos;Child node 1&apos; &#125;,</div><div class="line">            &#123; &apos;text&apos; : &apos;Child node 2&apos; &#125;</div><div class="line">        ]&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &apos;checkbox&apos; : &#123;</div><div class="line">    &apos;keep_selected_style&apos; : false</div><div class="line">  &#125;,</div><div class="line">  &apos;plugins&apos; : [ &apos;wholerow&apos;, &apos;checkbox&apos; ] //激活的插件</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="HTML-数据配置"><a href="#HTML-数据配置" class="headerlink" title="HTML 数据配置"></a>HTML 数据配置</h3><p>通过 HTML 元素进行数据填充</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">...</div><div class="line"> &lt;div id=&quot;jstree_demo_div&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;Root node 1</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;Child node 1&lt;/li&gt;</div><div class="line">                    &lt;li&gt;Child node 2&lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;Root node 2</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;Child node 3&lt;/li&gt;</div><div class="line">                    &lt;li&gt;Child node 4&lt;/li&gt;</div><div class="line">                    &lt;li&gt;&lt;a href=&quot;http://jstree.com&quot;&gt;jstree.com&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;!-- 点击链接并不会跳转，需要通过 changed.jstree 事件来处理--&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script src=&quot;jquery/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;dist/jstree.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    $(function () &#123;</div><div class="line">        $(&apos;#jstree_demo_div&apos;).jstree();</div><div class="line">    &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>初始化节点属性</p>
<ul>
<li>class 属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;jstree_demo_div&quot;&gt;</div><div class="line">       &lt;ul&gt;</div><div class="line">           &lt;li&gt;Root node 1</div><div class="line">               &lt;ul&gt;</div><div class="line">                   &lt;li&gt;Child node 1&lt;/li&gt;</div><div class="line">                   &lt;li&gt;Child node 2&lt;/li&gt;</div><div class="line">               &lt;/ul&gt;</div><div class="line">           &lt;/li&gt;</div><div class="line">           &lt;li class=&quot;jstree-open&quot; id=&quot;root_node2&quot;&gt;Root node 2</div><div class="line">               &lt;ul&gt;</div><div class="line">                   &lt;li&gt;Child node 3&lt;/li&gt;</div><div class="line">                   &lt;li&gt;Child node 4&lt;/li&gt;</div><div class="line">                   &lt;li&gt;&lt;a href=&quot;http://jstree.com&quot; class=&quot;jstree-clicked&quot;&gt;jstree.com&lt;/a&gt;&lt;/li&gt;</div><div class="line">                   &lt;!-- 点击链接并不会跳转，需要通过 changed.jstree 事件来处理--&gt;</div><div class="line">               &lt;/ul&gt;</div><div class="line">           &lt;/li&gt;</div><div class="line">       &lt;/ul&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>jstree-open 默认打开节点、jstree-clicked 默认点击</p>
</blockquote>
<ul>
<li>data-jstree 属性</li>
</ul>
<p><code>opened, selected, disabled, icon</code></p>
<p>对于 icon 可以使用 <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/2126244/9c5b6db6-5245-11e6-800b-b1e5008b1179?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180410%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180410T092649Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=95d684a00d66bd0dd0bb48f6c3bbaba38e06d54c990b1d426db104c08e12d46f&amp;X-Amz-SignedHeaders=host&amp;actor_id=11457625&amp;response-content-disposition=attachment%3B%20filename%3Dbootstrap-3.3.7-dist.zip&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="external">Bootstrap3</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;jstree_demo_div&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;Root node 1</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;Child node 1&lt;/li&gt;</div><div class="line">                    &lt;li&gt;Child node 2&lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li data-jstree=&apos;&#123;&quot;opened&quot;: true, &quot;selected&quot;: true&#125;&apos;&gt;Root node 2</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li data-jstree=&apos;&#123;&quot;disabled&quot;: true&#125;&apos;&gt;Child node 3&lt;/li&gt;</div><div class="line">                    &lt;li data-jstree=&apos;&#123;&quot;icon&quot;: &quot;http://jstree.com/tree.png&quot;&#125;&apos;&gt;Child node 4&lt;/li&gt;</div><div class="line">                    &lt;li data-jstree=&apos;&#123;&quot;icon&quot;: &quot;glyphicon glyphicon-file&quot;&#125;&apos;&gt;Child node 5&lt;/li&gt;</div><div class="line">                    &lt;li data-jstree=&apos;&#123;&quot;icon&quot;: &quot;glyphicon glyphicon-leaf&quot;&#125;&apos;&gt;&lt;a href=&quot;http://jstree.com&quot;&gt;jstree.com&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;!-- 点击链接并不会跳转，需要通过 changed.jstree 事件来处理--&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C9201E55-8924-4BB0-A8F0-36B06DD0C76B.png" alt=""></p>
<h3 id="JSON-数据配置"><a href="#JSON-数据配置" class="headerlink" title="JSON 数据配置"></a>JSON 数据配置</h3><p>jsTree 需要特定的格式才能使用JSON。 在标准语法中，不需要任何字段 - 只传递您所需的内容。</p>
<p>数据格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// Expected format of the node (there are no required fields)</div><div class="line">&#123;</div><div class="line">  id          : &quot;string&quot; // will be autogenerated if omitted</div><div class="line">  text        : &quot;string&quot; // node text</div><div class="line">  icon        : &quot;string&quot; // string for custom</div><div class="line">  state       : &#123;</div><div class="line">    opened    : boolean  // is the node open</div><div class="line">    disabled  : boolean  // is the node disabled</div><div class="line">    selected  : boolean  // is the node selected</div><div class="line">  &#125;,</div><div class="line">  children    : []  // array of strings or objects</div><div class="line">  li_attr     : &#123;&#125;  // attributes for the generated LI node</div><div class="line">  a_attr      : &#123;&#125;  // attributes for the generated A node</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用 AJAX 将 children 设置为布尔值 true 时，jsTree 会将节点呈现为关闭状态，并在用户打开时为该节点发出额外的请求。</p>
<p>任何嵌套的子元素都应该是遵循相同格式的对象，或者是纯字符串（在这种情况下，字符串用于节点的文本，其他所有内容都是自动生成的）。</p>
<h4 id="可选的JSON格式"><a href="#可选的JSON格式" class="headerlink" title="可选的JSON格式"></a>可选的JSON格式</h4><p>如果您不想使用嵌套子方法，则可以使用替代语法，其中每个节点对象都有两个必填字段：id＆parent和no children property（其他所有内容保持不变）。</p>
<p>jsTree会自动构建层次结构。 为了表明一个节点应该是一个根节点，它的父属性设置为“＃”。</p>
<p>这应该主要用于一次渲染整个树，并且在使用邻接方式将数据存储在数据库中时非常有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// Alternative format of the node (id &amp; parent are required)</div><div class="line">&#123;</div><div class="line">  id          : &quot;string&quot; // required</div><div class="line">  parent      : &quot;string&quot; // required &apos;#&apos; 代表根节点</div><div class="line">  text        : &quot;string&quot; // node text</div><div class="line">  icon        : &quot;string&quot; // string for custom</div><div class="line">  state       : &#123;</div><div class="line">    opened    : boolean  // is the node open</div><div class="line">    disabled  : boolean  // is the node disabled</div><div class="line">    selected  : boolean  // is the node selected</div><div class="line">  &#125;,</div><div class="line">  li_attr     : &#123;&#125;  // attributes for the generated LI node</div><div class="line">  a_attr      : &#123;&#125;  // attributes for the generated A node</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>使用标准格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$(function () &#123;</div><div class="line">        $(&apos;#jstree_demo_div&apos;).jstree(&#123;</div><div class="line">            &apos;core&apos; : &#123;</div><div class="line">                &apos;data&apos; : [</div><div class="line">                   &apos;Simple root node&apos;,</div><div class="line">                   &#123;</div><div class="line">                        &apos;text&apos; : &apos;Root node 2&apos;,</div><div class="line">                        &apos;state&apos; : &#123;</div><div class="line">                            &apos;opened&apos; : true,</div><div class="line">                            &apos;selected&apos; : true</div><div class="line">                        &#125;,</div><div class="line">                        &apos;children&apos; : [</div><div class="line">                            &#123; &apos;text&apos; : &apos;Child  node 1&apos; &#125;,</div><div class="line">                            &apos;Child node 2&apos;</div><div class="line">                        ]</div><div class="line">                    &#125;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>使用可选格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$(function () &#123;</div><div class="line">       $(&apos;#jstree_demo_div&apos;).jstree(&#123;</div><div class="line">           &apos;core&apos; : &#123;</div><div class="line">               &apos;data&apos; : [</div><div class="line">                  &#123;&apos;id&apos;: &apos;json1&apos;, &apos;parent&apos;: &apos;#&apos;, &apos;text&apos;: &apos;Simple root node&apos;&#125;,</div><div class="line">                  &#123;&apos;id&apos;: &apos;json2&apos;, &apos;parent&apos;: &apos;#&apos;, &apos;text&apos;: &apos;Root node 2&apos;, &apos;state&apos;: &#123;&apos;opened&apos;: true, &apos;selected&apos;: true&#125;&#125;,</div><div class="line">                  &#123;&apos;id&apos;: &apos;json3&apos;, &apos;parent&apos;: &apos;json2&apos;, &apos;text&apos;: &apos;Child 1&apos;&#125;,</div><div class="line">                  &#123;&apos;id&apos;: &apos;json4&apos;, &apos;parent&apos;: &apos;json2&apos;, &apos;text&apos;: &apos;Child 2&apos;&#125;,</div><div class="line">               ]</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$(function () &#123;</div><div class="line">        $(&apos;#jstree_demo_div&apos;).jstree(&#123;</div><div class="line">            &apos;core&apos; : &#123;</div><div class="line">                &apos;data&apos; : [</div><div class="line">                   &#123;&apos;id&apos;: &apos;json1&apos;, &apos;parent&apos;: &apos;#&apos;, &apos;text&apos;: &apos;Simple root node&apos;&#125;,</div><div class="line">                   &#123;&apos;id&apos;: &apos;json2&apos;, &apos;parent&apos;: &apos;#&apos;, &apos;text&apos;: &apos;Root node 2&apos;, &apos;state&apos;: &#123;&apos;opened&apos;: true, &apos;selected&apos;: true&#125;&#125;,</div><div class="line">                   &#123;&apos;id&apos;: &apos;json3&apos;, &apos;parent&apos;: &apos;json2&apos;, &apos;text&apos;: &apos;Child 1&apos;&#125;,</div><div class="line">                   &#123;&apos;id&apos;: &apos;json4&apos;, &apos;parent&apos;: &apos;json2&apos;, &apos;text&apos;: &apos;Child 2&apos;&#125;,</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        $(&apos;#jstree_demo_div&apos;).on(&apos;changed.jstree&apos;, function (e, data) &#123;</div><div class="line">            $(&apos;#event_result&apos;).html(&apos;Selected:&apos; + data.instance.get_node(data.selected).text)</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>changed.jstree 选择节点改变时触发事件</li>
<li>get_node 获取节点 json 数据</li>
</ul>
<p>关于 jsTree 就先简单记录到这里，后续深入使用再更新。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ctolib.com/jstree.html#include-all-neccessary-files" target="_blank" rel="external">jstree 实用的 jQuery 目录树插件</a></p>
<p><a href="https://www.jstree.com/" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;jsTree 是一个免费开源的 jQuery 插件，可以提供交互式树型结构。jsTree 很容易扩展，配置方便，支持 HTML 和 JSON 数据源以及 AJAX 数据加载。它使用 jQuery 的事件系统，因此绑定树中各种事件的回调很容易实现。&lt;/p&gt;
&lt;h3 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h3&gt;&lt;h4 id=&quot;获取文件&quot;&gt;&lt;a href=&quot;#获取文件&quot; class=&quot;headerlink&quot; title=&quot;获取文件&quot;&gt;&lt;/a&gt;获取文件&lt;/h4&gt;&lt;p&gt;要想正常加载 jsTree 需要满足一下三个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jQuery &amp;gt; 1.9.1&lt;/li&gt;
&lt;li&gt;A jstree theme&lt;/li&gt;
&lt;li&gt;The jstree source file&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="jsTree" scheme="http://yoursite.com/tags/jsTree/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣房源爬虫小记</title>
    <link href="http://yoursite.com/2018/04/05/douban-spider/"/>
    <id>http://yoursite.com/2018/04/05/douban-spider/</id>
    <published>2018-04-05T06:03:55.000Z</published>
    <updated>2018-04-06T01:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又要开始找房，来上海三年不到已经是第三次搬家，真是居大不易。现在住的房子是在豆瓣小组上找的，豆瓣上个人房源较多，但是豆瓣小组没有对房源信息进行分类，找起来比较费时，索性写了个简单的爬虫，根据关键字来找房。网上也有一些现成的代码实现，想着还是自己实践一下。</p>
<p>Python 新手上路…</p>
<h3 id="获取豆瓣房源小组链接"><a href="#获取豆瓣房源小组链接" class="headerlink" title="获取豆瓣房源小组链接"></a>获取豆瓣房源小组链接</h3><p>先搜索一下上海的租房小组</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/270B4257-2781-4F04-A000001F-A539B7F1791D.png" alt=""></p>
<p>找几个人数较多和活跃度高的小组，进入小组讨论页面，观察 URL 的规律。<br><a id="more"></a><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/1D40CBE0-36C5-45E4-9B42-0E7823ADF269.png" alt=""><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/7BD30596-ABF6-428C-BF6B-D232B1C6605D.png" alt=""></p>
<p>由此可知我们可以通过 <code>https://www.douban.com/group/&lt;组名&gt;/disscussion</code> 来获取不同组的房源帖子信息，我选取了五个小组进行爬取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [1]: import os</div><div class="line">In [2]: group_list = [&apos;shanghaizufang&apos;, &apos;homeatshanghai&apos;, &apos;383972&apos;, &apos;shzf&apos;, &apos;251101&apos;]</div><div class="line">In [3]: index_url = [os.path.join(&apos;https://www.douban.com/group&apos;, i, &apos;discussion&apos;) for i in group_list]</div><div class="line">In [4]: index_url</div><div class="line">Out[4]:</div><div class="line">[&apos;https://www.douban.com/group/shanghaizufang/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/homeatshanghai/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/383972/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/shzf/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/251101/discussion&apos;]</div></pre></td></tr></table></figure>
<h3 id="资源定位"><a href="#资源定位" class="headerlink" title="资源定位"></a>资源定位</h3><p>通过查看页面元素信息，找到每个帖子标题所对应的网页代码。我们可以发现每个房源标题对应的是一个 <code>class</code> 属性为 <code>title</code> 的 <code>td</code> 标记。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/59E824C2-AC6A-45F4-86D4-2582065E92A5.png" alt=""></p>
<p>使用 <code>BeautifulSoup</code> 尝试获取一下小组讨论中帖子标题网页代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [1]: import requests</div><div class="line">In [2]: from bs4 import BeautifulSoup</div><div class="line">In [3]: url = &apos;https://www.douban.com/group/shanghaizufang/discussion&apos;</div><div class="line">In [4]: headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 &apos;</div><div class="line">   ...:                                  &apos;(KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&apos;&#125;</div><div class="line">In [5]: res = requests.get(url, headers=headers)</div><div class="line">In [6]: soup = BeautifulSoup(res.text, &apos;html.parser&apos;)</div><div class="line">In [7]: title_list = soup.find_all(&apos;td&apos;, class_=&apos;title&apos;)</div><div class="line">In [8]: for tl in title_list:</div><div class="line">    ...:     print(tl)</div><div class="line">    ...:</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/114471599/&quot; title=&quot;黄浦区临地铁4号13号线单间出租。2300！无中介，可月租！&quot;&gt;</div><div class="line">                       黄浦区临地铁4号13号线单间出租。2300！无中介，可...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/113810667/&quot; title=&quot;——有阳台·房间空间大·低价出租·2260元·正南·电梯房·步行6分钟到7号线·《盒马生鲜·DFC影院·大华锦绣国际》隔壁·锦绣华城2街区&quot;&gt;</div><div class="line">                       ——有阳台·房间空间大·低价出租·2260元·正南...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/111282163/&quot; title=&quot;7号线杨高南路___北艾路1200弄超大1室_正南_大飘窗_2790元&quot;&gt;</div><div class="line">                       7号线杨高南路___北艾路1200弄超大1室_正南_大飘窗...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>通过 <code>BeautifulSoup</code> 我们已经成功获取到帖子标题相关网页代码信息，接下来就是匹配我们的关键字并把对应标题的 url 保存下来，这样我们就不用一页页去找房源信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [9]: for tl in title_list:</div><div class="line">    ...:     print(tl.a[&apos;title&apos;], tl.a[&apos;href&apos;])</div><div class="line">    ...:</div><div class="line">紧靠漕河泾地铁12号线虹梅路站古美小区精装一室户随时看房 https://www.douban.com/group/topic/114690388/</div><div class="line">【性价比最高】【2/4/6/9】世纪大道地铁站口200米内，2018.4.5起三天内【出租】有效 https://www.douban.com/group/topic/114031302/</div><div class="line">陆家嘴，2号线东昌路站，精装南北两房一厅，5400元可谈，乳山四村 https://www.douban.com/group/topic/114838496/</div><div class="line">7号线30秒___高科西路2111弄（独立阳台_洗漱）2890 https://www.douban.com/group/topic/111749919/</div><div class="line">1号线外环路站______主卧朝南、近地铁 https://www.douban.com/group/topic/115006334/</div><div class="line">7号线__成山路2388弄(高档小区）__环境美_2090元 https://www.douban.com/group/topic/111343989/</div><div class="line">1500元就能租到社区一居室/复式低价火热出租ING https://www.douban.com/group/topic/114031502/</div><div class="line">1号线❤️莲花路站❤️朝南+落地窗（4分钟到地铁）___2200¥ https://www.douban.com/group/topic/115010633/</div><div class="line">工作调动2469号线德平路地铁站两房！价格可刀 https://www.douban.com/group/topic/114668639/</div><div class="line">2号线 淞虹路站 通协小区 朝南主卧带飘窗 随时入住 精装全配 可做饭 凌空首选随时入住先到先得 2700/月 https://www.douban.com/group/topic/114638949/</div><div class="line">3号线铁力路站，实体墙一室带独立卫生间，可以做饭，出租1900元。 https://www.douban.com/group/topic/115000070/</div><div class="line">1号线莲花路站_____步行2分钟（西班牙名园小区） https://www.douban.com/group/topic/115009200/</div><div class="line">—落地大阳台·2780元·豪装—海归首选房—敞亮的大房子《陆家嘴·锦绣里》高档小区—电梯房 https://www.douban.com/group/topic/113808306/</div><div class="line">静安高荣小区朝南带阳台主卧出租&lt;限女生&gt;3100/月，直接和房东签合同 https://www.douban.com/group/topic/114799989/</div><div class="line">1号线❤️外环路站【主卧独卫】地铁口__ 上海阳城小区 https://www.douban.com/group/topic/115008659/</div><div class="line">五角场附近主卧出租，市光路70弄小区，限女生 https://www.douban.com/group/topic/113345605/</div><div class="line">7号线_北艾路1200弄__正南温馨_干净安静：1690元（租女生） https://www.douban.com/group/topic/112014980/</div><div class="line">7号线锦绣路站【山姆会员店】旁边  朝南精装大1室 带飘窗__2490元 https://www.douban.com/group/topic/111243092/</div><div class="line">一三四八号线上海火车站附近 （2400）限一个女生 （实图个图）有厨房 朝南主卧 https://www.douban.com/group/topic/114856540/</div><div class="line">一室一厅一厨一卫整租！7号线，上海大学地铁站！6分钟！ https://www.douban.com/group/topic/114814137/</div><div class="line">【无中介】2号线 中山公园和8号线翔殷路（靠近10号线五角广场）及9号线松江大学城站一室户 https://www.douban.com/group/topic/114031377/</div><div class="line">七号线南陈路，整租两房两厅，便宜出租！ https://www.douban.com/group/topic/113826619/</div><div class="line">7号线__北艾路1200弄__超大一室，非常温馨：2490元 https://www.douban.com/group/topic/112276783/</div><div class="line">2/4/6/9号线世纪大道站，精装双南两房一厅，6600元可谈，梅园五街坊 https://www.douban.com/group/topic/114883174/</div><div class="line">这应该是徐家汇最好的公寓 https://www.douban.com/group/topic/113839494/</div><div class="line"></div><div class="line">In [10]: keyword = &apos;1号线&apos;</div><div class="line">In [11]: for tl in title_list:</div><div class="line">    ...:     if keyword in tl.a[&apos;title&apos;]:</div><div class="line">    ...:         print(tl.a[&apos;title&apos;], tl.a[&apos;href&apos;])</div><div class="line">    ...:</div><div class="line">1号线外环路站______主卧朝南、近地铁 https://www.douban.com/group/topic/115006334/</div><div class="line">1号线❤️莲花路站❤️朝南+落地窗（4分钟到地铁）___2200¥ https://www.douban.com/group/topic/115010633/</div><div class="line">1号线莲花路站_____步行2分钟（西班牙名园小区） https://www.douban.com/group/topic/115009200/</div><div class="line">1号线❤️外环路站【主卧独卫】地铁口__ 上海阳城小区 https://www.douban.com/group/topic/115008659/</div></pre></td></tr></table></figure>
<h3 id="页码控制"><a href="#页码控制" class="headerlink" title="页码控制"></a>页码控制</h3><p>以上海租房小组为例，之前测试爬取的路径是 <code>https://www.douban.com/group/shanghaizufang/discussion</code> 默认只会爬取第一页的 25 条信息，那么我们想爬取更多的信息，如何控制爬取的页码呢？</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/40E19CBD-E356-4CFA-B635-A430631C84D0.png" alt=""></p>
<p>通过　<code>class</code> 属性为 <code>next</code> 的 <code>span</code>　标记可以获取到下一页的链接地址，<code>https://www.douban.com/group/shanghaizufang/discussion?start=25</code> 表示第二页从第 25 条记录开始展示，我们可以通过这个控制要爬取的信息条数。</p>
<h3 id="代码概览"><a href="#代码概览" class="headerlink" title="代码概览"></a>代码概览</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"></div><div class="line">import os</div><div class="line">import requests</div><div class="line">import time</div><div class="line">from bs4 import BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line">class DouBanHouseSpider(object):</div><div class="line"></div><div class="line">    &quot;&quot;&quot;</div><div class="line">    抓取豆瓣小组房源信息</div><div class="line"></div><div class="line">     Attributes:</div><div class="line">        key_word: 房源标题关键字</div><div class="line">        page_num: 每个小组的抓取页数</div><div class="line">        group_list: 豆瓣小组列表</div><div class="line">        index_url: 豆瓣小组列表链接</div><div class="line">        data: 存放抓取结果</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, key_word, page_num):</div><div class="line">        self.key_word = key_word</div><div class="line">        self.page_num = page_num</div><div class="line">        self.group_list = [&apos;shanghaizufang&apos;, &apos;homeatshanghai&apos;, &apos;383972&apos;, &apos;shzf&apos;, &apos;251101&apos;]</div><div class="line">        self.index_url = [os.path.join(&apos;https://www.douban.com/group&apos;, i, &apos;discussion&apos;) for i in self.group_list]</div><div class="line">        self.data = &#123;&#125;</div><div class="line">        print(&apos;豆瓣房源爬虫准备就绪, 开始爬取数据...&apos;)</div><div class="line"></div><div class="line">    def get_url_content(self, url):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        根据 url 抓取页面数据</div><div class="line"></div><div class="line">        Args:</div><div class="line">            url: 豆瓣小组链接</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        try:</div><div class="line">            time.sleep(1)</div><div class="line">            headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 &apos;</div><div class="line">                                     &apos;(KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&apos;&#125;</div><div class="line">            res = requests.get(url, headers=headers)</div><div class="line">            soup = BeautifulSoup(res.text, &apos;html.parser&apos;)</div><div class="line">            title_list = soup(&apos;td&apos;, class_=&apos;title&apos;)</div><div class="line">            for tl in title_list:</div><div class="line">                if self.key_word in tl.a.attrs[&apos;title&apos;]:</div><div class="line">                    self.data[tl.a.attrs[&apos;title&apos;]] = tl.a.attrs[&apos;href&apos;]</div><div class="line">            next_page = soup(&apos;span&apos;, class_=&apos;next&apos;)</div><div class="line">            if next_page:</div><div class="line">                next_url = next_page[0].link.attrs[&apos;href&apos;]</div><div class="line">                end_title = next_url.split(&apos;=&apos;)[1]</div><div class="line">                if int(end_title) &lt; (self.page_num * 25):</div><div class="line">                    self.get_url_content(next_url)</div><div class="line">        except Exception as e:</div><div class="line">            print(&apos;抓取过程报错：%s&apos; % e)</div><div class="line"></div><div class="line">    def start_spider(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        爬虫入口</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        for i in self.index_url:</div><div class="line">            self.get_url_content(i)</div><div class="line">        for k, v in self.data.items():</div><div class="line">            print(&apos;标题：%s, 链接地址：%s&apos;%(k,v))</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    主函数</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    print(&quot;&quot;&quot;</div><div class="line">            ###############################</div><div class="line">                豆瓣房源小组爬虫</div><div class="line">                Author: Abnerzhao</div><div class="line">                Version: 0.0.1</div><div class="line">                Date: 2018-04-04</div><div class="line">            ###############################</div><div class="line">        &quot;&quot;&quot;)</div><div class="line">    key_word = input(&apos;请输入找房关键字：&apos;)</div><div class="line">    page_num = input(&apos;请输入抓取页面数：&apos;)</div><div class="line">    if not key_word:</div><div class="line">        key_word = &apos;1号线&apos;</div><div class="line">    if not page_num:</div><div class="line">        page_num = 5</div><div class="line">    house_spider = DouBanHouseSpider(key_word, int(page_num))</div><div class="line">    house_spider.start_spider()</div><div class="line">    print(&apos;豆瓣房源爬虫爬取结束...&apos;)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<blockquote>
<p>请使用 Python3，<a href="https://github.com/Abnerzhao/spider/blob/master/douban/douban_spider_exp1.py" target="_blank" rel="external">爬虫源码地址</a></p>
</blockquote>
<p>执行效果：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/BAFCA92D-6F56-478A-B94E-8D18830BB546.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个爬虫很简单，没有进行模拟登陆也能抓取，当抓取页面数较大时会耗时较长。同一个房源信息可能在不同的小组中都有，所以通过一个字典来保存抓取的标题和链接，避免重复的标题。</p>
<p>后续待优化的地方:</p>
<ul>
<li>模拟登陆</li>
<li>支持多个关键字</li>
<li>多线程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又要开始找房，来上海三年不到已经是第三次搬家，真是居大不易。现在住的房子是在豆瓣小组上找的，豆瓣上个人房源较多，但是豆瓣小组没有对房源信息进行分类，找起来比较费时，索性写了个简单的爬虫，根据关键字来找房。网上也有一些现成的代码实现，想着还是自己实践一下。&lt;/p&gt;
&lt;p&gt;Python 新手上路…&lt;/p&gt;
&lt;h3 id=&quot;获取豆瓣房源小组链接&quot;&gt;&lt;a href=&quot;#获取豆瓣房源小组链接&quot; class=&quot;headerlink&quot; title=&quot;获取豆瓣房源小组链接&quot;&gt;&lt;/a&gt;获取豆瓣房源小组链接&lt;/h3&gt;&lt;p&gt;先搜索一下上海的租房小组&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/270B4257-2781-4F04-A000001F-A539B7F1791D.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;找几个人数较多和活跃度高的小组，进入小组讨论页面，观察 URL 的规律。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Celery 后台执行方法</title>
    <link href="http://yoursite.com/2018/03/25/celery-background/"/>
    <id>http://yoursite.com/2018/03/25/celery-background/</id>
    <published>2018-03-25T06:40:10.000Z</published>
    <updated>2018-03-25T06:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="init-script"><a href="#init-script" class="headerlink" title="init-script"></a>init-script</h3><p>1.先下载两个脚本文件 <a href="https://github.com/celery/celery/tree/3.1/extra/generic-init.d/" target="_blank" rel="external">generic-init.d</a>，我的项目里有定时任务，所以两个都需要用到</p>
<p>2.创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/default/celeryd</div><div class="line"># Names of nodes to start</div><div class="line">#   most people will only start one node:</div><div class="line"></div><div class="line">CELERYD_NODES=&quot;worker1&quot; # work 任务节点</div><div class="line"></div><div class="line">#   but you can also start multiple and configure settings</div><div class="line">#   for each in CELERYD_OPTS</div><div class="line">#CELERYD_NODES=&quot;worker1 worker2 worker3&quot;</div><div class="line">#   alternatively, you can specify the number of nodes to start:</div><div class="line">#CELERYD_NODES=10</div><div class="line"></div><div class="line"># Absolute or relative path to the &apos;celery&apos; command:</div><div class="line"></div><div class="line">CELERY_BIN=&quot;/home/prod/softwares/python/bin/celery&quot; # celery 命令的绝对路径</div><div class="line"></div><div class="line"># App instance to use</div><div class="line"># comment out this line if you don&apos;t use an app</div><div class="line"></div><div class="line">CELERY_APP=&quot;wfstar&quot; # 应用实例</div><div class="line"></div><div class="line"># or fully qualified:</div><div class="line">#CELERY_APP=&quot;proj.tasks:app&quot;</div><div class="line"></div><div class="line"># Where to chdir at start.</div><div class="line">CELERYD_CHDIR=&quot;/home/prod/deploys/wfstar&quot; # 项目目录</div><div class="line"></div><div class="line"># Extra command-line arguments to the worker</div><div class="line"></div><div class="line">CELERYD_OPTS=&quot;--time-limit=300 --concurrency=8&quot; # 命令行参数，更多请参考 man 手册 </div><div class="line"></div><div class="line"># Configure node-specific settings by appending node name to arguments:</div><div class="line">#CELERYD_OPTS=&quot;--time-limit=300 -c 8 -c:worker2 4 -c:worker3 2 -Ofair:worker1&quot;</div><div class="line"># Set logging level to DEBUG</div><div class="line">#CELERYD_LOG_LEVEL=&quot;DEBUG&quot;</div><div class="line"></div><div class="line"># %n will be replaced with the first part of the nodename</div><div class="line"></div><div class="line">CELERYD_LOG_FILE=&quot;/var/log/celery/%n%I.log&quot;</div><div class="line">CELERYD_PID_FILE=&quot;/var/run/celery/%n.pid&quot;</div><div class="line"></div><div class="line"># Workers should run as an unprivileged user.</div><div class="line">#   You need to create this user manually (or you can choose</div><div class="line">#   a user/group combination that already exists (e.g., nobody).</div><div class="line"></div><div class="line">CELERYD_USER=&quot;prod&quot;</div><div class="line">CELERYD_GROUP=&quot;prod&quot;</div><div class="line"></div><div class="line"># If enabled pid and log directories will be created if missing,</div><div class="line"># and owned by the userid/group configured.</div><div class="line">CELERY_CREATE_DIRS=1  # 自动创建日志和 pid 文件</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>3.将下载的 <code>celeryd</code> 和 <code>celerybeat</code> 拷贝到 /etc/init.d 目录并赋予可执行权限</p>
<blockquote>
<p>注意部分内容的修改，如执行用户</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/init.d/celeryd</div><div class="line">...</div><div class="line">DEFAULT_USER=&quot;prod&quot;</div><div class="line">DEFAULT_PID_FILE=&quot;/var/run/celery/%n.pid&quot;</div><div class="line">DEFAULT_LOG_FILE=&quot;/var/log/celery/%n.log&quot;</div><div class="line">DEFAULT_LOG_LEVEL=&quot;INFO&quot;</div><div class="line">DEFAULT_NODES=&quot;celery&quot;</div><div class="line">DEFAULT_CELERYD=&quot;-m celery worker --detach&quot;</div><div class="line">...</div><div class="line">$ cat /etc/init.d/celerybeat</div><div class="line">...</div><div class="line">CELERY_BIN=$&#123;CELERY_BIN:-&quot;celery&quot;&#125;</div><div class="line">DEFAULT_USER=&quot;prod&quot;</div><div class="line">DEFAULT_PID_FILE=&quot;/var/run/celery/beat.pid&quot;</div><div class="line">DEFAULT_LOG_FILE=&quot;/var/log/celery/beat.log&quot;</div><div class="line">DEFAULT_LOG_LEVEL=&quot;INFO&quot;</div><div class="line">DEFAULT_CELERYBEAT=&quot;$CELERY_BIN beat&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>4.启动 work 和 beat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo /etc/init.d/celeryd start</div><div class="line">$ sudo /etc/init.d/celerybeat start</div></pre></td></tr></table></figure>
<h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>1.安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get install supervisor # 因为我这里的项目用的是 Python3，所以没有使用 pip 安装</div></pre></td></tr></table></figure>
<p>2.配置</p>
<p>在 <code>/etc/supervisor/conf.d</code> 新建配置文件 <code>celery_wfstar_worker.conf</code> 和 <code>celery_wfstar_beat.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/supervisor/conf.d/celery_wfstar_worker.conf</div><div class="line">[program:wfstar_worker] </div><div class="line">command=/home/prod/deploys/wfstart_env/bin/celery -A wfstar worker -l info # 执行命令</div><div class="line">directory=/home/prod/deploys/wfstar  # 运行目录</div><div class="line">user=prod  # 执行用户</div><div class="line">numprocs=1 # 启动进程数</div><div class="line">stdout_logfile=/home/prod/deploys/wfstar/logs/celery.log # 标准输出日志</div><div class="line">redirect_stderr=true # 将 stderr 的日志会写入 stdout 日志文件中</div><div class="line">autostart=true # supervisor 启动，程序自动启动</div><div class="line">autorestart=true # 自动重启</div><div class="line">startsecs=10 # 进程启动 10s 后，状态为 running 则为启动成功</div><div class="line">stopwaitsecs = 600 </div><div class="line">killasgroup=true</div><div class="line">priority=998 # 优先级</div><div class="line">stopsignal=QUIT # 停止信号</div><div class="line"></div><div class="line">$ cat /etc/supervisor/conf.d/celery_wfstar_beat.conf</div><div class="line">[program:wfstar_beat]</div><div class="line">command=/home/prod/deploys/wfstart_env/bin/celery -A wfstar beat -l info</div><div class="line">directory=/home/prod/deploys/wfstar</div><div class="line">user=prod</div><div class="line">numprocs=1</div><div class="line">stdout_logfile=/home/prod/deploys/wfstar/logs/celerybeat.log</div><div class="line">redirect_stderr=true</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">startsecs=10</div><div class="line">stopwaitsecs = 600</div><div class="line">killasgroup=true</div><div class="line">priority=999</div><div class="line">stopsignal=QUIT</div></pre></td></tr></table></figure>
<p>配置文件可参考 <a href="https://github.com/celery/celery/tree/master/extra/supervisord" target="_blank" rel="external">github celery supervisord configure</a></p>
<p>3.启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo supervisorctl reread</div><div class="line">$ sudo supervisorctl update</div><div class="line">$ sudo supervisorctl start all</div><div class="line">$ sudo supervisorctl status</div><div class="line">wfstar_beat                      RUNNING   pid 16752, uptime 0:00:34</div><div class="line">wfstar_worker                    RUNNING   pid 16751, uptime 0:00:34</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://pythad.github.io/articles/2016-12/how-to-run-celery-as-a-daemon-in-production" target="_blank" rel="external">How to run celery as a daemon</a></p>
<p><a href="https://yangchy.com/2018/01/17/Celery-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/" target="_blank" rel="external">Celery 后台运行</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;init-script&quot;&gt;&lt;a href=&quot;#init-script&quot; class=&quot;headerlink&quot; title=&quot;init-script&quot;&gt;&lt;/a&gt;init-script&lt;/h3&gt;&lt;p&gt;1.先下载两个脚本文件 &lt;a href=&quot;https://github.com/celery/celery/tree/3.1/extra/generic-init.d/&quot;&gt;generic-init.d&lt;/a&gt;，我的项目里有定时任务，所以两个都需要用到&lt;/p&gt;
&lt;p&gt;2.创建配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat /etc/default/celeryd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Names of nodes to start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   most people will only start one node:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_NODES=&amp;quot;worker1&amp;quot; # work 任务节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   but you can also start multiple and configure settings&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   for each in CELERYD_OPTS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_NODES=&amp;quot;worker1 worker2 worker3&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   alternatively, you can specify the number of nodes to start:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_NODES=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Absolute or relative path to the &amp;apos;celery&amp;apos; command:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_BIN=&amp;quot;/home/prod/softwares/python/bin/celery&amp;quot; # celery 命令的绝对路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# App instance to use&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# comment out this line if you don&amp;apos;t use an app&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_APP=&amp;quot;wfstar&amp;quot; # 应用实例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# or fully qualified:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERY_APP=&amp;quot;proj.tasks:app&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Where to chdir at start.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_CHDIR=&amp;quot;/home/prod/deploys/wfstar&amp;quot; # 项目目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Extra command-line arguments to the worker&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_OPTS=&amp;quot;--time-limit=300 --concurrency=8&amp;quot; # 命令行参数，更多请参考 man 手册 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Configure node-specific settings by appending node name to arguments:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_OPTS=&amp;quot;--time-limit=300 -c 8 -c:worker2 4 -c:worker3 2 -Ofair:worker1&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Set logging level to DEBUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_LOG_LEVEL=&amp;quot;DEBUG&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# %n will be replaced with the first part of the nodename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_LOG_FILE=&amp;quot;/var/log/celery/%n%I.log&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_PID_FILE=&amp;quot;/var/run/celery/%n.pid&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Workers should run as an unprivileged user.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   You need to create this user manually (or you can choose&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   a user/group combination that already exists (e.g., nobody).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_USER=&amp;quot;prod&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_GROUP=&amp;quot;prod&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# If enabled pid and log directories will be created if missing,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# and owned by the userid/group configured.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_CREATE_DIRS=1  # 自动创建日志和 pid 文件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>Django Celery 定时任务笔记</title>
    <link href="http://yoursite.com/2018/02/25/django-celery-notes/"/>
    <id>http://yoursite.com/2018/02/25/django-celery-notes/</id>
    <published>2018-02-25T09:49:43.000Z</published>
    <updated>2018-03-25T09:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>Python 2.7</li>
<li>Djang 1.10</li>
<li>celery 4.1.0</li>
<li>RabbitMQ 3.2.4</li>
</ul>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="创建虚拟环境，构建-Django-项目"><a href="#创建虚拟环境，构建-Django-项目" class="headerlink" title="创建虚拟环境，构建 Django 项目"></a>创建虚拟环境，构建 Django 项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ virtualenv django-exp</div><div class="line">$ source django-exp/bin/activate</div><div class="line">$ pip intall django==1.10</div><div class="line">$ django-admin startproject myproject</div><div class="line">$ cd myproject/</div><div class="line">$ django-admin startapp myapp</div><div class="line">$ tree</div><div class="line">.</div><div class="line">├── manage.py</div><div class="line">├── myapp</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── apps.py</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── migrations</div><div class="line">│   │   └── __init__.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   └── views.py</div><div class="line">└── myproject</div><div class="line">    ├── __init__.py</div><div class="line">    ├── settings.py</div><div class="line">    ├── urls.py</div><div class="line">    └── wsgi.py</div><div class="line">$ pip install celery</div><div class="line">$ pip install pysqlite</div><div class="line">$ sudo apt-get install rabbitmq-server</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="配置-Celery"><a href="#配置-Celery" class="headerlink" title="配置 Celery"></a>配置 Celery</h4><ul>
<li><code>myproject/celery.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/celery.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line">import os</div><div class="line">from celery import Celery</div><div class="line">from django.conf import settings</div><div class="line"></div><div class="line"># set the default Django settings module for the &apos;celery&apos; program.</div><div class="line">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;myproject.settings&apos;)</div><div class="line"></div><div class="line">app = Celery(&apos;myproject&apos;)</div><div class="line"></div><div class="line"># Using a string here means the worker don&apos;t have to serialize</div><div class="line"># the configuration object to child processes.</div><div class="line"># - namespace=&apos;CELERY&apos; means all celery-related configuration keys</div><div class="line">#   should have a `CELERY_` prefix.</div><div class="line">app.config_from_object(&apos;django.conf:settings&apos;)</div><div class="line"></div><div class="line"># Load task modules from all registered Django app configs.</div><div class="line">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div><div class="line"></div><div class="line"></div><div class="line">@app.task(bind=True)</div><div class="line">def debug_task(self):</div><div class="line">    print(&apos;Request: &#123;0!r&#125;&apos;.format(self.request))</div></pre></td></tr></table></figure>
<ul>
<li><code>myproject/__init__.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/__init__.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line"></div><div class="line"># This will make sure the app is always imported when</div><div class="line"># Django starts so that shared_task will use this app.</div><div class="line">from .celery import app as celery_app</div><div class="line"></div><div class="line">__all__ = [&apos;celery_app&apos;]</div></pre></td></tr></table></figure>
<ul>
<li><code>myapp/tasks.py</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myapp/tasks.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line">from celery.task.schedules import crontab</div><div class="line">from celery.decorators import periodic_task</div><div class="line"></div><div class="line">@periodic_task(run_every=(crontab(minute=&quot;*/1&quot;))) # 每隔一分钟写入 hello world</div><div class="line">def hello_world():</div><div class="line">    with open(&quot;/tmp/output.txt&quot;, &quot;a&quot;) as f:</div><div class="line">        f.write(&quot;hello world&quot;)</div><div class="line">        f.write(&quot;\n&quot;)</div></pre></td></tr></table></figure>
<ul>
<li><code>myproject/setting.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/setting.py</div><div class="line">...</div><div class="line">CELERY_BROKER_URL = &apos;amqp://localhost&apos;</div><div class="line">CELERY_ACCEPT_CONTENT = [&apos;application/json&apos;]</div><div class="line">CELERY_RESULT_SERIALIZER = &apos;json&apos;</div><div class="line">CELERY_TASK_SERIALIZER = &apos;json&apos;</div><div class="line"></div><div class="line">INSTALLED_APPS = [</div><div class="line">    &apos;django.contrib.admin&apos;,</div><div class="line">    &apos;django.contrib.auth&apos;,</div><div class="line">    &apos;django.contrib.contenttypes&apos;,</div><div class="line">    &apos;django.contrib.sessions&apos;,</div><div class="line">    &apos;django.contrib.messages&apos;,</div><div class="line">    &apos;django.contrib.staticfiles&apos;,</div><div class="line">    &apos;myapp&apos;,</div><div class="line">]</div><div class="line">...</div><div class="line">LANGUAGE_CODE = &apos;en-us&apos;</div><div class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</div><div class="line">USE_I18N = True</div><div class="line">USE_L10N = True</div><div class="line">USE_TZ = False</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python manage.py makemigrations</div><div class="line">$ python manage.py migrate</div></pre></td></tr></table></figure>
<h4 id="启动-worker-和-beat"><a href="#启动-worker-和-beat" class="headerlink" title="启动 worker 和 beat"></a>启动 worker 和 beat</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ celery -A myproject worker -l info -B</div><div class="line">...</div><div class="line">[2018-02-25 16:59:00,000: INFO/Beat] Scheduler: Sending due task myapp.tasks.hello_world (myapp.tasks.hello_world)</div><div class="line">[2018-02-25 16:59:00,008: INFO/MainProcess] Received task: myapp.tasks.hello_world[e1aa8b70-586d-4a2b-b598-64c322b211a7]</div><div class="line">[2018-02-25 16:59:00,010: INFO/MainProcess] Task myapp.tasks.hello_world[e1aa8b70-586d-4a2b-b598-64c322b211a7] succeeded in 0.00109826028347s: None</div><div class="line">[2018-02-25 17:00:00,056: INFO/Beat] Scheduler: Sending due task myapp.tasks.hello_world (myapp.tasks.hello_world)</div><div class="line">[2018-02-25 17:00:00,058: INFO/MainProcess] Received task: myapp.tasks.hello_world[78ec725f-61b7-4fe6-a1c1-b2c60fb9ffed]</div><div class="line">[2018-02-25 17:00:00,060: INFO/MainProcess] Task myapp.tasks.hello_world[78ec725f-61b7-4fe6-a1c1-b2c60fb9ffed] succeeded in 0.000685669481754s: None</div><div class="line">$ tail /tmp/output.txt</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure>
<p>除了使用该方法，我们还可以通过 admin 后台设置计划任务，不过需要安装 <code>django-celery</code> 并设置 Database-backed，具体请参考官方文档。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://docs.celeryproject.org/en/v4.0.2/django/first-steps-with-django.html" target="_blank" rel="external">Using Celery with Django</a></p>
<p><a href="http://www.marinamele.com/2014/02/how-to-install-celery-on-django-and.html" target="_blank" rel="external">How to install Celery on Django and Create a Periodic Task</a></p>
<p><a href="https://medium.com/@yehandjoe/celery-4-periodic-task-in-django-9f6b5a8c21c7" target="_blank" rel="external">Celery 4 Periodic Task in Django</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;Djang 1.10&lt;/li&gt;
&lt;li&gt;celery 4.1.0&lt;/li&gt;
&lt;li&gt;RabbitMQ 3.2.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;h4 id=&quot;创建虚拟环境，构建-Django-项目&quot;&gt;&lt;a href=&quot;#创建虚拟环境，构建-Django-项目&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟环境，构建 Django 项目&quot;&gt;&lt;/a&gt;创建虚拟环境，构建 Django 项目&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ virtualenv django-exp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ source django-exp/bin/activate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip intall django==1.10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ django-admin startproject myproject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd myproject/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ django-admin startapp myapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tree&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── manage.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── myapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── admin.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── apps.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── migrations&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   │   └── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── models.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── tests.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── views.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── myproject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── settings.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── urls.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── wsgi.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip install celery&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip install pysqlite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install rabbitmq-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>十一月读书总结</title>
    <link href="http://yoursite.com/2017/12/02/2017%E5%B9%B411%E6%9C%88%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/02/2017年11月读书总结/</id>
    <published>2017-12-02T08:45:32.000Z</published>
    <updated>2017-12-02T08:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>十一月份看了两本东野圭吾的书，心仪已久的「解忧杂货店」和暖心的「时生」。这两本书其实很不东野圭吾，不悬疑也不推理，而是如这冬日里一杯热咖啡。另外还看了两本关于自我管理的书，「时间管理：如何充分利用你的24小时」、「毅力：如何培养自律的习惯」。这两本书篇幅很短形式新颖，准确来说是漫画书，两节课的时间就能看完，其实就是看了两节课的PPT…</p>
<a id="more"></a>
<h3 id="解忧杂货店"><a href="#解忧杂货店" class="headerlink" title="解忧杂货店"></a>解忧杂货店</h3><p>这应该是东野圭吾最畅销的书了，释放温情的故事总能给我们带来慰藉。特别佩服他的叙事技巧，交错的时间线和看似毫无瓜葛的人物最终都交汇到了一起。运动员情侣理想与爱情的矛盾，心怀音乐梦想的克朗面临现实与家庭的冲突，经济和情感危机考验的浩介，对乏味工作苦闷的晴美。他们的成长故事和命运都与丸光园儿童福利院和浪矢杂货店联系在一起。对于自己的烦恼忧愁他们都像走投无路般向陌生的浪矢爷爷倾诉求助，而开启上帝视角的三小偷通过阅读他们的故事和无心地解答最终让他人获得理解同时也让自己的内心获得救赎。</p>
<h3 id="时生"><a href="#时生" class="headerlink" title="时生"></a>时生</h3><p>这本书讲的是儿子穿越时空拯救废材老子的故事。一事无成自暴自弃的拓实过得颓废而又心安理得，因为特殊的家庭环境和出身，他认为自己是被这个世界所抛弃的人，所以他从来都不认真地对待这个世界。将自己的一事无成怪罪给这个可恶的世界，直到他遇到来自未来的儿子时生。时生从出生那一刻就注定是悲痛的一生，他短暂的人生岁月里大部分时间都躺着病床上，但他依旧觉得这个世界很温暖美好，能来到这个世界他很感激也很幸福。来自未来的时生与拓实的一系列冒险经历，最终让拓实内心得到了成长，他明白了亲人厚重的爱，也接受了这个不完美的世界并重拾了对生活的信心。时生的悲剧结局让他更加透彻地理解了生与死的意义。</p>
<h3 id="时间管理：如何充分利用你的24小时"><a href="#时间管理：如何充分利用你的24小时" class="headerlink" title="时间管理：如何充分利用你的24小时"></a>时间管理：如何充分利用你的24小时</h3><p>时间对于每个人都是公平的，如何有效的管理时间？书中给了很多简洁有效的建议。首先要把时间当作一种资产去管理，要意识到我们每天是如何分配时间的即把时间耗在哪些具体的事情上。当我们清晰知道时间分配的比重之后，再把日常生活中设定的目标与时间关联起来，做各种各样的事情都需要花费时间，那么关键就在于如何抉择，在不同的需求之间平衡。书中提到了「二八定律」：80%的成就来自于20%的行为，所以要确定任务的重要性和优先级。</p>
<p>要充分利用碎片时间，将非生产性时间转变为生产性时间。通过运动和饮食保证自己充沛的精力，将有效的时间与有效的精力匹配起来。并不需要让很多事件填满每一分每一秒，而是要用富有成效的时间利用去代替这种忙碌。</p>
<h3 id="毅力：如何培养自律的习惯"><a href="#毅力：如何培养自律的习惯" class="headerlink" title="毅力：如何培养自律的习惯"></a>毅力：如何培养自律的习惯</h3><p>自律是一场与压力、冲动和诱惑的持久抗争，自律并不是对生活乐趣的拒绝，而是为了明天能体验到更好的事情并感到快乐，而在今天做那些可能不是你的「第一选择」的事情。自律是在及时满足和推迟满足之间寻找平衡。</p>
<p>你所拥有毅力的强弱，取决于你对自己的目标所做出的承诺，以及你给目标所赋予的价值。当我们拥有强大的内在动力即在价值观的驱使下，我们就很容易获得所需要的毅力。将目标具体化并分解，只有知道具体要做什么才能执行得更好。有时需要给自己施加压力，强迫自己去想象不坚持做的后果即其中的利害关系。</p>
<blockquote>
<p>卓越不是一种行为，而是一种习惯。 「亚里士多德」</p>
</blockquote>
<p>一旦你在生活中通过有规律的行为营造了某种重复，习惯就建立起来了。当我们将积极的行为转变成习惯之后，那么这个过程就不再需要毅力了。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在这个寒意浸人的季节，的确很适合读东野圭吾，他总能给你带来温暖与希望。生活总会有不期而遇的温暖，但前提你是一个内心温暖的人。这个世界并不完美，人生也总是有各种缺憾，尽管如此但我们依旧心怀希望，珍惜此时、此生。「隔着屏幕也能闻到一股浓浓的鸡汤味~」</p>
<p>鸡汤喝多无益，立即行动才是最重要的。用自律的行为和高效的时间来达成我们的目标。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十一月份看了两本东野圭吾的书，心仪已久的「解忧杂货店」和暖心的「时生」。这两本书其实很不东野圭吾，不悬疑也不推理，而是如这冬日里一杯热咖啡。另外还看了两本关于自我管理的书，「时间管理：如何充分利用你的24小时」、「毅力：如何培养自律的习惯」。这两本书篇幅很短形式新颖，准确来说是漫画书，两节课的时间就能看完，其实就是看了两节课的PPT…&lt;/p&gt;
    
    </summary>
    
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>使用Sphinx + GitHub + Read the Docs搭建wiki</title>
    <link href="http://yoursite.com/2017/10/14/quickstart-wiki/"/>
    <id>http://yoursite.com/2017/10/14/quickstart-wiki/</id>
    <published>2017-10-14T07:54:01.000Z</published>
    <updated>2017-11-08T02:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sphinx 是一个基于 ReStructuredText 的文档生成工具，有很多开源工程都采用sphinx作为文档生成系统，最有名的就是 python 官方文档。</p>
<p>Read the Docs是一个在线文档托管服务，可以从各种版本控制系统中导入文档。支持 webhooks，当你提交代码时，文档将被自动构建。</p>
<p>Sphinx + GitHub + ReadtheDocs 作为一个文档写作工具， 用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。我们可以使用这个工具写文档、记笔记等。</p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="安装-Sphinx"><a href="#安装-Sphinx" class="headerlink" title="安装 Sphinx"></a>安装 Sphinx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo pip install sphinx</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="创建wiki目录"><a href="#创建wiki目录" class="headerlink" title="创建wiki目录"></a>创建wiki目录</h4><p>使用 sphinx 自带的配置工具 <code>sphinx-quickstart</code> 快速创建工程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mkdir mywiki</div><div class="line">$ sphinx-quickstart  //大部分使用默认选项，直接按回车即可</div><div class="line">Welcome to the Sphinx 1.6.3 quickstart utility.</div><div class="line">...</div><div class="line"># 分离source和build目录，方便管理</div><div class="line">&gt; Separate source and build directories (y/n) [n]: y</div><div class="line"></div><div class="line"># 指定工程名、作者名、版本号、语言</div><div class="line">The project name will occur in several places in the built documentation.</div><div class="line">&gt; Project name: mywiki</div><div class="line">&gt; Author name(s): abnerzhao</div><div class="line">&gt; Project version []: 0.1</div><div class="line">&gt; Project release [0.1]:</div><div class="line">&gt; Project language [en]: zh_CN</div><div class="line">...</div><div class="line">Creating file ./source/conf.py.</div><div class="line">Creating file ./source/index.rst.</div><div class="line">Creating file ./Makefile.</div><div class="line">Creating file ./make.bat.</div><div class="line"></div><div class="line">Finished: An initial directory structure has been created.</div><div class="line">...</div><div class="line">$ ls</div><div class="line">Makefile build    make.bat source</div></pre></td></tr></table></figure>
<p>创建完成后，mywiki目录有以下文件：</p>
<ul>
<li>build目录：运行make命令后，生成的文件都在这个目录里面</li>
<li>source目录：放置文档的源文件</li>
<li>make.bat：批处理命令</li>
<li>Makefile</li>
</ul>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>conf.py 文件包含了 sphinx 工程的所有配置选项，包括一些无法在 sphinx-quickstart 中进行设置的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vi source/conf.py</div><div class="line">...</div><div class="line">html_theme = &apos;sphinx_rtd_theme&apos; # 输出html的主题</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="使用-github-进行版本控制"><a href="#使用-github-进行版本控制" class="headerlink" title="使用 github 进行版本控制"></a>使用 github 进行版本控制</h4><p>首先在 github 创建新的仓库 mywiki，然后将本地的 mywiki/source 目录 push 到 mywiki 远程仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd source</div><div class="line">$ echo &quot;# mywiki&quot; &gt;&gt; README.md</div><div class="line">$ git init</div><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;first commit&quot;</div><div class="line">$ git remote add origin git@github.com:[yourusename]/mywiki.git</div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h4 id="导入到-ReadtheDocs"><a href="#导入到-ReadtheDocs" class="headerlink" title="导入到 ReadtheDocs"></a>导入到 ReadtheDocs</h4><p>首先到 github 中选择 mywiki 仓库，Settings / Services / Add ReadTheDocs</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/B18863C1-6A9F-4A72-95C0-2580B1E75983.png" alt=""></p>
<p>然后到 ReadtheDocs 网站 import mywiki 仓库，导入成功后可看到如下页面：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C1184CE3-2FA6-4898-ADAE-3072C6E8FF4E.png" alt=""></p>
<h4 id="构建文档"><a href="#构建文档" class="headerlink" title="构建文档"></a>构建文档</h4><p>现在 mywiki 目录只有默认内容，需要我们自己添加内容，然后构建。构建方式有两种：</p>
<ul>
<li>命令行执行 <code>make html</code> </li>
<li>ReadtheDocs 网站手动构建</li>
</ul>
<p>我们先看一下默认构建出来是什么样子，执行<code>make html</code> 成功后，即可到 ReadtheDocs 网站阅读文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd /Users/Mr-zhao/mywiki</div><div class="line">$ ls</div><div class="line">Makefile build    make.bat source</div><div class="line">$ make html</div></pre></td></tr></table></figure>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/4CE490E0-C3D4-448A-9A69-0BC2FFF95A1D.png" alt=""></p>
<p>简单的 wiki 就基本搭建完成了，后续我们需要添加内容。不过这玩意使用的 reStructureText 语法而不是我们熟悉的 Markdown，我们可以通过 <a href="http://pandoc.org/try/" target="_blank" rel="external">pandoc</a> 进行格式转换。reStructureText 的语法也比较简单。</p>
<h4 id="开始写-wiki"><a href="#开始写-wiki" class="headerlink" title="开始写 wiki"></a>开始写 wiki</h4><p>简单添加些内容，看看效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /Users/Mr-zhao/mywiki/index.rst</div><div class="line">.. mywiki documentation master file, created by</div><div class="line">   sphinx-quickstart on Sat Oct 14 14:26:23 2017.</div><div class="line">   You can adapt this file completely to your liking, but it should at least</div><div class="line">   contain the root `toctree` directive.</div><div class="line"></div><div class="line">Abnerzhao&apos;s Wiki</div><div class="line">=============================================</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line">   :glob:</div><div class="line"></div><div class="line">   programming/index</div><div class="line"></div><div class="line">$ cd /Users/Mr-zhao/mywiki/source/programming </div><div class="line">$ cat index.rst</div><div class="line">一、编程</div><div class="line">==================</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">    :maxdepth: 2</div><div class="line">    :glob:</div><div class="line"></div><div class="line">    python.rst</div><div class="line">$ cat python.rst</div><div class="line"></div><div class="line">1. Python</div><div class="line">----------</div><div class="line"></div><div class="line">1.1 基础知识</div><div class="line">~~~~~~~~~~~~~~</div><div class="line"></div><div class="line">1.2 爬虫</div><div class="line">~~~~~~~~~~</div><div class="line"></div><div class="line">1.3 Web</div><div class="line">~~~~~~~~~</div><div class="line">$ cd /Users/Mr-zhao/mywiki</div><div class="line">$ make html</div></pre></td></tr></table></figure></p>
<p>再次查看文档：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/B35BA734-C452-44C1-AF8A-ACE9243D9D58.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Sphinx + GitHub + ReadtheDocs 总体的使用感受比 GitBook 要好，GitBook 使用起来总感觉很慢。平时写博客记点东西都比较琐碎，使用 Sphinx 更规范系统些。</p>
<p>工具倒是搭建好，能否坚持系统地总结梳理知识，Emm….这是个问题！</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html" target="_blank" rel="external">Sphinx使用手册</a><br><a href="http://jwch.sdut.edu.cn/book/tool/UseSphinx.html#id5" target="_blank" rel="external">使用sphinx记笔记</a><br><a href="http://www.jianshu.com/p/78e9e1b8553a" target="_blank" rel="external">如何用 ReadtheDocs、Sphinx 快速搭建写书环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sphinx 是一个基于 ReStructuredText 的文档生成工具，有很多开源工程都采用sphinx作为文档生成系统，最有名的就是 python 官方文档。&lt;/p&gt;
&lt;p&gt;Read the Docs是一个在线文档托管服务，可以从各种版本控制系统中导入文档。支持 webhooks，当你提交代码时，文档将被自动构建。&lt;/p&gt;
&lt;p&gt;Sphinx + GitHub + ReadtheDocs 作为一个文档写作工具， 用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。我们可以使用这个工具写文档、记笔记等。&lt;/p&gt;
&lt;h3 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h3&gt;&lt;h4 id=&quot;安装-Sphinx&quot;&gt;&lt;a href=&quot;#安装-Sphinx&quot; class=&quot;headerlink&quot; title=&quot;安装 Sphinx&quot;&gt;&lt;/a&gt;安装 Sphinx&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo pip install sphinx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="wiki" scheme="http://yoursite.com/tags/wiki/"/>
    
  </entry>
  
  <entry>
    <title>Python Torndb 简单使用</title>
    <link href="http://yoursite.com/2017/09/26/python-torndb/"/>
    <id>http://yoursite.com/2017/09/26/python-torndb/</id>
    <published>2017-09-26T09:54:46.000Z</published>
    <updated>2017-09-26T10:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://torndb.readthedocs.io/en/latest/" target="_blank" rel="external">官方文档</a>释义：</p>
<blockquote>
<p>A lightweight wrapper around MySQLdb.<br>Originally part of the Tornado framework. The tornado.database module is slated for removal in Tornado 3.0, and it is now available separately as torndb.</p>
</blockquote>
<p>torndb 是一个基于 MySQLdb 封装的轻量级模块。</p>
<p>进一步了解请阅读源码：<a href="https://github.com/bdarnell/torndb" target="_blank" rel="external">GitHub 源码地址</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ pip install torndb</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><blockquote>
<p>torndb.Connection(host, database, user=None, password=None, max_idle_time=25200, connect_timeout=0, time_zone=’+0:00’, charset=’utf8’, sql_mode=’TRADITIONAL’, **kwargs)</p>
</blockquote>
<p>默认的字符集为 <code>utf8</code>，默认时区为 <code>time_zone=&#39;+0:00&#39;</code>，默认连接数据库的端口为 <code>3306</code>，如果非 3306 端口则将端口加在 host 后面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> torndb</div><div class="line">In [<span class="number">2</span>]: db = torndb.Connection(<span class="string">'127.0.0.1:3808'</span>, <span class="string">'test'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>)</div></pre></td></tr></table></figure>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>torndb 对数据库增删查改的使用较 MySQLdb 要简洁些，把 commit、cursor 都隐藏了，查询返回的结果直接处理成字典，可直接通过字典的形式获取数据库表中对应字段内容。</p>
<p>select 操作常用方法：</p>
<ul>
<li>get：返回一条查询结果，如有多条结果返回则抛出异常</li>
<li>query：返回多条查询结果</li>
</ul>
<p>insert、update、delete 操作一般都习惯使用 execute 方法，当然也可以使用其他方法：insert、insertmany、update、updatemany、delete。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> torndb</div><div class="line">In [<span class="number">2</span>]: db = torndb.Connection(<span class="string">'127.0.0.1:3808'</span>, <span class="string">'test'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 建表</span></div><div class="line">In [<span class="number">3</span>]: sql = <span class="string">'create table userinfo(id int auto_increment, username varchar(30), email varchar(75), primary key (id))'</span></div><div class="line">In [<span class="number">4</span>]: db.execute(sql)</div><div class="line">Out[<span class="number">4</span>]: <span class="number">0L</span></div><div class="line"></div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">In [<span class="number">5</span>]: sql = <span class="string">'insert into userinfo(username, email) values(%s,%s)'</span></div><div class="line">In [<span class="number">6</span>]: db.execute(sql, <span class="string">'abner.zhao'</span>, <span class="string">'opsanberzhao@163.com'</span>)</div><div class="line">Out[<span class="number">6</span>]: <span class="number">1L</span></div><div class="line"></div><div class="line">In [<span class="number">7</span>]: db.execute(sql, <span class="string">'mike.zhang'</span>, <span class="string">'mikezhang@gmail.com'</span>)</div><div class="line">Out[<span class="number">7</span>]: <span class="number">2L</span></div><div class="line"></div><div class="line"><span class="comment"># 查询多条记录</span></div><div class="line">In [<span class="number">8</span>]: sql = <span class="string">'select username,email from userinfo'</span></div><div class="line">In [<span class="number">9</span>]: db.query(sql)</div><div class="line">Out[<span class="number">9</span>]:</div><div class="line">[&#123;<span class="string">'email'</span>: <span class="string">u'opsanberzhao@163.com'</span>, <span class="string">'username'</span>: <span class="string">u'abner.zhao'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'mikezhang@gmail.com'</span>, <span class="string">'username'</span>: <span class="string">u'mike.zhang'</span>&#125;]</div><div class="line"></div><div class="line"><span class="comment"># 查询单条记录</span></div><div class="line">In [<span class="number">10</span>]: sql = <span class="string">'select email from userinfo where username=%s'</span></div><div class="line">In [<span class="number">11</span>]: db.get(sql,<span class="string">'abner.zhao'</span>)</div><div class="line">Out[<span class="number">11</span>]: &#123;<span class="string">'email'</span>: <span class="string">u'opsanberzhao@163.com'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 更新</span></div><div class="line">In [<span class="number">12</span>]: sql = <span class="string">'update userinfo set username="mike.zhao" where id=%s'</span></div><div class="line">In [<span class="number">13</span>]: db.execute(sql, <span class="number">2</span>)</div><div class="line">Out[<span class="number">13</span>]: <span class="number">0L</span></div><div class="line"></div><div class="line"><span class="comment"># 删除</span></div><div class="line">In [<span class="number">14</span>]: sql = <span class="string">'delete from userinfo  where id=%s'</span></div><div class="line">In [<span class="number">15</span>]: db.execute(sql, <span class="number">2</span>)</div><div class="line">Out[<span class="number">15</span>]: <span class="number">0L</span></div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在使用 MySQLdb 过程中，有时会出现<code>2006，&#39;MySQL server has gone away&#39;</code>，torndb 能很好的解决该问题。</p>
<p>torndb 每次获取 cursor 的时候会检查链接是否存在或链接的 idle_time 是否超过了 max_idle_time，超过了则会重新建立一个新的链接。而 MySQLdb 的获取 cursor 时却不会重新建立链接。不过 MySQLdb 提供了ping 方法来检查。</p>
<p>总的来说， torndb 使用体验比 MySQLdb 好。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.neotitans.com/resources/python/mysql-python-connection-error-2006.html" target="_blank" rel="external">mysql-python-connection-error-2006</a></p>
<p><a href="http://torndb.readthedocs.io/en/latest/" target="_blank" rel="external">torndb doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://torndb.readthedocs.io/en/latest/&quot;&gt;官方文档&lt;/a&gt;释义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lightweight wrapper around MySQLdb.&lt;br&gt;Originally part of the Tornado framework. The tornado.database module is slated for removal in Tornado 3.0, and it is now available separately as torndb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;torndb 是一个基于 MySQLdb 封装的轻量级模块。&lt;/p&gt;
&lt;p&gt;进一步了解请阅读源码：&lt;a href=&quot;https://github.com/bdarnell/torndb&quot;&gt;GitHub 源码地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ pip install torndb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 14.04 SVN 服务快速搭建</title>
    <link href="http://yoursite.com/2017/09/04/set-up-svn-server/"/>
    <id>http://yoursite.com/2017/09/04/set-up-svn-server/</id>
    <published>2017-09-04T14:05:18.000Z</published>
    <updated>2017-09-04T14:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get install subversion apache2 libapache2-svn apache2-utils</div></pre></td></tr></table></figure>
<h3 id="创建仓库目录"><a href="#创建仓库目录" class="headerlink" title="创建仓库目录"></a>创建仓库目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo mkdir -p /home/abner/svn</div><div class="line">$ sudo svnadmin create /home/abner/svn/test_project</div><div class="line">$ sudo svnadmin create /home/abner/svn/ops</div><div class="line">$ sudo chown -R www-data:www-data /home/abner/svn</div></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><code>/etc/apache2/mods-available/dav_svn.conf</code> 文件末尾添加如下配置：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;Location /svn&gt;</div><div class="line">    DAV svn   # 启用仓库</div><div class="line">    SVNListParentPath on # 路径下有多个仓库</div><div class="line">    SVNParentPath /home/abner/svn # 仓库路径</div><div class="line">    SVNAdvertiseV2Protocol off # 禁用 V2 协议</div><div class="line">    AuthType Basic </div><div class="line">    AuthName &quot;Subversion repository&quot;  </div><div class="line">    AuthUserFile /home/abner/svn/passwd # 用户验证文件</div><div class="line">    AuthzSVNAccessFile /home/abner/svn/auth # 权限验证文件</div><div class="line">    Require valid-user # 需要有效用户，禁止匿名访问</div><div class="line">&lt;/Location&gt;</div></pre></td></tr></table></figure></p>
<h3 id="用户和权限设置"><a href="#用户和权限设置" class="headerlink" title="用户和权限设置"></a>用户和权限设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo htpasswd -c /home/abner/svn/passwd mike</div><div class="line">New password:</div><div class="line">Re-type new password:</div><div class="line">Adding password for user mike</div><div class="line">$ cat /home/abner/svn/passwd</div><div class="line">mike:$apr1$nfAtmtla$ZguuxNODA.nRu3wsUq1Qv/</div><div class="line">$ sudo htpasswd  /home/abner/svn/passwd abner # 新增用户，无需 -c 选项</div><div class="line">$ cat /home/abner/svn/auth</div><div class="line">[groups]</div><div class="line">administrator=mike,abner</div><div class="line">[test:/]</div><div class="line">@administrator=rw</div><div class="line">[test_project:/]</div><div class="line">@administrator=rw</div><div class="line">[ops:/]</div><div class="line">@administrator=rw</div></pre></td></tr></table></figure>
<h3 id="访问仓库目录"><a href="#访问仓库目录" class="headerlink" title="访问仓库目录"></a>访问仓库目录</h3><p>浏览器访问 <a href="http://127.0.0.1/svn/" target="_blank" rel="external">http://127.0.0.1/svn/</a></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/DA0DAFAC-78BE-43CF-8316-3D1BBAD0D585.png" alt=""></p>
<h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><p>客户端使用 svn 命令拉取代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ svn checkout username=abner http://127.0.0.1/svn/ops</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多 htpasswd、svnadmin 和 svn 命令参数和使用请参考man手册</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://help.ubuntu.com/community/Subversion" target="_blank" rel="external">Subversion - Community Help Wiki - Official Ubuntu Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件包安装&quot;&gt;&lt;a href=&quot;#软件包安装&quot; class=&quot;headerlink&quot; title=&quot;软件包安装&quot;&gt;&lt;/a&gt;软件包安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install subversion apache2 libapache2-svn apache2-utils&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建仓库目录&quot;&gt;&lt;a href=&quot;#创建仓库目录&quot; class=&quot;headerlink&quot; title=&quot;创建仓库目录&quot;&gt;&lt;/a&gt;创建仓库目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo mkdir -p /home/abner/svn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo svnadmin create /home/abner/svn/test_project&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo svnadmin create /home/abner/svn/ops&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo chown -R www-data:www-data /home/abner/svn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/apache2/mods-available/dav_svn.conf&lt;/code&gt; 文件末尾添加如下配置：&lt;br&gt;
    
    </summary>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>通过字符串调用函数或方法</title>
    <link href="http://yoursite.com/2017/08/02/How-to-use-strings-to-call-functions-or-methods/"/>
    <id>http://yoursite.com/2017/08/02/How-to-use-strings-to-call-functions-or-methods/</id>
    <published>2017-08-02T15:28:16.000Z</published>
    <updated>2017-08-02T15:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>先看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; def foo():</div><div class="line">        print &quot;foo&quot;</div><div class="line"></div><div class="line">&gt;&gt;&gt; def bar():</div><div class="line">        print &quot;bar&quot;</div><div class="line"></div><div class="line">&gt;&gt;&gt; func_list = [&quot;foo&quot;,&quot;bar&quot;]</div><div class="line">&gt;&gt;&gt; for func in func_list:</div><div class="line">        func()</div><div class="line">TypeError: &apos;str&apos; object is not callable</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们希望遍历执行列表中的函数，但是从列表中获得的函数名是字符串，所以会提示类型错误，字符串对象是不可以调用的。如果我们想要字符串变成可调用的对象呢？或是想通过变量调用模块的属性和类的属性呢？以下有三种方法可以实现。</p>
<h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; for func in func_list:</div><div class="line">        eval(func)()</div><div class="line">foo</div><div class="line">bar</div></pre></td></tr></table></figure>
<p>eval() 通常用来执行一个字符串表达式，并返回表达式的值。在这里它将字符串转换成对应的函数。eval() 功能强大但是比较危险（<code>eval is evil</code>），不建议使用。</p>
<h3 id="locals-和globals"><a href="#locals-和globals" class="headerlink" title="locals()和globals()"></a>locals()和globals()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; for func in func_list:</div><div class="line">        locals()[func]()</div><div class="line">foo</div><div class="line">bar</div><div class="line"></div><div class="line">&gt;&gt;&gt; for func in func_list:</div><div class="line">        globals()[func]()</div><div class="line">foo</div><div class="line">bar</div></pre></td></tr></table></figure>
<p>locals() 和 globals() 是python的两个内置函数，通过它们可以一字典的方式访问局部和全局变量。</p>
<h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h3><p>getattr() 是 python 的内建函数，getattr(object,name) 就相当于 object.name，但是这里 name 可以为变量。</p>
<p>返回 foo 模块的 bar 方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; import foo</div><div class="line">&gt;&gt;&gt; getattr(foo, &apos;bar&apos;)()</div></pre></td></tr></table></figure></p>
<p>返回 Foo 类的属性<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; class Foo:</div><div class="line">    def do_foo(self):</div><div class="line">        ...</div><div class="line"></div><div class="line">    def do_bar(self):</div><div class="line">        ...</div><div class="line"></div><div class="line">&gt;&gt;&gt; f = getattr(foo_instance, &apos;do_&apos; + opname)</div><div class="line">&gt;&gt;&gt; f()</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-from-a-string-with-the-functions-name-in-python" target="_blank" rel="external">Calling a function of a module from a string with the function’s name in Python</a></p>
<p><a href="https://docs.python.org/3/faq/programming.html#how-do-i-use-strings-to-call-functions-methods" target="_blank" rel="external">How do I use strings to call functions/methods?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def foo():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;foo&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def bar():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;bar&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; func_list = [&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for func in func_list:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        func()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TypeError: &amp;apos;str&amp;apos; object is not callable&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>那年夏天（二）</title>
    <link href="http://yoursite.com/2017/07/15/summer-s2/"/>
    <id>http://yoursite.com/2017/07/15/summer-s2/</id>
    <published>2017-07-15T13:53:30.000Z</published>
    <updated>2017-09-27T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>火车缓缓始离站台，窗外城市光影在雨水中渐渐模糊。半个多月的穷游之旅也划上了句号。始于昆明止于成都，记得刚到昆明时还有将近百来号人，而如今返程只有我和好基友两人。原计划在川渝逗留一阵，但是成都连续阴雨已让我们兴致全无。本以为自己根本就不会想家，但是冒雨走在成都街头的那一刻，我承认我想家了。天色渐暗，我想今晚我可能要失眠了，这一路上经历的片段不断浮现在我脑海，险境和绝美的风景让我内心不能平静，有趣的人和故事让我难以忘怀，火车疾驰穿过黑暗，天亮以后抵达的终点更让我难以入眠……</p>
<h3 id="踏上征途"><a href="#踏上征途" class="headerlink" title="踏上征途"></a>踏上征途</h3><p>硬座了二十多个小时的绿皮火车，从东南丘陵到云贵高原，最终抵达春城昆明。在昆明只停留了两天，搭帐篷睡在一个学校食堂里。正值暑期，学校已空无一人，组织者事先和校方沟通过，所以水电还是能够正常使用。在昆明发了半天传单赚了一顿过桥米线，后续时间就和小伙伴去了滇池、陆军讲武堂和云南大学。值得称道的是云大的食堂，超级便宜味道也不错，为了省钱去云大吃了几顿。昆明的确是四季如春，虽是夏季却从不需要空调。不时几朵棉花糖般的白云飘过湛蓝的天空，阳光从树影穿过洒在身上，我还是被这高原的紫外线分分钟晒红了。</p>
<p>昆明到大理，全程三百多公里。计划是用一天的时间到达大理。顺利的话全程高速也就四个多小时的样子。第一次搭车真的非常有趣，我和两位女生一行。说实话我简直沾尽了她们俩的光。我们计划先在市区搭车到高速入口，然后在往大理方向的路口拦顺风车。在高速路口，俩女生很快就拦到直达大理的顺风车还是很高端的顺风车。托她俩的福我人生第一次坐奔驰。奔驰哥是浙江人在云南做房地产生意，由于从昆明到大理要四个小时，他空车一人驾驶想找人聊聊天所以就拉上我们了。结果俩女生上车后倒头就睡，只剩我和奔驰哥再聊。奔驰哥人很友善随和，一路上各种嘘寒问暖各种关怀。傍晚时分，我们顺利到达了淅淅沥沥的雨中大理。<br><a id="more"></a></p>
<p>在大理我们没有睡帐篷，而是住在苍山脚下的一个马场里。没有赛马的时候马场很清净，只有一对大理白族夫妇在照看着几匹马。夜里和其他小伙伴交流从昆明到大理这一段初次搭车的经历，才发现自己实在是太幸运。有走了大半天搭不到车要绝望的，有下高速走国道又绕回高速的。路上各种奇葩趣事真是哭笑不得，最终我们都还是在天黑之前在大理成功汇合了，虽然我们目的地是一样，但是我们每个人的经历却不尽相同。第二天我们去大理古城捡垃圾，中国的旅游景区也算是重灾区，所以我们收获颇丰。大理的景点很多，古城、苍山洱海、大理三塔、天龙八部影视城等等。由于是穷游要钱的景点我们基本都不考虑，然后发现就大理古城和洱海不要钱。捡垃圾的过程已经游走了一遍古城，之后和小伙伴去了洱海边。天空始终未放晴，依旧绵绵细雨，不过这样的天也是最舒适最有情调的，没有强烈的紫外线我们也放浪了起来。倚靠苍山的大理学院绝对可以算得上中国最美大学校园之一，在大理学院的保安和随机路人地帮助下我们成功翻墙逃票进入了天龙八部影视城。大理古城的公益素食馆基本承包了我们这帮穷学生在大理的伙食。一到饭点我们就跑过去投个几块钱就能吃到美味管饱的素餐。夜晚是这座古城最具活力的时候，摆地摊的少女、卖唱的民谣歌手、背包的外国小哥。形形色色的人在这里擦肩交汇，叫卖声和吉他乐如血脉般遍布在这多元魅力的古城身上。</p>
<p>大理到丽江全程一百六十多公里，随着海拔升高路况也变得复杂，高速没有修通只能走省道。这次搭车就没那么顺利，走走停停。只要能带我们前进一段距离的车基本都上，彪悍勤劳白族阿姨的三轮车载了一小段，解放军大哥的军车把我们带到半山腰的军事演习基地。去往的丽江的游客车辆还是很多，在山就开始堵车，我们搭的第六辆直达丽江的车就在这拥堵的车流中。</p>
<p>第三站：艳遇之都—丽江古城。古城面积超大，走街串巷到哪都能听到这首&lt;一瞬间&gt;。我们搭帐篷在古城的一所学校里，校长还煮了一大锅热粥给我们，由于海报升高，夜晚气温低了许多，但是内心依旧温暖如春。在丽江和当地的公益组织交流，也进行了一系列的公益活动。丽江商业化太严重，消费也颇高。暴走古城、遥看玉龙雪山，然后开始前往虎跳峡和香格里拉。</p>
<p>由于有了之前丰富搭车经历，后续搭车开始变得自信娴熟起来，由于一路遇到了太多热心温暖的人，我们也渐渐放下了防备和路上各异的人都愉快交起了朋友。虽说自信但是队友中也有搭不到顺风车，无奈夜晚在加油站露宿的。世之奇伟瑰怪非常之观，常在于险远。七小时徒步虎跳峡之后我和两位小伙伴算是生死之交了，风景美到让人窒息的同时危险和难度系数也不低。涉过雪山飞瀑，行走峭壁边缘。还好我们综合素质都过关，没有一个轻言放弃。后续去香格里拉我们搭错了车，但是意外收获了更多美景。甚至很多时候我都不太想太快抵达目的地，因为我愿意为路上的人和景驻足停留。</p>
<h3 id="行者无疆，勇者无惧"><a href="#行者无疆，勇者无惧" class="headerlink" title="行者无疆，勇者无惧"></a>行者无疆，勇者无惧</h3><p>在香格里拉和团队发生分歧之后，我和好基友两人开始搭车进藏。组织考虑到安全性选择搭车到成都然后坐火车进藏，而我和好基友坚持要搭车进藏，所以毅然地离开了团队选择独自上路。最终团队其他伙伴都如愿到达了拉萨，而我们俩却中途折返。虽然内心不悦，但是我们依旧不后悔，因为真实艰险的旅途才刚刚开始。</p>
<p>从香格里拉出来后，路况变得更加复杂，路上车辆也稀疏了很多。又由于我们俩都是男生所以搭车难度也增加了。不出意外的徒步走了大半天，这在之前的搭车经历中是从未发生过的。所以我们俩感受到了深深的挫败感，正值雨季有的路段还有不少山崖落石，我们开始为这次冲动的冒险而感到一丝怀疑和后怕。幸好路上有梅里雪山日照雪景地慰藉，我们也开始相互鼓励。一路上为了省电我手机基本就偶尔用来查一下地图，但是此刻我还是放了一首许巍的&lt;蓝莲花&gt;。后来路上驴友把我们捡上了车，驴友搭到车之后就一路捡人。车上全是我们这种背包徒步的青年，大家各自分享了路途上的趣事，其乐融融。</p>
<p>彻夜的倾盆大雨，气温骤降，早上醒来帐内全是水珠，帐外寒风凛冽，浑身也酸痛不止。我们没有住青旅而是在青旅外面的屋檐下扎帐篷睡了一晚，这也是我们这次旅途最后一次睡帐篷，因为休息不好浑身酸痛第二天赶路就会很吃亏疲惫，所以我们决定后续不再睡帐篷。加上高原温差大，气候变化频繁，还是要保重身体，如果高反再加上感冒，那么我们后续就更加艰难了。</p>
<p>从云南进藏，一路上经历了太多困难，搭不到车、断粮、缺水，每一样都能让我们俩疯狂。在路上像疯子一样大喊求搭车、求水喝。也有实在是走不动的无奈之举，那就是把背包直接丢路中间。有一次都打算在路边夜宿，结果有一辆车主动停下来愿意捎我们一段，但是上车后我们俩都捏了一把汗，犹豫要不要下车算了，因为司机大哥喝了不少酒，在这种不小心就会掉下悬崖的路况，司机大哥还是把我们安全的送到了一个村落。或许老司机们就是喜欢这种微醺的驾驶快感。</p>
<h3 id="德钦—芒康—左贡—帮达"><a href="#德钦—芒康—左贡—帮达" class="headerlink" title="德钦—芒康—左贡—帮达"></a>德钦—芒康—左贡—帮达</h3><p>进入藏区后，特别是到达滇藏线和川藏318国道汇合的芒康，人和车又多了起来，搭不到车徒步时也没那么无聊了，因为路上有太多骑行者可以交谈，相互加油打气。进藏脚步最终止步帮达，因为连续恶劣天气通麦大桥被雨水冲断，尽管帮达离通麦天险还远着，但是解放军已经开始封锁318国道了，放出公告只出不进，预计维修半个月。无奈我们前往拉萨的旅途最终夭折。只记得那天，无数骑行者异常愤怒，甚至和当地设防人员起了冲突(大致是想义无反顾的进入，生死不用其他人负责之类的)。而我们俩则是很理智的花了几十块钱在藏民家借宿了一夜，藏民还给我们准备了酥油茶(其实挺难喝的)。就计划着反走最美国道318去成都。其实当时还可以从昌都地区走317国道去拉萨，但是317国道路况比318差太多，而且有大片的无人区，所以我们这种搭车徒步的只能放弃。</p>
<h3 id="巴塘—理塘—新都桥—康定—雅安—成都"><a href="#巴塘—理塘—新都桥—康定—雅安—成都" class="headerlink" title="巴塘—理塘—新都桥—康定—雅安—成都"></a>巴塘—理塘—新都桥—康定—雅安—成都</h3><p>反走318国道，从芒康到成都全程八百多公里，我们俩居然保持了日进二百多公里的节奏，一路上搭车也很顺利。听说川藏交界地区有点乱，偶尔会遇到打劫之类的。虽然我们俩身上也没什么钱，但是为了安全起见，我们计划一定要搭车直达理塘，避免在该路段上徒步。运气不错的被藏族大哥直接带到了世界高城理塘。路上捡了一位妹子，路上妹子真的特别活泼开朗，在妹子的强烈要求下藏族大哥给我们唱了他们的民族歌曲，我们还盘问他追什么流行歌曲之类的。藏族大哥特别敬重解放军，他说318国道就是解放军用血汗铸成的。windows桌面风景的新都桥、风情万种的康定城、震后残垣的雅安、最后到达富饶蜀地成都。从康定到雅安再到成都，热心的卡车师傅一直带着我们俩，我们俩和他的车队同吃同睡，夜深和他们到熟悉的旅馆休息，清晨又一起赶路。穿过险峻的蜀道最终我们在开阔的成都分别。如果让我静下心来回忆，每小段旅程的插曲和人物都能写一篇小故事。路上不可胜数惊叹的美景、形色各异的热心师傅、流连在路上的驴友、当然还有那个坚持走下来的自己。很喜欢&lt;天堂电影院&gt;里的一句台词：人生和电影不同，人生辛苦多了。如果你不出去走走，你就会以为这就是全世界。感谢路上所有让我成长的人和故事，庆幸自己有这样一段终生无法忘记的青春远行。</p>
<h3 id="No-Fear-In-My-Heart"><a href="#No-Fear-In-My-Heart" class="headerlink" title="No Fear In My Heart"></a>No Fear In My Heart</h3><p>没想到当年走完这段旅程，没留下太多文字，只在朋友圈发了一条：说不出旅行的意义。而现在的我依旧说不出旅行的意义。旅行可以开阔我们的视野，丰富人生阅历，加深对生命的理解。旅行并不是给我们添加谈资，或是拿去炫耀宣扬。旅行的过程和收获应该由我们内心去消化和提炼。以前看过大冰的&lt;乖，摸摸头&gt;，书算不上好看，我也暂且不去怀疑书中故事的真实性，因为我愿意选择相信。书中有这么一句话：不要那么孤独，请相信，这个世界上真的有人过着你想要的生活。忽晴忽雨的江湖，祝你有梦为马，随处可栖。当什么时候我们明白自己想要什么样的生活时，此时我们内心就应该丢掉一切恐惧，勇敢地去追求。正因为路上有太多有意思的灵魂，太多异样生活态度和生活方式的人，太多柔软动人的故事，让我相信生命可以很精彩，也让我更热爱生活，我们在任何时候都不应该束缚自己，应该去见识去追求更多的可能性。</p>
<p>那年夏天，我在未知的路上颠沛漂泊；</p>
<p>那年夏天，我在遥远的异乡收获温暖；</p>
<p>那年夏天，我在努力接近心中渴求的远方；</p>
<p>那年夏天，我二十岁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火车缓缓始离站台，窗外城市光影在雨水中渐渐模糊。半个多月的穷游之旅也划上了句号。始于昆明止于成都，记得刚到昆明时还有将近百来号人，而如今返程只有我和好基友两人。原计划在川渝逗留一阵，但是成都连续阴雨已让我们兴致全无。本以为自己根本就不会想家，但是冒雨走在成都街头的那一刻，我承认我想家了。天色渐暗，我想今晚我可能要失眠了，这一路上经历的片段不断浮现在我脑海，险境和绝美的风景让我内心不能平静，有趣的人和故事让我难以忘怀，火车疾驰穿过黑暗，天亮以后抵达的终点更让我难以入眠……&lt;/p&gt;
&lt;h3 id=&quot;踏上征途&quot;&gt;&lt;a href=&quot;#踏上征途&quot; class=&quot;headerlink&quot; title=&quot;踏上征途&quot;&gt;&lt;/a&gt;踏上征途&lt;/h3&gt;&lt;p&gt;硬座了二十多个小时的绿皮火车，从东南丘陵到云贵高原，最终抵达春城昆明。在昆明只停留了两天，搭帐篷睡在一个学校食堂里。正值暑期，学校已空无一人，组织者事先和校方沟通过，所以水电还是能够正常使用。在昆明发了半天传单赚了一顿过桥米线，后续时间就和小伙伴去了滇池、陆军讲武堂和云南大学。值得称道的是云大的食堂，超级便宜味道也不错，为了省钱去云大吃了几顿。昆明的确是四季如春，虽是夏季却从不需要空调。不时几朵棉花糖般的白云飘过湛蓝的天空，阳光从树影穿过洒在身上，我还是被这高原的紫外线分分钟晒红了。&lt;/p&gt;
&lt;p&gt;昆明到大理，全程三百多公里。计划是用一天的时间到达大理。顺利的话全程高速也就四个多小时的样子。第一次搭车真的非常有趣，我和两位女生一行。说实话我简直沾尽了她们俩的光。我们计划先在市区搭车到高速入口，然后在往大理方向的路口拦顺风车。在高速路口，俩女生很快就拦到直达大理的顺风车还是很高端的顺风车。托她俩的福我人生第一次坐奔驰。奔驰哥是浙江人在云南做房地产生意，由于从昆明到大理要四个小时，他空车一人驾驶想找人聊聊天所以就拉上我们了。结果俩女生上车后倒头就睡，只剩我和奔驰哥再聊。奔驰哥人很友善随和，一路上各种嘘寒问暖各种关怀。傍晚时分，我们顺利到达了淅淅沥沥的雨中大理。&lt;br&gt;
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>那年夏天（一）</title>
    <link href="http://yoursite.com/2017/07/08/summer-s1/"/>
    <id>http://yoursite.com/2017/07/08/summer-s1/</id>
    <published>2017-07-08T13:52:05.000Z</published>
    <updated>2017-09-27T13:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近午休时间总能听到树上聒噪的阵阵蝉鸣，晚上夜跑也有此起彼伏的蛙声相伴。转眼间，人生的第二十四个春夏已到来。一年四季中说不上特别喜欢夏天，但是对于夏天总有一些特别的情感和记忆。</p>
<p>夏天可以和小伙伴们肆无忌惮地玩水嬉戏，抱着冰西瓜吹风扇看电视，快速舔着渐渐融化的冰淇淋。特别喜欢凉爽的夏夜，明朗的星空下一家人在院内乘凉，远处池塘蛙声不断，耳畔徐来夏夜凉风和外婆年轻时的故事。</p>
<p>夏天有漫长慵懒的暑假。计划生育让我成为了独生子女，改革开放使我成为留守儿童的同时也让我拥有了不一样的暑期。印象中暑假去得最多的地方应该就数深圳了。坐着通宵的绿皮火车却没有一丝疲倦，内心更多的是欢喜和期待。小的时候就特别喜欢火车，大姨家就在湘江边，每天都有红色和绿色的火车来回跨江而过，而我最喜欢做的事情就是远远的望着火车轰鸣而过并数它的节数，直到现在还有这种火车情节，因为我知道它代表着远方。每次去深圳都是到舅舅家，一来是舅舅家有两个小孩即我表妹和表弟，年纪相仿从小青梅竹马一起长大，所以都是一起玩，二来我也没有其他地方可以去。嘈杂的市场、熙攘的人流、糅杂着鱼腥和卤味的空气、网吧CS、欢乐谷、大梅沙、还有那条植被茂密宽广的深南大道构成了我对深圳的全部记忆。我相信深圳这个地名会根植在几代人的记忆中，无论是淘金者还是像我们这样的留守儿童。</p>
<p>还有一件人生比较重大的事也发生在夏季那就是毕业。以前并不觉得毕业是件重大的事，只不过是按部就班地完成学业而已。现在看来每次毕业都是一次重大地选择，选择去哪座城市哪个学校完成下一阶段的学习。通过一次次的毕业，我从乡村到县城到市区再到上海。依稀记得我的高考第一志愿是沈阳理工大学，当时只有一个想法那是离家越远越好。我和两位要好的朋友都填了这所大学，现在想来还有点儿戏。最终我差四分留在了省内，另两位朋友都被录取了，但是只有一位去了北方，另一位复读了。高中毕业还是挺难忘了，毕竟都天真地以为彻底解放了。其实高中生活也没那么苦，更多的是充实和忙碌。说实话还挺怀念那段青葱岁月的，可能是因为那时有一群朋友为共同的目标奋斗着，而如今在陌生的繁华都市里却朋友寥寥。大学毕业则很轻松愉快，除了偶尔缅怀校园生活，伤感青春易逝之外，更多的是对未来人生的憧憬。</p>
<a id="more"></a>
<p>在人生中的这么多夏天里，选择以何种方式度过暑假，选择去那所学校继续学业其实我都是懵懵懂懂，基本都是按照大人的意愿和安排。但是高中毕业是个分水岭，或者说自我意识开始觉醒，不再完全按照大人的指示继续自己的生活。后续的暑假基本都是在兼职，做过导购、推广、辅导老师等，但是印象最深刻地还是那次滇藏川穷游之旅。</p>
<p>这次穷游之旅是由学校新成立的公益组织发起，模式是边旅行边公益徒步搭车进藏。西藏对于我来说像是隔着一层面纱般神秘，也是一直很向往的地方。而这种旅行的方式对于我来说吸引力则更大。尽管组织者一再强调条件的艰苦和不可预知的风险等等，但是我还是义无反顾的加入其中，靠的或许是满腔青春热血和那颗躁动不安的心。</p>
<p>为了去西藏每天坚持晨跑和夜跑，为了去西藏放肆兼职商战攒钱。整整准备了一个多月，在这一个多月里除了上课其他时间基本都在外面兼职和商战。商战就是廉价批发商品然后到人流量大的地方去卖，挣的钱一部分用作公益经费一部分用来买旅行装备和旅途生活开支。每次下课就飞奔超市提货然后去高铁站和沿江风光带推销商品，卖完商品后还不惧疲惫地去田径场跑步。那一个月每天都和打了鸡血一样，当然中途有很多人因为家庭原因或个人原因放弃，但也有更多的人意志更加坚定。</p>
<p>最终在大三那个夏天我们背包踏上了开往远方的列车。</p>
<p>未完待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近午休时间总能听到树上聒噪的阵阵蝉鸣，晚上夜跑也有此起彼伏的蛙声相伴。转眼间，人生的第二十四个春夏已到来。一年四季中说不上特别喜欢夏天，但是对于夏天总有一些特别的情感和记忆。&lt;/p&gt;
&lt;p&gt;夏天可以和小伙伴们肆无忌惮地玩水嬉戏，抱着冰西瓜吹风扇看电视，快速舔着渐渐融化的冰淇淋。特别喜欢凉爽的夏夜，明朗的星空下一家人在院内乘凉，远处池塘蛙声不断，耳畔徐来夏夜凉风和外婆年轻时的故事。&lt;/p&gt;
&lt;p&gt;夏天有漫长慵懒的暑假。计划生育让我成为了独生子女，改革开放使我成为留守儿童的同时也让我拥有了不一样的暑期。印象中暑假去得最多的地方应该就数深圳了。坐着通宵的绿皮火车却没有一丝疲倦，内心更多的是欢喜和期待。小的时候就特别喜欢火车，大姨家就在湘江边，每天都有红色和绿色的火车来回跨江而过，而我最喜欢做的事情就是远远的望着火车轰鸣而过并数它的节数，直到现在还有这种火车情节，因为我知道它代表着远方。每次去深圳都是到舅舅家，一来是舅舅家有两个小孩即我表妹和表弟，年纪相仿从小青梅竹马一起长大，所以都是一起玩，二来我也没有其他地方可以去。嘈杂的市场、熙攘的人流、糅杂着鱼腥和卤味的空气、网吧CS、欢乐谷、大梅沙、还有那条植被茂密宽广的深南大道构成了我对深圳的全部记忆。我相信深圳这个地名会根植在几代人的记忆中，无论是淘金者还是像我们这样的留守儿童。&lt;/p&gt;
&lt;p&gt;还有一件人生比较重大的事也发生在夏季那就是毕业。以前并不觉得毕业是件重大的事，只不过是按部就班地完成学业而已。现在看来每次毕业都是一次重大地选择，选择去哪座城市哪个学校完成下一阶段的学习。通过一次次的毕业，我从乡村到县城到市区再到上海。依稀记得我的高考第一志愿是沈阳理工大学，当时只有一个想法那是离家越远越好。我和两位要好的朋友都填了这所大学，现在想来还有点儿戏。最终我差四分留在了省内，另两位朋友都被录取了，但是只有一位去了北方，另一位复读了。高中毕业还是挺难忘了，毕竟都天真地以为彻底解放了。其实高中生活也没那么苦，更多的是充实和忙碌。说实话还挺怀念那段青葱岁月的，可能是因为那时有一群朋友为共同的目标奋斗着，而如今在陌生的繁华都市里却朋友寥寥。大学毕业则很轻松愉快，除了偶尔缅怀校园生活，伤感青春易逝之外，更多的是对未来人生的憧憬。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 回调插件简单使用</title>
    <link href="http://yoursite.com/2017/04/11/ansible-callback-plugins/"/>
    <id>http://yoursite.com/2017/04/11/ansible-callback-plugins/</id>
    <published>2017-04-11T12:20:44.000Z</published>
    <updated>2017-06-25T03:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Developing-Plugins"><a href="#Developing-Plugins" class="headerlink" title="Developing Plugins"></a>Developing Plugins</h2><p>插件是增强ansible核心功能的代码片段，我们可以很方便的使用插件，编写插件代码。如果我们想要对ansible的执行结果进行分析，根据返回结果发送邮件，写入日志等都可以通过插件实现。</p>
<h3 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h3><ul>
<li><strong>Action plugins</strong> are front ends to modules and can execute actions on the controller before calling the modules themselves.（操作插件，调用模块之前执行操作）</li>
<li><strong>Cache plugins</strong> are used to keep a cache of ‘facts’ to avoid costly fact-gathering operations.（缓存插件，缓存主机facts变量）</li>
<li><strong>Callback plugins</strong> enable you to hook into Ansible events for display or logging purposes.（回调插件，对事件进行显示和记录，这个常用）<a id="more"></a></li>
<li><strong>Connection plugins</strong> define how to communicate with inventory hosts.（连接插件，定义如何与节点主机通信）</li>
<li><strong>Filters plugins</strong> allow you to manipulate data inside Ansible plays and/or templates. This is a Jinja2 feature; Ansible ships extra filter plugins.（过滤插件，Jinja2功能）</li>
<li><strong>Lookup plugins</strong> are used to pull data from an external source. These are implemented using a custom Jinja2 function.（查找插件用于从外部源提取数据）</li>
<li><strong>Strategy plugins</strong> control the flow of a play and execution logic.（策略插件）</li>
<li><strong>Shell plugins</strong> deal with low-level commands and formatting for the different shells Ansible can encounter on remote hosts.（shell插件处理低级别命令和格式化）</li>
<li><strong>Test plugins</strong> allow you to validate data inside Ansible plays and/or templates. This is a Jinja2 feature; Ansible ships extra test plugins.（测试插件）</li>
<li><strong>Vars plugins</strong> inject additional variable data into Ansible runs that did not come from an inventory, playbook, or the command line.（Vars插件）</li>
</ul>
<h2 id="Callback-plugins"><a href="#Callback-plugins" class="headerlink" title="Callback plugins"></a>Callback plugins</h2><p>在日常开发中使用回调插件比较多一点，通过callback插件，可以实现回调功能，里面定义了若干场景，如主机不可达，执行任务失败，执行任务成功等，分别对应不同的方法，这样就可以实现在不同的场景触发不同的操作。</p>
<h3 id="设置回调功能参数"><a href="#设置回调功能参数" class="headerlink" title="设置回调功能参数"></a>设置回调功能参数</h3><p>该功能ansible默认是关闭的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cat /etc/ansible/ansible.cfg </div><div class="line">...</div><div class="line">bin_ansible_callbacks = <span class="keyword">True</span> <span class="comment">#加载功能</span></div><div class="line"></div><div class="line"><span class="comment"># set plugin path directories here, separate with colons 定义插件位置</span></div><div class="line">action_plugins     = /usr/share/ansible_plugins/action_plugins</div><div class="line">callback_plugins   = /usr/share/ansible_plugins/callback_plugins</div><div class="line">connection_plugins = /usr/share/ansible_plugins/connection_plugins</div><div class="line">lookup_plugins     = /usr/share/ansible_plugins/lookup_plugins</div><div class="line">vars_plugins       = /usr/share/ansible_plugins/vars_plugins</div><div class="line">filter_plugins     = /usr/share/ansible_plugins/filter_plugins</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="编写回调脚本"><a href="#编写回调脚本" class="headerlink" title="编写回调脚本"></a>编写回调脚本</h3><p>编写回调脚本放到配置文件中定义的目录中，并赋予可执行权限。我们可以将执行结果写入本地文件、数据库或发邮件等等。在日常开发中我们会将结果写入日志或跟踪记录执行的进度和异常。</p>
<h4 id="写入本地文件"><a href="#写入本地文件" class="headerlink" title="写入本地文件"></a>写入本地文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">result_file = <span class="string">'/tmp/result'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackModule</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_ok</span><span class="params">(self, host, res)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file,<span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'success\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_failed</span><span class="params">(self, host, res, ignore_errors=False)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'failed\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_unreachable</span><span class="params">(self,host,res)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'unreachable\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">$ ansible-playbook  -i hosts test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">ok: [172.31.30.178]</div><div class="line"></div><div class="line">TASK: [test | install test] ***************************************************</div><div class="line">changed: [172.31.30.178]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">172.31.30.178              : ok=2    changed=1    unreachable=0    failed=0</div><div class="line"></div><div class="line">#制造一个unreachable错误</div><div class="line">$ ansible-playbook  -i hosts  test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">fatal: [172.31.30.178] =&gt; SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue</div><div class="line"></div><div class="line">FATAL: all hosts have already failed -- aborting</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">           to retry, use: --limit @/root/startoftwares.retry</div><div class="line"></div><div class="line">172.31.30.178              : ok=0    changed=0    unreachable=1    failed=0</div><div class="line"></div><div class="line">#查看结果</div><div class="line">$ cat /tmp/result</div><div class="line">success</div><div class="line">172.31.30.178&#123;</div><div class="line">    "changed": false,</div><div class="line">    "dest": "/tmp/test.sh",</div><div class="line">    "gid": 1000,</div><div class="line">    "group": "ubuntu",</div><div class="line">    "invocation": &#123;</div><div class="line">        "module_args": "src=test.sh dest=/tmp/test.sh owner=ubuntu group=ubuntu mode=0755",</div><div class="line">        "module_name": "copy"</div><div class="line">    &#125;,</div><div class="line">    "md5sum": "da1bd2e811a9909b96b09c3988deaec6",</div><div class="line">    "mode": "0755",</div><div class="line">    "owner": "ubuntu",</div><div class="line">    "path": "/tmp/test.sh",</div><div class="line">    "size": 58,</div><div class="line">    "state": "file",</div><div class="line">    "uid": 1000</div><div class="line">&#125;</div><div class="line">success</div><div class="line">172.31.30.178&#123;</div><div class="line">    "changed": true,</div><div class="line">    "cmd": "bash /tmp/test.sh",</div><div class="line">    "delta": "0:00:03.004104",</div><div class="line">    "end": "2017-04-11 10:48:20.429600",</div><div class="line">    "invocation": &#123;</div><div class="line">        "module_args": "bash /tmp/test.sh",</div><div class="line">        "module_name": "shell"</div><div class="line">    &#125;,</div><div class="line">    "rc": 0,</div><div class="line">    "start": "2017-04-11 10:48:17.425496",</div><div class="line">    "stderr": "",</div><div class="line">    "stdout": ""</div><div class="line">&#125;</div><div class="line">unreachable</div><div class="line">172.31.30.178"SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue"</div></pre></td></tr></table></figure></p>
<h4 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">mail_host=<span class="string">"smtp.xxx.com"</span></div><div class="line">mail_user=<span class="string">"xxxxx@xxx.com"</span></div><div class="line">mail_pass=<span class="string">"xxxxxxx"</span></div><div class="line">user_to = <span class="string">"xxxxx@xxx.com"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(context)</span>:</span></div><div class="line">    msg = MIMEText(context, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = mail_user</div><div class="line">    msg[<span class="string">'To'</span>] = user_to</div><div class="line">    msg[<span class="string">'Subject'</span>] = <span class="string">'Ansible error mail'</span></div><div class="line">    server = smtplib.SMTP(mail_host, <span class="number">25</span>)</div><div class="line">    server.login(mail_user, mail_pass)</div><div class="line">    server.sendmail(mail_user, user_to, msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackModule</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_ok</span><span class="params">(self, host, res)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_failed</span><span class="params">(self, host, res, ignore_errors=False)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_unreachable</span><span class="params">(self,host,res)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(res,basestring):</div><div class="line">            context = <span class="string">'An error occured for host '</span> + host + <span class="string">' with the following message:\n\n'</span> + res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            context = <span class="string">'An error occured for host'</span> + host + <span class="string">' with the following message:\n\n'</span> + str(res)</div><div class="line">        send_mail(context)</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">$ ansible-playbook  -i hosts  test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">fatal: [172.31.30.178] =&gt; SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue</div><div class="line"></div><div class="line">FATAL: all hosts have already failed -- aborting</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">           to retry, use: --limit @/root/startoftwares.retry</div><div class="line"></div><div class="line">172.31.30.178              : ok=0    changed=0    unreachable=1    failed=0</div></pre></td></tr></table></figure>
<p>查收邮件</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/B028FB3F-50E6-4B04-8969-BDCFD20ECAEB.png" alt=""></p>
<p>以上脚本都写的比较简单，建议参考:<a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins" target="_blank" rel="external">官方插件代码样例</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_plugins.html" target="_blank" rel="external">官方文档</a><br><a href="http://ansible-tran.readthedocs.io/en/latest/docs/intro_configuration.html#bin-ansible-callbacks" target="_blank" rel="external">中文文档配置文件参数详解</a><br><a href="http://rfyiamcool.blog.51cto.com/1030776/1440624" target="_blank" rel="external">ansible调用callbacks插件实现结果nosql输出回调</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Developing-Plugins&quot;&gt;&lt;a href=&quot;#Developing-Plugins&quot; class=&quot;headerlink&quot; title=&quot;Developing Plugins&quot;&gt;&lt;/a&gt;Developing Plugins&lt;/h2&gt;&lt;p&gt;插件是增强ansible核心功能的代码片段，我们可以很方便的使用插件，编写插件代码。如果我们想要对ansible的执行结果进行分析，根据返回结果发送邮件，写入日志等都可以通过插件实现。&lt;/p&gt;
&lt;h3 id=&quot;插件列表&quot;&gt;&lt;a href=&quot;#插件列表&quot; class=&quot;headerlink&quot; title=&quot;插件列表&quot;&gt;&lt;/a&gt;插件列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Action plugins&lt;/strong&gt; are front ends to modules and can execute actions on the controller before calling the modules themselves.（操作插件，调用模块之前执行操作）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache plugins&lt;/strong&gt; are used to keep a cache of ‘facts’ to avoid costly fact-gathering operations.（缓存插件，缓存主机facts变量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Callback plugins&lt;/strong&gt; enable you to hook into Ansible events for display or logging purposes.（回调插件，对事件进行显示和记录，这个常用）
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python正则表达式</title>
    <link href="http://yoursite.com/2017/03/05/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/05/Python正则表达式/</id>
    <published>2017-03-05T09:13:36.000Z</published>
    <updated>2017-06-23T15:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。</strong>正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果</p>
<p><strong>常用的元字符</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配数字</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词的开始或结束(空格、标点、换行都算是单词的分割)</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><strong>示例：</strong></p>
<p><code>\ba\w*\b</code>: 匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)</p>
<p><code>\d+</code>: 匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是\</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次</p>
<p><code>\b\w{6}\b</code>: 匹配刚好6个字符的单词</p>
<p><code>^\d{5,12}$</code>: 匹配5位到12位数字</p>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p><strong>常用的限定符(指定数量的代码)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">重复n次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">重复n次或更多次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">重复n到m次</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong><br>Windows\d+: 匹配Windows后面跟1个或更多数字<br>^\w+: 匹配一行的第一个单词</p>
<h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p><strong>常用的反义代码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td style="text-align:left">[^x]</td>
<td style="text-align:left">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">[^aeiou]</td>
<td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>我们要想查找数字，字母或数字，空白这些很简单，直接使用元字符对应的字符集合即可实现。但是如果想要匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p>
<p>这时我们需要在方括号<code>[]</code>中列出想要匹配的字符集合。如[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p>
<p>[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）</p>
<p>\(?0\d{2}[) -]?\d{8}:匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等</p>
<h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开，匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了</p>
<p><code>0\d{2}-\d{8}|0\d{3}-\d{7}</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</p>
<p><code>\\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[-]?\d{8}</code>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>重复单个字符在后面加上限定符就行了，如果想要重复多个字符那么就需要用<code>小括号</code>来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。</p>
<p>(\d{1,3}.){3}：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次</p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>使用反斜杠<code>\</code>来取消元字符的特殊含义</p>
<p>例如：deerchao\.net匹配deerchao.net，C:\\Windows匹配C:\Windows</p>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>Python 通过标准库的 re 模块支持正则表达式。</p>
<p><strong>常见的正则表达式函数与方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">函数/方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">re 模块的函数</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">compile(pattern,flags=0)</td>
<td style="text-align:left">对正则表达式模式 pattern 进行编译,flags是可选标志符,并返回一个 regex 对象</td>
</tr>
<tr>
<td style="text-align:left">re 模块的函数和 regex 对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">match(pattern,string, flags=0)</td>
<td style="text-align:left">尝试用正则表达式模式 pattern 匹配字符串 string,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">search(pattern,string, flags=0)</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的第一次出现,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">findall(pattern,string[,flags])</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的所有出现;返回一个匹配对象的列表</td>
</tr>
<tr>
<td style="text-align:left">finditer(pattern,string[, flags])</td>
<td style="text-align:left">和 findall()相同,但返回的不是列表而是迭代器;对 于每个匹配,该迭代器返回一个匹配对象</td>
</tr>
<tr>
<td style="text-align:left">匹配对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">split(pattern,string, max=0)</td>
<td style="text-align:left">根据正则表达式 pattern 中的分隔符把字符 string 分割为一个列表,返回成功匹配的列表,最多分割 max 次(默认是分割所有匹配的地方)</td>
</tr>
<tr>
<td style="text-align:left">sub(pattern, repl, string, max=0)</td>
<td style="text-align:left">把字符串 string 中所有匹配正则表达式 pattern 的地方替换成字符串 repl,如果 max 的值没有给出,则对所有匹配的地方进行替换</td>
</tr>
<tr>
<td style="text-align:left">group(num=0)</td>
<td style="text-align:left">返回全部匹配对象(或指定编号是 num 的子组)</td>
</tr>
<tr>
<td style="text-align:left">groups()</td>
<td style="text-align:left">返回一个包含全部匹配的子组的元组(如果没有成功匹配,就返回一个空元组)</td>
</tr>
</tbody>
</table>
<p>将一个正则表达式的样式编译为Python中正则表达式对象。由于正则表达式在执行过程中被多次用于比较，通过re.compile()进行预编译可以提升性能。􏰁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; p = re.compile(&apos;[a-z]+&apos;)</div><div class="line">&gt;&gt;&gt; p</div><div class="line">&lt;_sre.SRE_Pattern object at 0x108174df0&gt;</div><div class="line">&gt;&gt;&gt; a = p.match(&apos;abc&apos;)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c9f0&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823ca58&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;123&apos;)  #匹配失败返回None</div><div class="line">&gt;&gt;&gt;</div><div class="line">#不使用compile同样可以</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c988&gt;</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;123&apos;)</div></pre></td></tr></table></figure>
<h3 id="匹配对象和方法"><a href="#匹配对象和方法" class="headerlink" title="匹配对象和方法"></a>匹配对象和方法</h3><p>在处理正则表达式时，除regex对象外，还有另一种对象类型-匹配对象。这些对象是在match() 或 search()被成功调用之后所返回的结果。匹配对象有两个主要方法:<strong>group() 和 groups()</strong></p>
<p>group()方法返回所有匹配对象或是根据要求返回某个特定子组。<br>groups()返回一个包含唯一或所有子组的元组。如果正则表达式中没有子组的话, groups() 将返回一个空元组,而 group()仍会返回全部匹配对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x1082483e8</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group() <span class="comment">#返回所有匹配结果</span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>) <span class="comment">#原始字符串 </span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>) </div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups() <span class="comment">#返回包含子组的元组</span></div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div></pre></td></tr></table></figure>
<h3 id="re-match和re-search"><a href="#re-match和re-search" class="headerlink" title="re.match和re.search"></a>re.match和re.search</h3><p><strong>re.match和re.search的区别：</strong><br>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配失败返回None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配成功</span></div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x10823ca58</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>findall():</strong>根据正则表达式搜索字符串，返回所有符合的子字符串列表<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'fooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'foofooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>]</div></pre></td></tr></table></figure></p>
<p>findall()和 search()相似之处在于二者都执行字符串搜索，但 findall()和 match()与 search()不同之处是,findall()总返回一个列表。</p>
<h3 id="切分和替换"><a href="#切分和替换" class="headerlink" title="切分和替换"></a>切分和替换</h3><p><strong>re.split()</strong>:根据正则表达式分割字符串，返回分割后的所有子字符串列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]'</span>,<span class="string">'a,b,c d;e'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</div></pre></td></tr></table></figure>
<p><strong>re.subn()和re.sub()</strong><br>将某字符串中所有匹配正则表达式模式的部分进行替换，用来替换的部分通常是一个字符串,但也可能是一个函数,该函数返回一个用来替换的字符串。subn()和sub()一样,但它还返回一个表示替换次 数的数字,替换后的字符串和表示替换次数的数字作为一个元组的元素返回。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> &gt;&gt;&gt; re.sub(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">&apos;XbcdXf&apos;</div><div class="line">&gt;&gt;&gt; re.subn(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">(&apos;XbcdXf&apos;, 2)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="external">Python官方文档</a><br><a href="https://book.douban.com/subject/3112503/" target="_blank" rel="external">Python核心编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。&lt;/strong&gt;正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。&lt;/p&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的元字符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;代码&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配单词的开始或结束(空格、标点、换行都算是单词的分割)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix Low-level discovery</title>
    <link href="http://yoursite.com/2017/01/21/low-level-discovery/"/>
    <id>http://yoursite.com/2017/01/21/low-level-discovery/</id>
    <published>2017-01-21T14:13:32.000Z</published>
    <updated>2017-06-22T02:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. </p>
<p>In Zabbix, four types of item discovery are supported out of the box:</p>
<ul>
<li>discovery of file systems;</li>
<li>discovery of network interfaces;</li>
<li>discovery of CPUs and CPU cores;</li>
<li>discovery of SNMP OIDs.</li>
</ul>
<p>A user can define their own types of discovery, provided they follow a particular JSON protocol.</p>
</blockquote>
<a id="more"></a>
<p>简而言之，zabbix的低水平发现就是减少我们的重复操作，能够根据不同的监控实例自动添加监控项、触发器和图形。<br><code>vfs.fs.discovery</code>和<code>net.if.discovery</code>就是zabbix自带的自动发现键值，能够自动识别agent端的文件挂载情况和网卡信息。还有基于SNMP OID的自动发现键值，能够自动识别交换机的所有端口信息。<br>当我们的一个服务有多个端口需要监控时，我通常是先在agent端写好监控脚本，定义键值，然后再为每个端口新建监控项、触发器和图形（当然你可以直接克隆），但还是免不了一些重复操作。下面就通过一个例子看一下Low-level discovery是如何工作的：</p>
<h3 id="监控需求："><a href="#监控需求：" class="headerlink" title="监控需求："></a>监控需求：</h3><p>监控udp端口12222-12229的端口状态</p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><h4 id="1-以json格式自定义发现类型"><a href="#1-以json格式自定义发现类型" class="headerlink" title="1.以json格式自定义发现类型"></a>1.以json格式自定义发现类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cat udpport_discovery.py</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> sys,datetime,socket</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    zbxkey = sys.argv[<span class="number">1</span>]</div><div class="line">    zbx_d = &#123;&#125;</div><div class="line">    zbx_d[<span class="string">"data"</span>] = []</div><div class="line">    host_name = socket.gethostname().lower()</div><div class="line"></div><div class="line">    res = [<span class="string">'12222'</span>, <span class="string">'12223'</span>, <span class="string">'12224'</span>, <span class="string">'12225'</span>, <span class="string">'12226'</span>, <span class="string">'12227'</span>, <span class="string">'12228'</span>, <span class="string">'12229'</span>]</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> res:</div><div class="line">        d = &#123;&#125;</div><div class="line">        d[<span class="string">"&#123;#%s&#125;"</span> % zbxkey] = line</div><div class="line">        zbx_d[<span class="string">"data"</span>].append(d)</div><div class="line">    <span class="keyword">print</span> str(zbx_d).replace(<span class="string">"'"</span>,<span class="string">'"'</span>)</div></pre></td></tr></table></figure>
<h4 id="2-定义配置文件"><a href="#2-定义配置文件" class="headerlink" title="2.定义配置文件"></a>2.定义配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.conf</div><div class="line">#############Template_Udp#############</div><div class="line">UserParameter=status[*],/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udp_port.sh $1</div><div class="line">UserParameter=discovery.udpport,/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udpport_discovery.py PORT</div></pre></td></tr></table></figure>
<h4 id="3-检测自定义键值"><a href="#3-检测自定义键值" class="headerlink" title="3.检测自定义键值"></a>3.检测自定义键值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python udpport_discovery.py PORT</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure>
<p>zabbix server端测试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./zabbix_get -s 10.0.0.206 -k discovery.udpport</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-编写监控脚本"><a href="#4-编写监控脚本" class="headerlink" title="4.编写监控脚本"></a>4.编写监控脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.sh</div><div class="line">Port=$1</div><div class="line">case $Port in</div><div class="line">        12222)   netstat -nupl | grep 12222 |wc -l;;</div><div class="line">        12223)   netstat -nupl | grep 12223 |wc -l;;</div><div class="line">        12224)   netstat -nupl | grep 12224 |wc -l;;</div><div class="line">        12225)   netstat -nupl | grep 12225 |wc -l;;</div><div class="line">        12226)   netstat -nupl | grep 12226 |wc -l;;</div><div class="line">        12227)   netstat -nupl | grep 12227 |wc -l;;</div><div class="line">        12228)   netstat -nupl | grep 12228 |wc -l;;</div><div class="line">        12229)   netstat -nupl | grep 12229 |wc -l;;</div><div class="line">        *) echo Error; exit 1;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="5-web添加模板"><a href="#5-web添加模板" class="headerlink" title="5.web添加模板"></a>5.web添加模板</h4><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/01256527-8987-40C4-9C65-2FC6D1D8610F.png" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/E604037B-096A-4789-9AB3-A47B14020FB2.png" alt=""></p>
<h4 id="6-将模板关联对应机器"><a href="#6-将模板关联对应机器" class="headerlink" title="6.将模板关联对应机器"></a>6.将模板关联对应机器</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.4/manual/discovery/low_level_discovery" target="_blank" rel="external">LDD官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. &lt;/p&gt;
&lt;p&gt;In Zabbix, four types of item discovery are supported out of the box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discovery of file systems;&lt;/li&gt;
&lt;li&gt;discovery of network interfaces;&lt;/li&gt;
&lt;li&gt;discovery of CPUs and CPU cores;&lt;/li&gt;
&lt;li&gt;discovery of SNMP OIDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A user can define their own types of discovery, provided they follow a particular JSON protocol.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Python datetime那点事</title>
    <link href="http://yoursite.com/2016/11/16/python-datetime/"/>
    <id>http://yoursite.com/2016/11/16/python-datetime/</id>
    <published>2016-11-16T13:08:40.000Z</published>
    <updated>2017-06-21T14:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。</p>
<h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><p>datetime 模块主要用来操作日期和时间</p>
<h3 id="date日期对象"><a href="#date日期对象" class="headerlink" title="date日期对象"></a>date日期对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today()  //返回当前本地日期</div><div class="line"><span class="keyword">print</span> datetime.date(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>) //生成日期对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="time时间对象"><a href="#time时间对象" class="headerlink" title="time时间对象"></a>time时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">Time = datetime.time(<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成时间对象</div><div class="line"><span class="keyword">print</span> Time</div><div class="line"><span class="keyword">print</span> Time.hour</div><div class="line"><span class="keyword">print</span> Time.minute</div><div class="line"><span class="keyword">print</span> Time.second</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="datetime日期时间对象"><a href="#datetime日期时间对象" class="headerlink" title="datetime日期时间对象"></a>datetime日期时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.datetime(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成datetime对象</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() //返回当前日期时间</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //对当前时间格式化并返回字符串(将datetime对象转换为str)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> datetime.datetime.strptime(<span class="string">'2016-11-16 16:13:43'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)//将字符串转换为datetime对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47.913755</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span></div><div class="line">Wed Nov <span class="number">16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span> <span class="number">2016</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">43</span></div></pre></td></tr></table></figure>
<h3 id="timedelta对象"><a href="#timedelta对象" class="headerlink" title="timedelta对象"></a>timedelta对象</h3><p>timedelta对象表示一个时间段，即两个日期 (date) 或时间 (time) 之间的差。利用timedelta可实现时间的相加减，当然时间对象本身就能直接进行算术运算和比较运算。</p>
<blockquote>
<p>datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天后</div><div class="line"><span class="keyword">print</span> datetime.date.today() - datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天前</div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">-3</span>) //<span class="number">3</span>天前(参数可为负)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(weeks=<span class="number">1</span>) //<span class="number">1</span>个星期后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(days=<span class="number">1</span>) //明天</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>) //<span class="number">3</span>小时后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">5</span>) //<span class="number">5</span>分钟后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>) //<span class="number">60</span>秒</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-19</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311780</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-17</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311797</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">26.311806</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">19</span>:<span class="number">26.311815</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">26.311823</span></div></pre></td></tr></table></figure>
<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><p>time模块提供时间相关的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">print</span> time.ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> time.localtime() //返回当前时间timetuple</div><div class="line">time.sleep(<span class="number">10</span>) //睡眠<span class="number">10</span>秒</div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //格式化并返回字符串</div><div class="line"></div><div class="line">//stdout</div><div class="line">Wed Nov <span class="number">16</span> <span class="number">17</span>:<span class="number">25</span>:<span class="number">50</span> <span class="number">2016</span></div><div class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">16</span>, tm_hour=<span class="number">17</span>, tm_min=<span class="number">25</span>, tm_sec=<span class="number">50</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">321</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h2 id="strftime-格式化字符串含义"><a href="#strftime-格式化字符串含义" class="headerlink" title="strftime()格式化字符串含义"></a>strftime()格式化字符串含义</h2><table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期名称简写</td>
<td>Sun, Mon, …, Sat</td>
</tr>
<tr>
<td>%A</td>
<td>星期名称的全称</td>
<td>Sunday, Monday, …, Saturday</td>
</tr>
<tr>
<td>%w</td>
<td>十进制数表示的星期[0表示星期日]</td>
<td>0, 1, …, 6</td>
</tr>
<tr>
<td>%d</td>
<td>十进制数表示的一个月的第几天</td>
<td>01, 02, …, 31</td>
</tr>
<tr>
<td>%b</td>
<td>月份名称的简写</td>
<td>Jan, Feb, …, Dec</td>
</tr>
<tr>
<td>%B</td>
<td>月份名称的全称</td>
<td>January, February, …, December</td>
</tr>
<tr>
<td>%m</td>
<td>十进制数表示的月份</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%y</td>
<td>十进制数表示的年份，不带有世纪</td>
<td>00, 01, …, 99</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制数表示的年份，带有世纪</td>
<td>1970, 1988, 2001, 2013</td>
</tr>
<tr>
<td>%H</td>
<td>十进制数表示的小时（24小时制）</td>
<td>00, 01, …, 23</td>
</tr>
<tr>
<td>%I</td>
<td>十进制数表示的小时（12小时制）</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%p</td>
<td>AM or PM</td>
<td>AM, PM</td>
</tr>
<tr>
<td>%M</td>
<td>十进制数表示的分钟</td>
<td>00, 01, …, 59</td>
</tr>
<tr>
<td>%S</td>
<td>十进制表示的秒数</td>
<td>00, 01, …, 59</td>
</tr>
</tbody>
</table>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C24469F5-B517-4D77-963E-37A6BC4B56AC.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="external">datetime官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。&lt;/p&gt;
&lt;h2 id=&quot;datetime模块&quot;&gt;&lt;a href=&quot;#datetime模块&quot; class=&quot;headerlink&quot; title=&quot;datetime模块&quot;&gt;&lt;/a&gt;datetime模块&lt;/h2&gt;&lt;p&gt;datetime 模块主要用来操作日期和时间&lt;/p&gt;
&lt;h3 id=&quot;date日期对象&quot;&gt;&lt;a href=&quot;#date日期对象&quot; class=&quot;headerlink&quot; title=&quot;date日期对象&quot;&gt;&lt;/a&gt;date日期对象&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date.today()  //返回当前本地日期&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) //生成日期对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//stdout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="datetime" scheme="http://yoursite.com/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>小试Ansible Python API</title>
    <link href="http://yoursite.com/2016/11/04/ansible-python-api/"/>
    <id>http://yoursite.com/2016/11/04/ansible-python-api/</id>
    <published>2016-11-04T10:49:12.000Z</published>
    <updated>2017-06-21T15:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// ping 模块</div><div class="line">$ ansible localhost -m ping</div><div class="line">localhost | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div><div class="line">// shell 模块</div><div class="line">$ ansible localhost -m shell -a &apos;uptime&apos;</div><div class="line">localhost | success | rc=0 &gt;&gt;</div><div class="line">11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<h3 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h3><p>通过ansible.runner模块来实现</p>
<a id="more"></a>
<h4 id="使用API实现ping模块功能："><a href="#使用API实现ping模块功能：" class="headerlink" title="使用API实现ping模块功能："></a>使用API实现ping模块功能：</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">    module_name=<span class="string">'ping'</span>,  //模块名</div><div class="line">    module_args=<span class="string">''</span>,  //模块参数</div><div class="line">    pattern=<span class="string">'localhost'</span>,  //匹配主机或主机组</div><div class="line">    forks=<span class="number">2</span> //多线程</div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> data  //打印输出结果默认json格式</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;<span class="string">'dark'</span>: &#123;&#125;, <span class="string">'contacted'</span>: &#123;<span class="string">'localhost'</span>: &#123;<span class="string">'invocation'</span>: &#123;<span class="string">'module_name'</span>: <span class="string">'ping'</span>, <span class="string">'module_args'</span>: <span class="string">''</span>&#125;, <span class="string">u'changed'</span>: <span class="keyword">False</span>, <span class="string">u'ping'</span>: <span class="string">u'pong'</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>由于输出结果默认是json格式，那么我们可以格式化一下，让它更美观</p>
<blockquote>
<p>sort_keys  <code>按key排序</code><br>indent <code>缩进</code><br>separators <code>指定分隔符(默认分隔符&#39;, &#39;,使用&#39;,&#39;,&#39;: &#39; 避免尾部空格)</code></p>
</blockquote>
<p>上例中的输出格式化：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)) //对json格式化输出</div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: false,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"ping"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用API实现shell模块功能"><a href="#使用API实现shell模块功能" class="headerlink" title="使用API实现shell模块功能"></a>使用API实现shell模块功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">   module_name=<span class="string">'shell'</span>,</div><div class="line">   module_args=<span class="string">'uptime'</span>,</div><div class="line">   pattern=<span class="string">'localhost'</span>,</div><div class="line">   forks=<span class="number">2</span></div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: true,</div><div class="line">            <span class="string">"cmd"</span>: <span class="string">"uptime"</span>,</div><div class="line">            <span class="string">"delta"</span>: <span class="string">"0:00:00.002573"</span>,</div><div class="line">            <span class="string">"end"</span>: <span class="string">"2016-11-04 14:57:26.549208"</span>,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">"uptime"</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"shell"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"rc"</span>: <span class="number">0</span>,</div><div class="line">            <span class="string">"start"</span>: <span class="string">"2016-11-04 14:57:26.546635"</span>,</div><div class="line">            <span class="string">"stderr"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"stdout"</span>: <span class="string">" 14:57:26 up 67 days,  3:31,  1 user,  load average: 0.00, 0.06, 0.07"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印stdout"><a href="#打印stdout" class="headerlink" title="打印stdout"></a>打印stdout</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(contacted)</span>:</span></div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> contacted.items():</div><div class="line">        <span class="keyword">if</span> k == <span class="string">'stdout'</span>:</div><div class="line">            <span class="keyword">print</span> v</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'ping'</span>,</div><div class="line">        module_args=<span class="string">''</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    <span class="keyword">print</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'shell'</span>,</div><div class="line">        module_args=<span class="string">'uptime'</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    result(data[<span class="string">'contacted'</span>][<span class="string">'localhost'</span>])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    shell_module()</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">15</span>:<span class="number">34</span>:<span class="number">09</span> up <span class="number">67</span> days,  <span class="number">4</span>:<span class="number">07</span>,  <span class="number">1</span> user,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></div></pre></td></tr></table></figure>
<h2 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h2><p>playbook描述了在远程主机上执行的策略或一组任务</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了一系列的task，每个task通过ansible的模块来实现特定的功能</p>
<p>exp.yml (<code>playbook使用YAML语言编写，文件名以.yaml或.yml结尾</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- hosts: localhost_group   //主机组</div><div class="line">  tasks:</div><div class="line">  - name: kernel release info  //task1</div><div class="line">    command: uname -a</div><div class="line"></div><div class="line">  - name: memory info  //task2</div><div class="line">    shell: free -m</div></pre></td></tr></table></figure>
<p>这个playbook可以查看远程主机的内核版本信息和内存信息</p>
<h3 id="ansible-playbook命令"><a href="#ansible-playbook命令" class="headerlink" title="ansible-playbook命令"></a>ansible-playbook命令</h3><p>命令行执行playbook<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  test.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=3    changed=2    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<h3 id="Python-API-1"><a href="#Python-API-1" class="headerlink" title="Python API"></a>Python API</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> ansible.playbook</div><div class="line"><span class="keyword">import</span> ansible.inventory</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">playbook_path = <span class="string">"/home/ubuntu/scripts/exp.yml"</span></div><div class="line"></div><div class="line"><span class="comment">##添加主机信息</span></div><div class="line">host = ansible.inventory.host.Host(</div><div class="line">    name = <span class="string">'localhost'</span></div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">##设置主机组并添加主机</span></div><div class="line">group = ansible.inventory.group.Group(</div><div class="line">    name = <span class="string">'localhost_group'</span></div><div class="line">    )</div><div class="line">group.add_host(host)</div><div class="line"></div><div class="line"><span class="comment">##主机列表</span></div><div class="line">example_inventory = ansible.inventory.Inventory()</div><div class="line">example_inventory.add_group(group)</div><div class="line"></div><div class="line"><span class="comment">#回调信息</span></div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)</div><div class="line"></div><div class="line"><span class="comment">#创建实例，playbook位于playbook_path</span></div><div class="line">pb = ansible.playbook.PlayBook(</div><div class="line">    playbook = playbook_path,</div><div class="line">    stats = stats,</div><div class="line">    callbacks = playbook_cb,</div><div class="line">    runner_callbacks = runner_cb,</div><div class="line">    inventory = example_inventory,</div><div class="line">    subset = <span class="string">'all'</span>,</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">#运行playbook</span></div><div class="line">pr = pb.run()</div><div class="line"></div><div class="line"><span class="comment">#打印结果</span></div><div class="line"><span class="keyword">print</span> json.dumps(pr, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div></pre></td></tr></table></figure>
<p>//stdout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line">&#123;</div><div class="line">    &quot;localhost&quot;: &#123;</div><div class="line">    &quot;changed&quot;: 2,</div><div class="line">    &quot;failures&quot;: 0,</div><div class="line">    &quot;ok&quot;: 3,</div><div class="line">    &quot;skipped&quot;: 0,</div><div class="line">    &quot;unreachable&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ansible-runner更多信息"><a href="#ansible-runner更多信息" class="headerlink" title="ansible.runner更多信息"></a>ansible.runner更多信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(ansible.runner)</div><div class="line">[<span class="string">'C'</span>, <span class="string">'DefaultRunnerCallbacks'</span>, <span class="string">'HAS_ATFORK'</span>, <span class="string">'HostVars'</span>, <span class="string">'ModuleReplacer'</span>, <span class="string">'OUTPUT_LOCKFILE'</span>, <span class="string">'PROCESS_LOCKFILE'</span>, <span class="string">'Queue'</span>, <span class="string">'ReturnData'</span>, <span class="string">'Runner'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__path__'</span>, <span class="string">'_executor_hook'</span>, <span class="string">'ansible'</span>, <span class="string">'atfork'</span>, <span class="string">'base64'</span>, <span class="string">'check_conditional'</span>, <span class="string">'collections'</span>, <span class="string">'connection'</span>, <span class="string">'errors'</span>, <span class="string">'getpass'</span>, <span class="string">'jinja2'</span>, <span class="string">'module_common'</span>, <span class="string">'module_replacer'</span>, <span class="string">'multiprocessing'</span>, <span class="string">'multiprocessing_runner'</span>, <span class="string">'os'</span>, <span class="string">'pipes'</span>, <span class="string">'poller'</span>, <span class="string">'pwd'</span>, <span class="string">'random'</span>, <span class="string">'return_data'</span>, <span class="string">'signal'</span>, <span class="string">'socket'</span>, <span class="string">'split_args'</span>, <span class="string">'string_functions'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'tempfile'</span>, <span class="string">'template'</span>, <span class="string">'time'</span>, <span class="string">'traceback'</span>, <span class="string">'utils'</span>, <span class="string">'vv'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(ansible.runner.Runner)</div></pre></td></tr></table></figure>
<h4 id="Python-yaml-模块自定义playbook"><a href="#Python-yaml-模块自定义playbook" class="headerlink" title="Python yaml 模块自定义playbook"></a>Python yaml 模块自定义playbook</h4><p>define_yaml.py<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">playbook_path = <span class="string">'/home/ubuntu/scripts'</span></div><div class="line"></div><div class="line">Yml_args = &#123;&#125;</div><div class="line">Yml = []</div><div class="line">Yml_args[<span class="string">"gather_facts"</span>] = <span class="keyword">False</span></div><div class="line">Yml_args[<span class="string">"hosts"</span>] = <span class="string">"localhost_group"</span></div><div class="line">Yml_args[<span class="string">"remote_user"</span>] = <span class="string">"ubuntu"</span></div><div class="line">Yml_task = []</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'uptime'</span>, <span class="string">'name'</span>: <span class="string">'uptime info'</span>&#125;)</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'free -m'</span>, <span class="string">'name'</span>: <span class="string">'memory info'</span>&#125;)</div><div class="line">Yml_args[<span class="string">"tasks"</span>] = Yml_task</div><div class="line">Yml.append(Yml_args)</div><div class="line">Yml = yaml.dump(Yml)</div><div class="line">Yml_path = os.path.join(playbook_path, <span class="string">"exp.yml"</span>)</div><div class="line"><span class="keyword">with</span> open(Yml_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(Yml)</div></pre></td></tr></table></figure></p>
<p>运行并检测：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python define_yaml.py</div><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  exp.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">TASK: [uptime info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=2    changed=2    unreachable=0    failed=0</div><div class="line"></div><div class="line">$ cat exp.yml</div><div class="line">- gather_facts: false</div><div class="line">  hosts: localhost_group</div><div class="line">  remote_user: ubuntu</div><div class="line">  tasks:</div><div class="line">  - &#123;name: uptime info, shell: uptime&#125;</div><div class="line">  - &#123;name: memory info, shell: free -m&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html" target="_blank" rel="external">Ansible Python API</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;h3 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ping 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success &amp;gt;&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// shell 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m shell -a &amp;apos;uptime&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success | rc=0 &amp;gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-API&quot;&gt;&lt;a href=&quot;#Python-API&quot; class=&quot;headerlink&quot; title=&quot;Python API&quot;&gt;&lt;/a&gt;Python API&lt;/h3&gt;&lt;p&gt;通过ansible.runner模块来实现&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python字典排序和列表去重</title>
    <link href="http://yoursite.com/2016/09/18/python-dict-list-sort/"/>
    <id>http://yoursite.com/2016/09/18/python-dict-list-sort/</id>
    <published>2016-09-18T03:31:26.000Z</published>
    <updated>2017-06-23T15:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><h3 id="字典key排序"><a href="#字典key排序" class="headerlink" title="字典key排序"></a>字典key排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">items = dict.items()</div><div class="line">items.sort()</div><div class="line"></div><div class="line">print [(k,v) for k,v in items] //[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [(k,dict[k]) for k in sorted(dict.keys())] </div><div class="line"></div><div class="line">//stdout</div><div class="line">[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<h3 id="字典value排序"><a href="#字典value排序" class="headerlink" title="字典value排序"></a>字典value排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [ v for v in sorted(dict.values())]</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 7]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]))</div><div class="line">//[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]), reverse=True) //降序</div><div class="line">//[(&apos;d&apos;, 7), (&apos;c&apos;, 5), (&apos;b&apos;, 3), (&apos;a&apos;, 1)]</div></pre></td></tr></table></figure>
<h2 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h2><p>方法一：</p>
<p>set方法：类似dict但不存储value，且key不能重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">list = list(set(num_list))</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">print &#123;&#125;.fromkeys(num_list).keys() //创建新的字典 list的值为key 然后取key</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ids = [1,1,2,3,4,4]</div><div class="line">func = lambda x,y: x if y in x else x + [y]</div><div class="line">print reduce(func, [[], ] + ids) //利用reduce函数</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<h2 id="sort和sorted"><a href="#sort和sorted" class="headerlink" title="sort和sorted"></a>sort和sorted</h2><p><strong>sort在容器内部排序，sorted生成一个新排好序的容器</strong></p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])<br>iterable:可迭代对象<br>cmp:比较函数，默认为None<br>key:比较的关键字，默认为None<br>reverse:布尔值，True则降序排列</p>
</blockquote>
<h3 id="利用sort和sorted实现列表排序"><a href="#利用sort和sorted实现列表排序" class="headerlink" title="利用sort和sorted实现列表排序"></a>利用sort和sorted实现列表排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#sort</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">list.sort(reverse = True)</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[7, 5, 4, 3, 2, 1]  </div><div class="line"></div><div class="line">#sorted</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">new_list = sorted(list)</div><div class="line">print list</div><div class="line">print new_list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 2, 7, 4]</div><div class="line">[1, 2, 3, 4, 5, 7]</div></pre></td></tr></table></figure>
<h3 id="sorted对字典排序"><a href="#sorted对字典排序" class="headerlink" title="sorted对字典排序"></a>sorted对字典排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print sorted(dict.items(), key=lambda d: d[0]) //key</div><div class="line">print sorted(dict.items(), key=lambda d: d[1]) //value</div></pre></td></tr></table></figure>
<h3 id="sorted-key示例"><a href="#sorted-key示例" class="headerlink" title="sorted key示例"></a>sorted key示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#exp1</div><div class="line">&gt;&gt;&gt; sorted(&quot;This is a test string from Andrew&quot;.split(), key=str.lower)</div><div class="line">[&apos;a&apos;, &apos;Andrew&apos;, &apos;from&apos;, &apos;is&apos;, &apos;string&apos;, &apos;test&apos;, &apos;This&apos;]</div><div class="line"></div><div class="line">#exp2</div><div class="line">&gt;&gt;&gt; student_tuples = [</div><div class="line">    (&apos;john&apos;, &apos;A&apos;, 15),</div><div class="line">    (&apos;jane&apos;, &apos;B&apos;, 12),</div><div class="line">    (&apos;dave&apos;, &apos;B&apos;, 10),</div><div class="line">]</div><div class="line">&gt;&gt;&gt; sorted(student_tuples, key=lambda student: student[2]) # sort by age</div><div class="line">[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.python.org/moin/HowTo/Sorting" target="_blank" rel="external">Sorting Mini-HOW TO</a><br><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">Built-in Functions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典排序&quot;&gt;&lt;a href=&quot;#字典排序&quot; class=&quot;headerlink&quot; title=&quot;字典排序&quot;&gt;&lt;/a&gt;字典排序&lt;/h2&gt;&lt;h3 id=&quot;字典key排序&quot;&gt;&lt;a href=&quot;#字典key排序&quot; class=&quot;headerlink&quot; title=&quot;字典key排序&quot;&gt;&lt;/a&gt;字典key排序&lt;/h3&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dict = &amp;#123;&amp;apos;b&amp;apos;:3,&amp;apos;a&amp;apos;:1,&amp;apos;d&amp;apos;:7,&amp;apos;c&amp;apos;:5&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items = dict.items()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items.sort()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print [(k,v) for k,v in items] //[(&amp;apos;a&amp;apos;, 1), (&amp;apos;b&amp;apos;, 3), (&amp;apos;c&amp;apos;, 5), (&amp;apos;d&amp;apos;, 7)]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Screen会话管理</title>
    <link href="http://yoursite.com/2016/05/23/screen/"/>
    <id>http://yoursite.com/2016/05/23/screen/</id>
    <published>2016-05-23T12:47:12.000Z</published>
    <updated>2017-06-23T15:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<p><a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">GNU’s Screen 官方站点</a></p>
<h3 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h3><h4 id="会话恢复"><a href="#会话恢复" class="headerlink" title="会话恢复"></a>会话恢复</h4><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。</p>
<h4 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h4><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p>
<a id="more"></a>
<h4 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h4><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>
<h3 id="三、常用参数"><a href="#三、常用参数" class="headerlink" title="三、常用参数"></a>三、常用参数</h3><pre><code>screen -S yourname   //新建一个叫yourname的session
screen -ls（或者screen -list） //列出当前所有的session
screen -r yourname  //回到yourname这个session
screen -d yourname   //远程detach某个session，转移到当前终端
screen -d -r yourname  //结束当前session并回到yourname这个session

ctrl+a x -&gt; 锁住当前的 window，需用用户密码解锁
ctrl-a k -&gt; kill window，强行关闭当前的 window
ctrl+a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响
</code></pre><h3 id="四、使用实例"><a href="#四、使用实例" class="headerlink" title="四、使用实例"></a>四、使用实例</h3><h4 id="创建新窗口"><a href="#创建新窗口" class="headerlink" title="创建新窗口"></a>创建新窗口</h4><pre><code># screen  -S text   // 创建一个名字为text的会话，会打开一个默认的shell环境（一般都是bash shell）
# vi file.txt
</code></pre><p>或</p>
<pre><code># screen vi file.txt   //退出vi将退出该会话
</code></pre><h3 id="会话分离与恢复"><a href="#会话分离与恢复" class="headerlink" title="会话分离与恢复"></a>会话分离与恢复</h3><p>在screen窗口键入C-a d，Screen会给出detached，暂时中断会话。</p>
<p>找到并恢复会话：</p>
<pre><code># screen -ls    //查看当前会话
There is a screen on:
10526.test  (05/23/2016 07:48:58 PM)    (Detached)
1 Socket in /var/run/screen/S-root. 

# screen -r  test  // 进入被中断的会话，screen的名字和编号都行
</code></pre><h4 id="清除-dead会话"><a href="#清除-dead会话" class="headerlink" title="清除 dead会话"></a>清除 dead会话</h4><pre><code># screen -wipe
</code></pre><h4 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h4><pre><code>Ctrl-a k  // kill会话，同时kill会话里的进程
Ctrl-a :   // 然后输入quit命令退出Screen会话,会杀死所有窗口并退出其中运行的所有程序
</code></pre><h3 id="会话共享-1"><a href="#会话共享-1" class="headerlink" title="会话共享"></a>会话共享</h3><pre><code># screen -x  screenname

-x  Attach to a not detached screen. (Multi display mode).
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;p&gt;GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/screen/&quot;&gt;GNU’s Screen 官方站点&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、功能&quot;&gt;&lt;a href=&quot;#二、功能&quot; class=&quot;headerlink&quot; title=&quot;二、功能&quot;&gt;&lt;/a&gt;二、功能&lt;/h3&gt;&lt;h4 id=&quot;会话恢复&quot;&gt;&lt;a href=&quot;#会话恢复&quot; class=&quot;headerlink&quot; title=&quot;会话恢复&quot;&gt;&lt;/a&gt;会话恢复&lt;/h4&gt;&lt;p&gt;只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。&lt;/p&gt;
&lt;h4 id=&quot;多窗口&quot;&gt;&lt;a href=&quot;#多窗口&quot; class=&quot;headerlink&quot; title=&quot;多窗口&quot;&gt;&lt;/a&gt;多窗口&lt;/h4&gt;&lt;p&gt;在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="screen" scheme="http://yoursite.com/tags/screen/"/>
    
  </entry>
  
</feed>
