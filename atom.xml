<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abner</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-15T12:55:01.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abnerzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix Low-level Discovery</title>
    <link href="http://yoursite.com/2017/01/11/Zabbix-Low-level-discovery/"/>
    <id>http://yoursite.com/2017/01/11/Zabbix-Low-level-discovery/</id>
    <published>2017-01-11T14:13:32.000Z</published>
    <updated>2017-02-15T12:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. </p>
<p>In Zabbix, four types of item discovery are supported out of the box:</p>
<ul>
<li>discovery of file systems;</li>
<li>discovery of network interfaces;</li>
<li>discovery of CPUs and CPU cores;</li>
<li>discovery of SNMP OIDs.</li>
</ul>
<p>A user can define their own types of discovery, provided they follow a particular JSON protocol.</p>
</blockquote>
<a id="more"></a>
<p>简而言之，zabbix的低水平发现就是减少我们的重复操作，能够根据不同的监控实例自动添加监控项、触发器和图形。<br><code>vfs.fs.discovery</code>和<code>net.if.discovery</code>就是zabbix自带的自动发现键值，能够自动识别agent端的文件挂载情况和网卡信息。还有基于SNMP OID的自动发现键值，能够自动识别交换机的所有端口信息。<br>当我们的一个服务有多个端口需要监控时，我通常是先在agent端写好监控脚本，定义键值，然后再为每个端口新建监控项、触发器和图形（当然你可以直接克隆），但还是免不了一些重复操作。下面就通过一个例子看一下Low-level discovery是如何工作的：</p>
<h3 id="监控需求："><a href="#监控需求：" class="headerlink" title="监控需求："></a>监控需求：</h3><p>监控udp端口12222-12229的端口状态</p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><h4 id="1-以json格式自定义发现类型"><a href="#1-以json格式自定义发现类型" class="headerlink" title="1.以json格式自定义发现类型"></a>1.以json格式自定义发现类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udpport_discovery.py</div><div class="line">#!/usr/bin/env python</div><div class="line">import sys,datetime,socket</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    zbxkey = sys.argv[1]</div><div class="line">    zbx_d = &#123;&#125;</div><div class="line">    zbx_d[&quot;data&quot;] = []</div><div class="line">    host_name = socket.gethostname().lower()</div><div class="line"></div><div class="line">    res = [&apos;12222&apos;, &apos;12223&apos;, &apos;12224&apos;, &apos;12225&apos;, &apos;12226&apos;, &apos;12227&apos;, &apos;12228&apos;, &apos;12229&apos;]</div><div class="line">    for line in res:</div><div class="line">        d = &#123;&#125;</div><div class="line">        d[&quot;&#123;#%s&#125;&quot; % zbxkey] = line</div><div class="line">        zbx_d[&quot;data&quot;].append(d)</div><div class="line">    print str(zbx_d).replace(&quot;&apos;&quot;,&apos;&quot;&apos;)</div></pre></td></tr></table></figure>
<h4 id="2-定义配置文件"><a href="#2-定义配置文件" class="headerlink" title="2.定义配置文件"></a>2.定义配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.conf</div><div class="line">#############Template_Udp#############</div><div class="line">UserParameter=status[*],/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udp_port.sh $1</div><div class="line">UserParameter=discovery.udpport,/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udpport_discovery.py PORT</div></pre></td></tr></table></figure>
<h4 id="3-检测自定义键值"><a href="#3-检测自定义键值" class="headerlink" title="3.检测自定义键值"></a>3.检测自定义键值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python udpport_discovery.py PORT</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure>
<p>zabbix server端测试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./zabbix_get -s 10.0.0.206 -k discovery.udpport</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-编写监控脚本"><a href="#4-编写监控脚本" class="headerlink" title="4.编写监控脚本"></a>4.编写监控脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.sh</div><div class="line">Port=$1</div><div class="line">case $Port in</div><div class="line">        12222)   netstat -nupl | grep 12222 |wc -l;;</div><div class="line">        12223)   netstat -nupl | grep 12223 |wc -l;;</div><div class="line">        12224)   netstat -nupl | grep 12224 |wc -l;;</div><div class="line">        12225)   netstat -nupl | grep 12225 |wc -l;;</div><div class="line">        12226)   netstat -nupl | grep 12226 |wc -l;;</div><div class="line">        12227)   netstat -nupl | grep 12227 |wc -l;;</div><div class="line">        12228)   netstat -nupl | grep 12228 |wc -l;;</div><div class="line">        12229)   netstat -nupl | grep 12229 |wc -l;;</div><div class="line">        *) echo Error; exit 1;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="5-web添加模板"><a href="#5-web添加模板" class="headerlink" title="5.web添加模板"></a>5.web添加模板</h4><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/01256527-8987-40C4-9C65-2FC6D1D8610F.png" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/E604037B-096A-4789-9AB3-A47B14020FB2.png" alt=""></p>
<h4 id="6-将模板关联对应机器"><a href="#6-将模板关联对应机器" class="headerlink" title="6.将模板关联对应机器"></a>6.将模板关联对应机器</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.4/manual/discovery/low_level_discovery" target="_blank" rel="external">LDD官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. &lt;/p&gt;
&lt;p&gt;In Zabbix, four types of item discovery are supported out of the box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discovery of file systems;&lt;/li&gt;
&lt;li&gt;discovery of network interfaces;&lt;/li&gt;
&lt;li&gt;discovery of CPUs and CPU cores;&lt;/li&gt;
&lt;li&gt;discovery of SNMP OIDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A user can define their own types of discovery, provided they follow a particular JSON protocol.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Python xlrd和xlwt表格处理</title>
    <link href="http://yoursite.com/2016/11/27/python-excel/"/>
    <id>http://yoursite.com/2016/11/27/python-excel/</id>
    <published>2016-11-27T11:51:03.000Z</published>
    <updated>2017-02-15T12:53:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表格处理模块"><a href="#表格处理模块" class="headerlink" title="表格处理模块"></a>表格处理模块</h2><ul>
<li>xlwt (writing xls files)</li>
<li>xlrd (reading xls/xlsx files)</li>
<li>openpyxl (reading/writing xlsx files)</li>
<li>xlsxwriter (writing xlsx files)</li>
</ul>
<h2 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h2><h3 id="excel表格示例"><a href="#excel表格示例" class="headerlink" title="excel表格示例"></a>excel表格示例</h3><p>示例表格2016-11-27.xlsx 内容如下：</p>
<a id="more"></a>
<p>Info工作表：<br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/01522E0B-78EE-40A5-9217-DD68656485A0.png" alt=""></p>
<p>Grade工作表：<br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/81E0B26F-2120-41BC-A268-B44903D76A55.png" alt=""></p>
<h3 id="显示工作表"><a href="#显示工作表" class="headerlink" title="显示工作表"></a>显示工作表</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 打开excel</span></div><div class="line">data = xlrd.open_workbook(file_path)</div><div class="line"></div><div class="line"><span class="comment"># 显示工作表</span></div><div class="line">sheets = data.sheet_names()</div><div class="line"><span class="keyword">print</span> sheets </div><div class="line"></div><div class="line">//stdout</div><div class="line">[<span class="string">u'Info'</span>, <span class="string">u'Grade'</span>]</div></pre></td></tr></table></figure>
<h3 id="获取工作表的内容"><a href="#获取工作表的内容" class="headerlink" title="获取工作表的内容"></a>获取工作表的内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 打开excel</span></div><div class="line">data = xlrd.open_workbook(file_path)</div><div class="line"></div><div class="line"><span class="comment">#获取工作表</span></div><div class="line">table = data.sheets()[<span class="number">0</span>] //list索引获取到Info工作表</div><div class="line"><span class="keyword">or</span></div><div class="line"><span class="comment">#table = data.sheet_by_index(1) //索引方法获取Grade工作表</span></div><div class="line"><span class="comment">#table = data.sheet_by_name('Info') //根据工作表名</span></div><div class="line"></div><div class="line"><span class="comment"># 获取行数和列数</span></div><div class="line">nrows = table.nrows <span class="comment">#行数</span></div><div class="line"><span class="keyword">print</span> nrows</div><div class="line">cols = table.ncols <span class="comment">#列数</span></div><div class="line"><span class="keyword">print</span> cols</div><div class="line"></div><div class="line"><span class="comment"># 获取整行或整列的值</span></div><div class="line">row_content = table.row_values(<span class="number">1</span>) <span class="comment">#获取第二行的值</span></div><div class="line"><span class="keyword">print</span> row_content</div><div class="line">col_content = table.col_values(<span class="number">1</span>) <span class="comment">#获取第二列的值</span></div><div class="line"><span class="keyword">print</span> col_content</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">4</span></div><div class="line">[<span class="string">u'mike'</span>, <span class="number">23.0</span>, <span class="string">u'male'</span>, <span class="string">u'shanghai'</span>]</div><div class="line">[<span class="string">u'Age'</span>, <span class="number">23.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>]</div></pre></td></tr></table></figure>
<h3 id="遍历表格数据"><a href="#遍历表格数据" class="headerlink" title="遍历表格数据"></a>遍历表格数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 打开excel</span></div><div class="line">data = xlrd.open_workbook(file_path)</div><div class="line"></div><div class="line"><span class="comment">#获取工作表</span></div><div class="line">table = data.sheets()[<span class="number">0</span>] //list索引获取到Info工作表</div><div class="line"></div><div class="line"><span class="comment"># 获取行数和列数</span></div><div class="line">nrows = table.nrows <span class="comment">#行数</span></div><div class="line">cols = table.ncols <span class="comment">#列数</span></div><div class="line"></div><div class="line"><span class="comment"># 遍历行数据</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nrows):</div><div class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    row = table.row_values(i)</div><div class="line">    <span class="keyword">print</span> row</div><div class="line"></div><div class="line"><span class="comment">#遍历列数据</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(cols):</div><div class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    col = table.col_values(i)</div><div class="line">    <span class="keyword">print</span> col</div><div class="line"></div><div class="line">//stdout</div><div class="line">[<span class="string">u'mike'</span>, <span class="number">23.0</span>, <span class="string">u'male'</span>, <span class="string">u'shanghai'</span>]</div><div class="line">[<span class="string">u'marry'</span>, <span class="number">20.0</span>, <span class="string">u'female'</span>, <span class="string">u'beijing'</span>]</div><div class="line">[<span class="string">u'abner'</span>, <span class="number">30.0</span>, <span class="string">u'male'</span>, <span class="string">u'changsha'</span>]</div><div class="line"></div><div class="line">[<span class="string">u'Age'</span>, <span class="number">23.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>]</div><div class="line">[<span class="string">u'Sex'</span>, <span class="string">u'male'</span>, <span class="string">u'female'</span>, <span class="string">u'male'</span>]</div><div class="line">[<span class="string">u'City'</span>, <span class="string">u'shanghai'</span>, <span class="string">u'beijing'</span>, <span class="string">u'changsha'</span>]</div></pre></td></tr></table></figure>
<h3 id="获取单元格数据"><a href="#获取单元格数据" class="headerlink" title="获取单元格数据"></a>获取单元格数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 打开excel</span></div><div class="line">data = xlrd.open_workbook(file_path)</div><div class="line"></div><div class="line"><span class="comment">#获取工作表</span></div><div class="line">table = data.sheets()[<span class="number">0</span>] //list索引获取到Info工作表</div><div class="line"></div><div class="line"><span class="comment"># 通过单元格获取数据</span></div><div class="line">cell_A = table.row(<span class="number">0</span>)[<span class="number">0</span>].value //第一行的第一列的数据</div><div class="line">cell_B = table.col(<span class="number">1</span>)[<span class="number">1</span>].value //第二行第二列的数据</div><div class="line"><span class="keyword">print</span> cell_A</div><div class="line"><span class="keyword">print</span> cell_B</div><div class="line"></div><div class="line">//stdout</div><div class="line">Name</div><div class="line"><span class="number">23.0</span></div></pre></td></tr></table></figure>
<h2 id="xlwt"><a href="#xlwt" class="headerlink" title="xlwt"></a>xlwt</h2><h3 id="简单写入"><a href="#简单写入" class="headerlink" title="简单写入"></a>简单写入</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line">workbook = xlwt.Workbook(encoding = <span class="string">'utf-8'</span>)</div><div class="line">worksheet = workbook.add_sheet(<span class="string">'My sheet'</span>) //新建一个工作表,默认单元格不能被覆盖</div><div class="line"><span class="comment">#worksheet = workbook.add_sheet('My sheet',cell_overwrite_ok=True) //新建一个工作表,单元格可以被覆盖</span></div><div class="line"></div><div class="line"><span class="comment"># 简单写入</span></div><div class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'foo'</span>) <span class="comment"># row, column, value</span></div><div class="line">workbook.save(file_path)</div></pre></td></tr></table></figure>
<h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line">dir_path = os.path.dirname(os.path.dirname(__file__))</div><div class="line">file_path = os.path.join(dir_path,<span class="string">'2016-11-27.xlsx'</span>)</div><div class="line"></div><div class="line">workbook = xlwt.Workbook(encoding = <span class="string">'utf-8'</span>)</div><div class="line">worksheet = workbook.add_sheet(<span class="string">'My sheet'</span>) //新建一个工作表,默认单元格不能被覆盖</div><div class="line"></div><div class="line"><span class="comment"># 设置样式</span></div><div class="line">style1 = xlwt.easyxf(<span class="string">'font: bold 1'</span>) //字体加粗</div><div class="line">style2 = xlwt.easyxf(<span class="string">'font:bold 1,color red;'</span>) //字体加粗,字体颜色为红色</div><div class="line"></div><div class="line"><span class="comment"># 写入并应用样式</span></div><div class="line">worksheet.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'bar'</span>,style1)</div><div class="line">worksheet.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">'foobar'</span>,style2)</div><div class="line">worksheet.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">'中文'</span>,style2)</div><div class="line"></div><div class="line"><span class="comment"># 设置列的宽度</span></div><div class="line">worksheet.col(<span class="number">0</span>).width = <span class="number">256</span> * <span class="number">7</span>  //<span class="number">256</span> = <span class="number">1</span> width of <span class="number">0</span> character(<span class="number">256</span>可以理解为一个字符的宽度)</div><div class="line"></div><div class="line"><span class="comment"># 设置超链接</span></div><div class="line">worksheet.write(<span class="number">1</span>, <span class="number">0</span>, xlwt.Formula(<span class="string">'HYPERLINK("http://yujitomita.com"; "click me")'</span>)) //设置超链接</div><div class="line"></div><div class="line">workbook.save(file_path)</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.python-excel.org/" target="_blank" rel="external">python-excel</a><br><a href="http://www.programering.com/a/MzN2QjMwATA.html" target="_blank" rel="external">python xlrd example</a><br><a href="http://www.lexicon.net/sjmachin/xlrd.html" target="_blank" rel="external">xlrd Module docs</a><br><a href="https://yuji.wordpress.com/2012/04/19/python-xlwt-writing-excel-files/" target="_blank" rel="external">python-xlwt-writing-excel-files</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;表格处理模块&quot;&gt;&lt;a href=&quot;#表格处理模块&quot; class=&quot;headerlink&quot; title=&quot;表格处理模块&quot;&gt;&lt;/a&gt;表格处理模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;xlwt (writing xls files)&lt;/li&gt;
&lt;li&gt;xlrd (reading xls/xlsx files)&lt;/li&gt;
&lt;li&gt;openpyxl (reading/writing xlsx files)&lt;/li&gt;
&lt;li&gt;xlsxwriter (writing xlsx files)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;xlrd&quot;&gt;&lt;a href=&quot;#xlrd&quot; class=&quot;headerlink&quot; title=&quot;xlrd&quot;&gt;&lt;/a&gt;xlrd&lt;/h2&gt;&lt;h3 id=&quot;excel表格示例&quot;&gt;&lt;a href=&quot;#excel表格示例&quot; class=&quot;headerlink&quot; title=&quot;excel表格示例&quot;&gt;&lt;/a&gt;excel表格示例&lt;/h3&gt;&lt;p&gt;示例表格2016-11-27.xlsx 内容如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="xlrd" scheme="http://yoursite.com/tags/xlrd/"/>
    
      <category term="xlwt" scheme="http://yoursite.com/tags/xlwt/"/>
    
  </entry>
  
  <entry>
    <title>Python datetime那点事</title>
    <link href="http://yoursite.com/2016/11/16/python-datetime/"/>
    <id>http://yoursite.com/2016/11/16/python-datetime/</id>
    <published>2016-11-16T13:08:40.000Z</published>
    <updated>2017-02-15T12:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。</p>
<h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><p>datetime 模块主要用来操作日期和时间</p>
<h3 id="date日期对象"><a href="#date日期对象" class="headerlink" title="date日期对象"></a>date日期对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today()  //返回当前本地日期</div><div class="line"><span class="keyword">print</span> datetime.date(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>) //生成日期对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="time时间对象"><a href="#time时间对象" class="headerlink" title="time时间对象"></a>time时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">Time = datetime.time(<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成时间对象</div><div class="line"><span class="keyword">print</span> Time</div><div class="line"><span class="keyword">print</span> Time.hour</div><div class="line"><span class="keyword">print</span> Time.minute</div><div class="line"><span class="keyword">print</span> Time.second</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="datetime日期时间对象"><a href="#datetime日期时间对象" class="headerlink" title="datetime日期时间对象"></a>datetime日期时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.datetime(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成datetime对象</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() //返回当前日期时间</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //对当前时间格式化并返回字符串(将datetime对象转换为str)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> datetime.datetime.strptime(<span class="string">'2016-11-16 16:13:43'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)//将字符串转换为datetime对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47.913755</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span></div><div class="line">Wed Nov <span class="number">16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span> <span class="number">2016</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">43</span></div></pre></td></tr></table></figure>
<h3 id="timedelta对象"><a href="#timedelta对象" class="headerlink" title="timedelta对象"></a>timedelta对象</h3><p>timedelta对象表示一个时间段，即两个日期 (date) 或时间 (time) 之间的差。利用timedelta可实现时间的相加减，当然时间对象本身就能直接进行算术运算和比较运算。</p>
<blockquote>
<p>datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天后</div><div class="line"><span class="keyword">print</span> datetime.date.today() - datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天前</div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">-3</span>) //<span class="number">3</span>天前(参数可为负)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(weeks=<span class="number">1</span>) //<span class="number">1</span>个星期后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(days=<span class="number">1</span>) //明天</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>) //<span class="number">3</span>小时后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">5</span>) //<span class="number">5</span>分钟后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>) //<span class="number">60</span>秒</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-19</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311780</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-17</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311797</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">26.311806</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">19</span>:<span class="number">26.311815</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">26.311823</span></div></pre></td></tr></table></figure>
<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><p>time模块提供时间相关的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">print</span> time.ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> time.localtime() //返回当前时间timetuple</div><div class="line">time.sleep(<span class="number">10</span>) //睡眠<span class="number">10</span>秒</div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //格式化并返回字符串</div><div class="line"></div><div class="line">//stdout</div><div class="line">Wed Nov <span class="number">16</span> <span class="number">17</span>:<span class="number">25</span>:<span class="number">50</span> <span class="number">2016</span></div><div class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">16</span>, tm_hour=<span class="number">17</span>, tm_min=<span class="number">25</span>, tm_sec=<span class="number">50</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">321</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h2 id="strftime-格式化字符串含义"><a href="#strftime-格式化字符串含义" class="headerlink" title="strftime()格式化字符串含义"></a>strftime()格式化字符串含义</h2><table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期名称简写</td>
<td>Sun, Mon, …, Sat</td>
</tr>
<tr>
<td>%A</td>
<td>星期名称的全称</td>
<td>Sunday, Monday, …, Saturday</td>
</tr>
<tr>
<td>%w</td>
<td>十进制数表示的星期[0表示星期日]</td>
<td>0, 1, …, 6</td>
</tr>
<tr>
<td>%d</td>
<td>十进制数表示的一个月的第几天</td>
<td>01, 02, …, 31</td>
</tr>
<tr>
<td>%b</td>
<td>月份名称的简写</td>
<td>Jan, Feb, …, Dec</td>
</tr>
<tr>
<td>%B</td>
<td>月份名称的全称</td>
<td>January, February, …, December</td>
</tr>
<tr>
<td>%m</td>
<td>十进制数表示的月份</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%y</td>
<td>十进制数表示的年份，不带有世纪</td>
<td>00, 01, …, 99</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制数表示的年份，带有世纪</td>
<td>1970, 1988, 2001, 2013</td>
</tr>
<tr>
<td>%H</td>
<td>十进制数表示的小时（24小时制）</td>
<td>00, 01, …, 23</td>
</tr>
<tr>
<td>%I</td>
<td>十进制数表示的小时（12小时制）</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%p</td>
<td>AM or PM</td>
<td>AM, PM</td>
</tr>
<tr>
<td>%M</td>
<td>十进制数表示的分钟</td>
<td>00, 01, …, 59</td>
</tr>
<tr>
<td>%S</td>
<td>十进制表示的秒数</td>
<td>00, 01, …, 59</td>
</tr>
</tbody>
</table>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C24469F5-B517-4D77-963E-37A6BC4B56AC.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="external">datetime官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。&lt;/p&gt;
&lt;h2 id=&quot;datetime模块&quot;&gt;&lt;a href=&quot;#datetime模块&quot; class=&quot;headerlink&quot; title=&quot;datetime模块&quot;&gt;&lt;/a&gt;datetime模块&lt;/h2&gt;&lt;p&gt;datetime 模块主要用来操作日期和时间&lt;/p&gt;
&lt;h3 id=&quot;date日期对象&quot;&gt;&lt;a href=&quot;#date日期对象&quot; class=&quot;headerlink&quot; title=&quot;date日期对象&quot;&gt;&lt;/a&gt;date日期对象&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date.today()  //返回当前本地日期&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) //生成日期对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//stdout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="datetime" scheme="http://yoursite.com/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>单人旅途之杭州</title>
    <link href="http://yoursite.com/2016/11/13/hangzhou/"/>
    <id>http://yoursite.com/2016/11/13/hangzhou/</id>
    <published>2016-11-13T03:57:17.000Z</published>
    <updated>2016-11-13T04:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Day1-南宋御街、清河坊、灵隐寺"><a href="#Day1-南宋御街、清河坊、灵隐寺" class="headerlink" title="Day1: 南宋御街、清河坊、灵隐寺"></a>Day1: 南宋御街、清河坊、灵隐寺</h3><p>上海早上九点的动车十点就到达杭州东，拥挤的杭州东地铁站被一条条排队买票的长龙分隔成好多格像是一座人墙迷宫。穿过拥挤的人群拿着排了十几分钟买到的地铁票进站去往定安路。</p>
<p>定安路附近的景点就是南宋御街和清河坊，感觉也没什么看的就是一条商业街和一条小吃街，差评！</p>
<p><em>摄于南宋御街</em><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2472%2820161112-202653%29.jpg" alt="摄于南宋御街"></p>
<a id="more"></a>
<p>吃过中饭就到了西湖边，风景真心不错就是人有点多，由于我在网上订了西湖边青年旅社计划是第二天清晨环湖徒步所以在湖边随便走走就坐公交去了灵隐寺。</p>
<p>在公交车上小睡了一会，醒来感觉车子好像一直在山里爬坡，不宽的道路两边都是骑自行车的人，这么好的天气和景色骑车应该更爽点。</p>
<p><em>长者提名灵隐寺</em><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2498%2820161112-214834%29.jpg" alt=""></p>
<p>灵隐寺景区有三座寺庙加一座飞来峰，爬了一下飞来峰其实很矮，不过古人留下的石刻还是很值得一看。景区里的景色非常优美。仙灵所隐，隐于山林，如果没有那么多游客这里应该非常幽静的确适合修行。</p>
<p>从灵隐寺出来差不多下午四点，晚上约了大学室友一起吃饭，于是坐公交去了滨江。</p>
<p>和许久不见的大学室友一起吃饭聊天吐槽，话说他住的人才公寓真是让我羡慕得要死，酒店式的公寓即便宜环境也好。房租一个月只要300，没看错不要998只要300。</p>
<p>饭后坐地铁回西湖边的国际青旅，晚上的南山路也是美得可以。</p>
<p><em>南山路夜景</em><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2514%2820161109-092912%29.jpg" alt=""></p>
<p>在去哪网订的65的床位，用优惠券抵了30，35西湖旁一晚也是挺值的了。到旅社差不多十点，四人间我是最后一个到的。和房间里的几位哥们闲聊才知道他们是特意从外地赶来来参加杭州马拉松，一位跑全马一位跑半马。最近几年马拉松也是遍地开花，上周末才搞完上海马拉松，这周又是杭马。感觉有点兴师动众，各种交通管制，形式大于意义。这年头不跑个马拉松都不好意思说自己XXX…</p>
<h3 id="Day2-西湖、龙井路"><a href="#Day2-西湖、龙井路" class="headerlink" title="Day2: 西湖、龙井路"></a>Day2: 西湖、龙井路</h3><p>天微微亮，下铺跑马拉松的哥们就起床整装待发了，我也早早的起床开始环西湖徒步，想想我出来玩也是蛮拼的，不过为了避开拥挤的人潮，看一眼清晨睡意朦胧未被打扰地西湖也是值得的。</p>
<p>6点20分到西湖边开始暴走，清晨的西湖也是一道亮丽的风景线，没有熙熙攘攘的游客，有的都是晨练的市民，舞刀弄剑、打太极、以水为墨以瓷砖为纸写书法、带着耳机晨跑、遛狗、喂松鼠等多样化的晨练方式。我还是人生第一次看到松鼠，也真是够萌的。没想到在杭州市区能看到松鼠，真是惊喜。很多樟树上都有不少的松鼠在飞速地跳动。东边开始慢慢变得橘红，随着太阳渐渐升起游客也开始增多。</p>
<p>逛了西湖的大半圈花了二个多小时，断桥、白堤、苏堤、雷峰塔，风景真是大写的赞，怪不得古代文人墨客都流连忘返，忍不住吟唱一番。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2524%2820161109-092912%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2533%2820161112-184026%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2562%2820161109-092911%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2550%2820161109-092911%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2538%2820161109-092911%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2582%2820161106-135941%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2599%2820161108-095731%29.jpg" alt=""></p>
<p>差不多十点的样子到达太子湾公园，想坐公交去龙井景区看一下茶山，结果因为马拉松交通管制，公交很多站都不停靠，于是只能继续暴走，还好不算太远。一个人戴着耳机听着民谣开始爬山。不知道是时间还早还是其他原因，爬山的过程中基本也没有什么游客，只有茶农穿行在茶山中施肥洒药。爬到山顶大片茶山一览无余，不过此时肚子也咕咕作响提醒着午餐时间快到了，于是询问了一位种茶阿姨下山的路径并和她闲聊了一会。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2607%2820161109-092912%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2618%2820161112-233300%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2633%2820161109-092912%29.jpg" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2625%2820161109-092911%29.jpg" alt=""></p>
<p>说实话到达山下真是有点累了，只想坐车到滨江老王家里，结果路上一辆车都没有，有的只是浩浩荡荡的马拉松选手。无奈只好继续走，走过了久负盛名的钱塘江大桥才到达滨江，于是立马打车去好友老王家。</p>
<p><em>上行汽车下通火车的钱塘江大桥，两个车道估计早就无法满足杭州臃肿的交通</em><br><img src="http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2635%2820161113-104509%29.jpg" alt=""></p>
<p>中午和老王下馆子，聊着工作和生活上的琐事。由于另一位朋友也知道我来杭州约我会面，于是稍作休息就去江边和她汇合，点了杯咖啡一起在江边吹风。钱塘江不宽，十一月的风也不冷，手握暖暖的咖啡闲谈着这些年大家的变化。到了一定的年纪都有着相同的烦恼，但无论如何生活在继续，曾经一起求学的伙伴如今散落各地，平常联系不多但再次相聚时依旧情感深切温暖如初。</p>
<p>晚上九点火车逃票到达上海，已经很多年没有逃过票了现在依旧666。压根就没打算逃票，由于自己错误的认为杭州到上海往来的高铁会很多所以没有提前预定返程车票，等到时间差不多该回上海时才发现一张票都没有，火车站票都没有。无奈只能买到嘉兴然后上海再补票吧~到达上海准备补票才发现身上总共就四块钱(都是被支付宝惯出来的)，反正也不够补票的钱于是深吸一口气扎入人群随着人流混出站了。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/9F31E98B-6611-4796-A1B2-4AAB5B5706DC.png" alt=""></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>渣渣文笔记了这么多流水账，说一下对杭州的直观感受吧~</p>
<blockquote>
<ul>
<li>治安没得说，随处可见的安保和武警，毕竟旅游城市</li>
<li>西湖就是杭州的一块宝</li>
<li>遍地都是车，每条大街小巷能停的地方都停满了所以交通有多糟糕你就知道了</li>
<li>机动车礼让人这种在中国其他城市罕见的现象，在杭州真是神奇般存在。好几次我站在马路边都还没打算过去，结果路上的车都主动停了下来等待你过去。顿时真心忍不住给司机们一个大大的赞</li>
<li>互联网环境以及对人才的重视完全不输上海，当然房价嘛…</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Day1-南宋御街、清河坊、灵隐寺&quot;&gt;&lt;a href=&quot;#Day1-南宋御街、清河坊、灵隐寺&quot; class=&quot;headerlink&quot; title=&quot;Day1: 南宋御街、清河坊、灵隐寺&quot;&gt;&lt;/a&gt;Day1: 南宋御街、清河坊、灵隐寺&lt;/h3&gt;&lt;p&gt;上海早上九点的动车十点就到达杭州东，拥挤的杭州东地铁站被一条条排队买票的长龙分隔成好多格像是一座人墙迷宫。穿过拥挤的人群拿着排了十几分钟买到的地铁票进站去往定安路。&lt;/p&gt;
&lt;p&gt;定安路附近的景点就是南宋御街和清河坊，感觉也没什么看的就是一条商业街和一条小吃街，差评！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摄于南宋御街&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/IMG_2472%2820161112-202653%29.jpg&quot; alt=&quot;摄于南宋御街&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="游记" scheme="http://yoursite.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>pdb代码调试</title>
    <link href="http://yoursite.com/2016/11/11/pdb/"/>
    <id>http://yoursite.com/2016/11/11/pdb/</id>
    <published>2016-11-11T10:45:20.000Z</published>
    <updated>2016-11-11T10:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单调试示例"><a href="#简单调试示例" class="headerlink" title="简单调试示例"></a>简单调试示例</h3><pre><code>$ python -m pdb exp.py  #停在脚本第一行等待调试
&gt; /Users/Mr-zhao/work_space/scripts/exp.py(3)&lt;module&gt;()
-&gt; a = 1
(Pdb) l    #list列出当前代码所在行
    1   #!/usr/bin/env python
    2
    3  -&gt;   a = 1
    4   b = 2
    5   c = 3
    6   d = a+b+c
    7   print d
[EOF]
(Pdb) n #next执行下一行
&gt; /Users/Mr-zhao/work_space/scripts/exp.py(4)&lt;module&gt;()
-&gt; b = 2
(Pdb) p a  #打印变量值，pp和print都可以
1
(Pdb) c  #continue继续执行程序，遇到断点则停止
6    #由于脚本没有设置断点，则直接运行完成输出结果
The program finished and will be restarted
&gt; /Users/Mr-zhao/work_space/scripts/exp.py(3)&lt;module&gt;()
-&gt; a = 1
(Pdb) q  # exit退出
</code></pre><a id="more"></a>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>break 或 b</td>
<td>设置断点</td>
</tr>
<tr>
<td>continue 或 c</td>
<td>继续执行程序，遇到断点则停止</td>
</tr>
<tr>
<td>list 或 l</td>
<td>查看当前行的代码段，默认显示11行代码</td>
</tr>
<tr>
<td>step 或 s</td>
<td>进入函数</td>
</tr>
<tr>
<td>return 或 r</td>
<td>执行代码直到从当前函数返回</td>
</tr>
<tr>
<td>exit 或 q</td>
<td>中止并退出</td>
</tr>
<tr>
<td>next 或 n</td>
<td>执行下一行</td>
</tr>
<tr>
<td>p 或 pp</td>
<td>打印变量的值</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
</tbody>
</table>
<h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><pre><code>$ python -m pdb exp1.py
&gt; /Users/Mr-zhao/work_space/scripts/exp1.py(3)&lt;module&gt;()
-&gt; x = 1
(Pdb) l
    1   #!/usr/bin/env python
    2
    3  -&gt;   x = 1
    4   y = 2
    5   z = x + y
    6   print z
[EOF]
(Pdb) b 5  #设置第5行断点
Breakpoint 1 at /Users/Mr-zhao/work_space/scripts/exp1.py:5
(Pdb) b
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at /Users/Mr-zhao/work_space/scripts/exp1.py:5
(Pdb) c  #执行程序停留在断点位置
&gt; /Users/Mr-zhao/work_space/scripts/exp1.py(5)&lt;module&gt;()
-&gt; z = x + y
(Pdb) q 
</code></pre><h4 id="脚本内部设置"><a href="#脚本内部设置" class="headerlink" title="脚本内部设置"></a>脚本内部设置</h4><pre><code>$ cat exp.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import pdb  #导入模块
def pdbexp(x,y):
    a = 1
    return a+x+y
x = 1
y = 2
pdb.set_trace()   #设置断点
z = pdbexp(x,y)
print z
</code></pre><p>开始调试：</p>
<pre><code>$ python exp.py
&gt; /Users/Mr-zhao/work_space/scripts/exp.py(9)&lt;module&gt;()
-&gt; z = pdbexp(x,y)
(Pdb) l
    4       a = 1
    5       return a+x+y
    6   x = 1
    7   y = 2
    8   pdb.set_trace()
    9  -&gt;   z = pdbexp(x,y)
    10      print z
[EOF]
(Pdb) s  #进入函数
--Call--
&gt; /Users/Mr-zhao/work_space/scripts/exp.py(3)pdbexp()
-&gt; def pdbexp(x,y):
(Pdb) a #打印函数参数
x = 1
y = 2
(Pdb) c #继续运行
4
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/index.html" target="_blank" rel="external">Python 代码调试技巧</a><br><a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="external">pdb官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单调试示例&quot;&gt;&lt;a href=&quot;#简单调试示例&quot; class=&quot;headerlink&quot; title=&quot;简单调试示例&quot;&gt;&lt;/a&gt;简单调试示例&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ python -m pdb exp.py  #停在脚本第一行等待调试
&amp;gt; /Users/Mr-zhao/work_space/scripts/exp.py(3)&amp;lt;module&amp;gt;()
-&amp;gt; a = 1
(Pdb) l    #list列出当前代码所在行
    1   #!/usr/bin/env python
    2
    3  -&amp;gt;   a = 1
    4   b = 2
    5   c = 3
    6   d = a+b+c
    7   print d
[EOF]
(Pdb) n #next执行下一行
&amp;gt; /Users/Mr-zhao/work_space/scripts/exp.py(4)&amp;lt;module&amp;gt;()
-&amp;gt; b = 2
(Pdb) p a  #打印变量值，pp和print都可以
1
(Pdb) c  #continue继续执行程序，遇到断点则停止
6    #由于脚本没有设置断点，则直接运行完成输出结果
The program finished and will be restarted
&amp;gt; /Users/Mr-zhao/work_space/scripts/exp.py(3)&amp;lt;module&amp;gt;()
-&amp;gt; a = 1
(Pdb) q  # exit退出
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="pdb" scheme="http://yoursite.com/tags/pdb/"/>
    
  </entry>
  
  <entry>
    <title>小试Ansible Python API</title>
    <link href="http://yoursite.com/2016/11/04/ansible-python-api/"/>
    <id>http://yoursite.com/2016/11/04/ansible-python-api/</id>
    <published>2016-11-04T10:49:12.000Z</published>
    <updated>2016-11-07T06:35:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// ping 模块</div><div class="line">$ ansible localhost -m ping</div><div class="line">localhost | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div><div class="line">// shell 模块</div><div class="line">$ ansible localhost -m shell -a &apos;uptime&apos;</div><div class="line">localhost | success | rc=0 &gt;&gt;</div><div class="line">11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<h3 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h3><p>通过ansible.runner模块来实现</p>
<a id="more"></a>
<h4 id="使用API实现ping模块功能："><a href="#使用API实现ping模块功能：" class="headerlink" title="使用API实现ping模块功能："></a>使用API实现ping模块功能：</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">    module_name=<span class="string">'ping'</span>,  //模块名</div><div class="line">    module_args=<span class="string">''</span>,  //模块参数</div><div class="line">    pattern=<span class="string">'localhost'</span>,  //匹配主机或主机组</div><div class="line">    forks=<span class="number">2</span> //多线程</div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> data  //打印输出结果默认json格式</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;<span class="string">'dark'</span>: &#123;&#125;, <span class="string">'contacted'</span>: &#123;<span class="string">'localhost'</span>: &#123;<span class="string">'invocation'</span>: &#123;<span class="string">'module_name'</span>: <span class="string">'ping'</span>, <span class="string">'module_args'</span>: <span class="string">''</span>&#125;, <span class="string">u'changed'</span>: <span class="keyword">False</span>, <span class="string">u'ping'</span>: <span class="string">u'pong'</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>由于输出结果默认是json格式，那么我们可以格式化一下，让它更美观</p>
<blockquote>
<p>sort_keys  <code>按key排序</code><br>indent <code>缩进</code><br>separators <code>指定分隔符(默认分隔符&#39;, &#39;,使用&#39;,&#39;,&#39;: &#39; 避免尾部空格)</code></p>
</blockquote>
<p>上例中的输出格式化：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)) //对json格式化输出</div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: false,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"ping"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用API实现shell模块功能"><a href="#使用API实现shell模块功能" class="headerlink" title="使用API实现shell模块功能"></a>使用API实现shell模块功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">   module_name=<span class="string">'shell'</span>,</div><div class="line">   module_args=<span class="string">'uptime'</span>,</div><div class="line">   pattern=<span class="string">'localhost'</span>,</div><div class="line">   forks=<span class="number">2</span></div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: true,</div><div class="line">            <span class="string">"cmd"</span>: <span class="string">"uptime"</span>,</div><div class="line">            <span class="string">"delta"</span>: <span class="string">"0:00:00.002573"</span>,</div><div class="line">            <span class="string">"end"</span>: <span class="string">"2016-11-04 14:57:26.549208"</span>,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">"uptime"</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"shell"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"rc"</span>: <span class="number">0</span>,</div><div class="line">            <span class="string">"start"</span>: <span class="string">"2016-11-04 14:57:26.546635"</span>,</div><div class="line">            <span class="string">"stderr"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"stdout"</span>: <span class="string">" 14:57:26 up 67 days,  3:31,  1 user,  load average: 0.00, 0.06, 0.07"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印stdout"><a href="#打印stdout" class="headerlink" title="打印stdout"></a>打印stdout</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(contacted)</span>:</span></div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> contacted.items():</div><div class="line">        <span class="keyword">if</span> k == <span class="string">'stdout'</span>:</div><div class="line">            <span class="keyword">print</span> v</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'ping'</span>,</div><div class="line">        module_args=<span class="string">''</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    <span class="keyword">print</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'shell'</span>,</div><div class="line">        module_args=<span class="string">'uptime'</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    result(data[<span class="string">'contacted'</span>][<span class="string">'localhost'</span>])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    shell_module()</div><div class="line">    </div><div class="line">//stdout</div><div class="line"><span class="number">15</span>:<span class="number">34</span>:<span class="number">09</span> up <span class="number">67</span> days,  <span class="number">4</span>:<span class="number">07</span>,  <span class="number">1</span> user,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></div></pre></td></tr></table></figure>
<h2 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h2><p>playbook描述了在远程主机上执行的策略或一组任务</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了一系列的task，每个task通过ansible的模块来实现特定的功能</p>
<p>exp.yml (<code>playbook使用YAML语言编写，文件名以.yaml或.yml结尾</code>)</p>
<pre><code>- hosts: localhost_group   //主机组
   tasks:
    - name: kernel release info  //task1
      command: uname -a

    - name: memory info  //task2
      shell: free -m
</code></pre><p>这个playbook可以查看远程主机的内核版本信息和内存信息</p>
<h3 id="ansible-playbook命令"><a href="#ansible-playbook命令" class="headerlink" title="ansible-playbook命令"></a>ansible-playbook命令</h3><p>命令行执行playbook</p>
<pre><code>$ ansible-playbook  -i /etc/ansible/hosts  test.yml

PLAY [localhost_group] ********************************************************

GATHERING FACTS ***************************************************************
ok: [localhost]

TASK: [kernel info] ***********************************************************
changed: [localhost]

TASK: [memory info] ***********************************************************
changed: [localhost]

PLAY RECAP ********************************************************************
localhost                  : ok=3    changed=2    unreachable=0    failed=0
</code></pre><h3 id="Python-API-1"><a href="#Python-API-1" class="headerlink" title="Python API"></a>Python API</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> ansible.playbook</div><div class="line"><span class="keyword">import</span> ansible.inventory</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">playbook_path = <span class="string">"/home/ubuntu/scripts/exp.yml"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##添加主机信息</span></div><div class="line">host = ansible.inventory.host.Host(</div><div class="line">    name = <span class="string">'localhost'</span></div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">##设置主机组并添加主机</span></div><div class="line">group = ansible.inventory.group.Group(</div><div class="line">    name = <span class="string">'localhost_group'</span></div><div class="line">    )</div><div class="line">group.add_host(host)</div><div class="line"></div><div class="line"><span class="comment">##主机列表</span></div><div class="line">example_inventory = ansible.inventory.Inventory()</div><div class="line">example_inventory.add_group(group)</div><div class="line"></div><div class="line"><span class="comment">#回调信息</span></div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)</div><div class="line"></div><div class="line"><span class="comment">#创建实例，playbook位于playbook_path</span></div><div class="line">pb = ansible.playbook.PlayBook(</div><div class="line">    playbook = playbook_path,</div><div class="line">    stats = stats,</div><div class="line">    callbacks = playbook_cb,</div><div class="line">    runner_callbacks = runner_cb,</div><div class="line">    inventory = example_inventory,</div><div class="line">    subset = <span class="string">'all'</span>,</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">#运行playbook</span></div><div class="line">pr = pb.run()</div><div class="line"></div><div class="line"><span class="comment">#打印结果</span></div><div class="line"><span class="keyword">print</span> json.dumps(pr, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div></pre></td></tr></table></figure>
<p>//stdout</p>
<pre><code>PLAY [localhost_group] ********************************************************

GATHERING FACTS ***************************************************************
ok: [localhost]

TASK: [kernel info] ***********************************************************
changed: [localhost]

TASK: [memory info] ***********************************************************
changed: [localhost]
{
    &quot;localhost&quot;: {
    &quot;changed&quot;: 2,
    &quot;failures&quot;: 0,
    &quot;ok&quot;: 3,
    &quot;skipped&quot;: 0,
    &quot;unreachable&quot;: 0
    }
}
</code></pre><h4 id="ansible-runner更多信息"><a href="#ansible-runner更多信息" class="headerlink" title="ansible.runner更多信息"></a>ansible.runner更多信息</h4><pre><code>&gt;&gt;&gt; import ansible.runner
&gt;&gt;&gt; dir(ansible.runner)
[&apos;C&apos;, &apos;DefaultRunnerCallbacks&apos;, &apos;HAS_ATFORK&apos;, &apos;HostVars&apos;, &apos;ModuleReplacer&apos;, &apos;OUTPUT_LOCKFILE&apos;, &apos;PROCESS_LOCKFILE&apos;, &apos;Queue&apos;, &apos;ReturnData&apos;, &apos;Runner&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__path__&apos;, &apos;_executor_hook&apos;, &apos;ansible&apos;, &apos;atfork&apos;, &apos;base64&apos;, &apos;check_conditional&apos;, &apos;collections&apos;, &apos;connection&apos;, &apos;errors&apos;, &apos;getpass&apos;, &apos;jinja2&apos;, &apos;module_common&apos;, &apos;module_replacer&apos;, &apos;multiprocessing&apos;, &apos;multiprocessing_runner&apos;, &apos;os&apos;, &apos;pipes&apos;, &apos;poller&apos;, &apos;pwd&apos;, &apos;random&apos;, &apos;return_data&apos;, &apos;signal&apos;, &apos;socket&apos;, &apos;split_args&apos;, &apos;string_functions&apos;, &apos;subprocess&apos;, &apos;sys&apos;, &apos;tempfile&apos;, &apos;template&apos;, &apos;time&apos;, &apos;traceback&apos;, &apos;utils&apos;, &apos;vv&apos;]
&gt;&gt;&gt; help(ansible.runner.Runner)    
</code></pre><h4 id="Python-yaml-模块自定义playbook"><a href="#Python-yaml-模块自定义playbook" class="headerlink" title="Python yaml 模块自定义playbook"></a>Python yaml 模块自定义playbook</h4><p>define_yaml.py<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">playbook_path = <span class="string">'/home/ubuntu/scripts'</span></div><div class="line"></div><div class="line">Yml_args = &#123;&#125;</div><div class="line">Yml = []</div><div class="line">Yml_args[<span class="string">"gather_facts"</span>] = <span class="keyword">False</span></div><div class="line">Yml_args[<span class="string">"hosts"</span>] = <span class="string">"localhost_group"</span></div><div class="line">Yml_args[<span class="string">"remote_user"</span>] = <span class="string">"ubuntu"</span></div><div class="line">Yml_task = []</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'uptime'</span>, <span class="string">'name'</span>: <span class="string">'uptime info'</span>&#125;)</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'free -m'</span>, <span class="string">'name'</span>: <span class="string">'memory info'</span>&#125;)</div><div class="line">Yml_args[<span class="string">"tasks"</span>] = Yml_task</div><div class="line">Yml.append(Yml_args)</div><div class="line">Yml = yaml.dump(Yml)</div><div class="line">Yml_path = os.path.join(playbook_path, <span class="string">"exp.yml"</span>)</div><div class="line"><span class="keyword">with</span> open(Yml_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(Yml)</div></pre></td></tr></table></figure></p>
<p>运行并检测：</p>
<pre><code>$ python define_yaml.py

$ ansible-playbook  -i /etc/ansible/hosts  exp.yml

PLAY [localhost_group] ********************************************************

TASK: [uptime info] ***********************************************************
changed: [localhost]

TASK: [memory info] ***********************************************************
changed: [localhost]

PLAY RECAP ********************************************************************
localhost                  : ok=2    changed=2    unreachable=0    failed=0

$ cat exp.yml
- gather_facts: false
  hosts: localhost_group
  remote_user: ubuntu
  tasks:
  - {name: uptime info, shell: uptime}
  - {name: memory info, shell: free -m}
</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html" target="_blank" rel="external">Ansible Python API</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;h3 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ping 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success &amp;gt;&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// shell 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m shell -a &amp;apos;uptime&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success | rc=0 &amp;gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-API&quot;&gt;&lt;a href=&quot;#Python-API&quot; class=&quot;headerlink&quot; title=&quot;Python API&quot;&gt;&lt;/a&gt;Python API&lt;/h3&gt;&lt;p&gt;通过ansible.runner模块来实现&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="Ansible" scheme="http://yoursite.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>跨仓库转移SVN代码目录</title>
    <link href="http://yoursite.com/2016/11/01/svn-code-transfer/"/>
    <id>http://yoursite.com/2016/11/01/svn-code-transfer/</id>
    <published>2016-11-01T10:59:38.000Z</published>
    <updated>2016-11-07T08:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于公司先前代码管理比较混乱，不同部门之间的代码有放在同一个仓库的，抽空转移了部分并记录备忘。</p>
<p><strong>project项目位于dev仓库的主分支，现需要将他转移到ops仓库主分支</strong></p>
<blockquote>
<p>old svn: <a href="http://svnserver/svn/dev/trunk/project/" target="_blank" rel="external">http://svnserver/svn/dev/trunk/project/</a></p>
<p>new svn:<a href="http://svnserver/svn/ops/trunk/" target="_blank" rel="external">http://svnserver/svn/ops/trunk/</a></p>
</blockquote>
<p><strong>直接svn move 报错：</strong></p>
<pre><code>$ svn move  http://svnserver/svn/dev/trunk/project/  http://svnserver/svn/ops/trunk/
svn: E200007: Source and destination URLs appear not to point to the same repository.
</code></pre><blockquote>
<p>svn: E200007: Source and destination URLs appear not to point to the same repository. </p>
<p>不同的仓库之间无法直接move或cp项目代码</p>
</blockquote>
<a id="more"></a>
<h3 id="转移方法："><a href="#转移方法：" class="headerlink" title="转移方法："></a>转移方法：</h3><p><strong>方法一：</strong></p>
<p>先将old svn项目代码check到本地然后import到new svn中</p>
<ul>
<li><p>缺点：old svn的代码的历史记录都会清空</p>
</li>
<li><p>优点：在客户端本地就能完成</p>
</li>
</ul>
<p>操作如下：</p>
<pre><code>$ svn --username=abner.zhao checkout http://svnserver/svn/dev/trunk/project/ project
$ svn import project  svn:http://svnserver/svn/ops/trunk/  -m &apos;import project to trunk&apos;
</code></pre><p><strong>方法二：</strong></p>
<p>将old svn中要迁移的项目代码dump出来，然后load 到new svn中</p>
<ul>
<li><p>优点：保留历史记录</p>
</li>
<li><p>缺点：要到svn服务端上操作</p>
</li>
</ul>
<p>操作如下：</p>
<pre><code>$ svnadmin dump dev | svndumpfilter include /trunk/UDPServer/ --drop-empty-revs --renumber-revs --preserve-revprops &gt; /tmp/project.dump
$ svnadmin load ops &lt; /tmp/project.dump
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://falstaff.agner.ch/2011/11/12/subversion-move-folder-from-one-repository-to-another/" target="_blank" rel="external">subversion-move-folder-from-one-repository-to-another</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于公司先前代码管理比较混乱，不同部门之间的代码有放在同一个仓库的，抽空转移了部分并记录备忘。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;project项目位于dev仓库的主分支，现需要将他转移到ops仓库主分支&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;old svn: &lt;a href=&quot;http://svnserver/svn/dev/trunk/project/&quot;&gt;http://svnserver/svn/dev/trunk/project/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;new svn:&lt;a href=&quot;http://svnserver/svn/ops/trunk/&quot;&gt;http://svnserver/svn/ops/trunk/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;直接svn move 报错：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ svn move  http://svnserver/svn/dev/trunk/project/  http://svnserver/svn/ops/trunk/
svn: E200007: Source and destination URLs appear not to point to the same repository.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;svn: E200007: Source and destination URLs appear not to point to the same repository. &lt;/p&gt;
&lt;p&gt;不同的仓库之间无法直接move或cp项目代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>Python编码风格</title>
    <link href="http://yoursite.com/2016/10/29/Python-code-style/"/>
    <id>http://yoursite.com/2016/10/29/Python-code-style/</id>
    <published>2016-10-29T07:00:25.000Z</published>
    <updated>2016-11-07T08:41:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标记"><a href="#标记" class="headerlink" title="#!标记"></a>#!标记</h3><blockquote>
<p>大部分.py文件不必以#!作为文件的开始。 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始。 (<code>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略。因此只有被直接执行的文件中才有必要加入#!</code>)</p>
</blockquote>
<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><blockquote>
<p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>
</blockquote>
<h3 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h3><blockquote>
<p>每行不超过80个字符</p>
</blockquote>
<a id="more"></a>
<h4 id="例外："><a href="#例外：" class="headerlink" title="例外："></a>例外：</h4><ul>
<li>长的导入模块语句</li>
<li>注释里的URL</li>
</ul>
<p>Python会将<code>圆括号、中括号和花括号</code>中的行隐式的连接起来，不要使用反斜杠连接行</p>
<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>
<pre><code>long_str = (&apos;This will build a very long long&apos;
            &apos;long long long long long long string&apos;)                                 
</code></pre><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><blockquote>
<p>尽量少使用括号，除非实现隐式行，不要在返回语句或条件语句中使用括号，在元组两边可以使用括号</p>
</blockquote>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><blockquote>
<p>用4个空格来缩进代码</p>
</blockquote>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li>顶级定义（类和函数）之间空两行, 方法定义之间空一行</li>
<li>括号内不要有空格</li>
<li>逗号, 分号, 冒号前面不要加空格，应该在它们后面加(除了在行尾)</li>
<li>参数列表, 索引或切片的左括号前不应加空格</li>
<li>在二元操作符两边都加上一个空格, 比如赋值<code>(=，==， &lt;， &gt;， !=， &lt;&gt;， &lt;=， &gt;=，in， not in， is， is not)， 布尔(and， or， not)</code></li>
<li>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格</li>
<li>不要用空格来垂直对齐多行间的标记，这会成为维护的负担(适用于:, #, =等)</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>文档字符串</li>
</ul>
<blockquote>
<p>使用三重双引号”””(一个文档字符串应该这样组织: 首先是一行以句号，问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行)接着是一个空行。接着是文档字符串剩下的部分， 它应该与文档字符串的第一行的第一个引号对齐 )</p>
</blockquote>
<ul>
<li>函数和方法</li>
</ul>
<blockquote>
<p>函数必须要有文档字符串，除非它外部不可见、非常短小、简单明了。文档字符串应该包含函数做什么, 以及输入和输出的详细描述</p>
</blockquote>
<p><strong>Args:</strong></p>
<p>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.描述应该包括所需的类型和含义，如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致)</p>
<p><strong>Returns: (或者 Yields: 用于生成器)</strong></p>
<p>描述返回值的类型和语义。如果函数返回None, 这一部分可以省略</p>
<p><strong>Raises:</strong></p>
<p>列出与接口有关的所有异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></div><div class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></div><div class="line"></div><div class="line">    Retrieves rows pertaining to the given keys from the Table instance</div><div class="line">    represented by big_table.  Silly things may happen if</div><div class="line">    other_silly_variable is not None.</div><div class="line"></div><div class="line">    Args:</div><div class="line">        big_table: An open Bigtable Table instance.</div><div class="line">        keys: A sequence of strings representing the key of each table row</div><div class="line">        to fetch.</div><div class="line">        other_silly_variable: Another optional variable, that has a much</div><div class="line">        longer name than the other args, and which does nothing.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A dict mapping keys to the corresponding table row data</div><div class="line">        fetched. Each row is represented as a tuple of strings. For</div><div class="line">        example:</div><div class="line"></div><div class="line">        &#123;'Serak': ('Rigel VII', 'Preparer'),</div><div class="line">        'Zim': ('Irk', 'Invader'),</div><div class="line">        'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</div><div class="line"></div><div class="line">        If a key from the keys argument is missing from the dictionary,</div><div class="line">        then that row was not found in the table.</div><div class="line"></div><div class="line">    Raises:</div><div class="line">        IOError: An error occurred accessing the bigtable.Table object.</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类应该在其定义下有一个用于描述该类的文档字符串。如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段。并且应该遵守和函数参数相同的格式</p>
<pre><code class="python">
<span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span>
    <span class="string">"""Summary of class here.

    Longer class information....
    Longer class information....

    Attributes:
        likes_spam: A boolean indicating if we like SPAM or not.
        eggs: An integer count of the eggs we have laid.
    """</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span>
        <span class="string">"""Inits SampleClass with blah."""</span>
        self.likes_spam = likes_spam
        self.eggs = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span>
        <span class="string">"""Performs operation blah."""</span>
</code></pre>
<blockquote>
<p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串</li>
</ul>
<blockquote>
<p>避免在循环中用+和+=操作符来累加字符串，字符串是不可变的，这样做会创建不必要的临时对象。作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 .join 连接列表</p>
</blockquote>
<ul>
<li><p>在同一个文件中, 保持使用字符串引号的一致性(使用单引号’或者双引号”)</p>
</li>
<li><p>为多行字符串使用三重双引号”“”</p>
</li>
</ul>
<h3 id="文件和sockets"><a href="#文件和sockets" class="headerlink" title="文件和sockets"></a>文件和sockets</h3><blockquote>
<p>在文件和sockets结束时, 显式的关闭它，文件使用<code>with</code></p>
</blockquote>
<h3 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h3><blockquote>
<p>为临时代码使用TODO注释</p>
</blockquote>
<p>TODO注释应该在所有开头处包含”TODO”字符串，紧跟着是用括号括起来的你的名字，email地址或其它标识符。然后是一个可选的冒号。接着必须有一行注释，解释要做什么.</p>
<pre><code># TODO(kl@gmail.com): Use a &quot;*&quot; here for string repetition.
# TODO(Zeke) Change this to use relations.
</code></pre><h3 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h3><blockquote>
<p>每个导入应该独占一行</p>
</blockquote>
<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>
<pre><code>1.标准库导入
2.第三方库导入
3.应用程序指定导入
</code></pre><p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p>
<pre><code>import foo
from foo import bar
from foo.bar import baz
from foo.bar import Quux
from Foob import ar
</code></pre><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote>
<p>通常每个语句应该独占一行</p>
</blockquote>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.</p>
<p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p>
<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><blockquote>
<p>`module_name, package_name, ClassName, method_name, ExceptionName, function_name,</p>
<p> GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.`</p>
</blockquote>
<p>应该避免的名称</p>
<ul>
<li>单字符名称, 除了计数器和迭代器</li>
<li>包/模块名中的连字符(-)</li>
<li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li>
</ul>
<p>命名约定</p>
<ul>
<li>用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含)</li>
<li>用双下划线(__)开头的实例变量或方法表示类内私有</li>
<li>将相关的类和顶级函数放在同一个模块里</li>
<li>对类名使用大写字母开头的单词(如CapWords), 但是模块名应该用小写加下划线的方式(如lower_with_under.py)</li>
</ul>
<h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><p>执行主程序前总是检查 <code>if __name__ == &#39;__main__&#39;</code></p>
<pre><code>def main():
  ...

if __name__ == &apos;__main__&apos;:
    main()
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="external">Google 开源项目风格指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标记&quot;&gt;&lt;a href=&quot;#标记&quot; class=&quot;headerlink&quot; title=&quot;#!标记&quot;&gt;&lt;/a&gt;#!标记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;大部分.py文件不必以#!作为文件的开始。 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始。 (&lt;code&gt;#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略。因此只有被直接执行的文件中才有必要加入#!&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;分号&quot;&gt;&lt;a href=&quot;#分号&quot; class=&quot;headerlink&quot; title=&quot;分号&quot;&gt;&lt;/a&gt;分号&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不要在行尾加分号, 也不要用分号将两条命令放在同一行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;行长度&quot;&gt;&lt;a href=&quot;#行长度&quot; class=&quot;headerlink&quot; title=&quot;行长度&quot;&gt;&lt;/a&gt;行长度&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每行不超过80个字符&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python字典排序和列表去重</title>
    <link href="http://yoursite.com/2016/09/18/python-dict-list-sort/"/>
    <id>http://yoursite.com/2016/09/18/python-dict-list-sort/</id>
    <published>2016-09-18T03:31:26.000Z</published>
    <updated>2016-11-23T10:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><h3 id="字典key排序"><a href="#字典key排序" class="headerlink" title="字典key排序"></a>字典key排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">items = dict.items()</div><div class="line">items.sort()</div><div class="line"></div><div class="line">print [(k,v) for k,v in items] //[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [(k,dict[k]) for k in sorted(dict.keys())] </div><div class="line"></div><div class="line">//stdout</div><div class="line">[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<h3 id="字典value排序"><a href="#字典value排序" class="headerlink" title="字典value排序"></a>字典value排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [ v for v in sorted(dict.values())]</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 7]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]))</div><div class="line">//[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]), reverse=True) //降序</div><div class="line">//[(&apos;d&apos;, 7), (&apos;c&apos;, 5), (&apos;b&apos;, 3), (&apos;a&apos;, 1)]</div></pre></td></tr></table></figure>
<h2 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h2><p>方法一：</p>
<p>set方法：类似dict但不存储value，且key不能重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">list = list(set(num_list))</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">print &#123;&#125;.fromkeys(num_list).keys() //创建新的字典 list的值为key 然后取key</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ids = [1,1,2,3,4,4]</div><div class="line">func = lambda x,y: x if y in x else x + [y]</div><div class="line">print reduce(func, [[], ] + ids) //利用reduce函数</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<h2 id="sort和sorted"><a href="#sort和sorted" class="headerlink" title="sort和sorted"></a>sort和sorted</h2><p><strong>sort在容器内部排序，sorted生成一个新排好序的容器</strong></p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])<br>iterable:可迭代对象<br>cmp:比较函数，默认为None<br>key:比较的关键字，默认为None<br>reverse:布尔值，True则降序排列</p>
</blockquote>
<h3 id="利用sort和sorted实现列表排序"><a href="#利用sort和sorted实现列表排序" class="headerlink" title="利用sort和sorted实现列表排序"></a>利用sort和sorted实现列表排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#sort</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">list.sort(reverse = True)</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[7, 5, 4, 3, 2, 1]  </div><div class="line"></div><div class="line">#sorted</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">new_list = sorted(list)</div><div class="line">print list</div><div class="line">print new_list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 2, 7, 4]</div><div class="line">[1, 2, 3, 4, 5, 7]</div></pre></td></tr></table></figure>
<h3 id="sorted对字典排序"><a href="#sorted对字典排序" class="headerlink" title="sorted对字典排序"></a>sorted对字典排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print sorted(dict.items(), key=lambda d: d[0]) //key</div><div class="line">print sorted(dict.items(), key=lambda d: d[1]) //value</div></pre></td></tr></table></figure>
<h3 id="sorted-key示例"><a href="#sorted-key示例" class="headerlink" title="sorted key示例"></a>sorted key示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#exp1</div><div class="line">&gt;&gt;&gt; sorted(&quot;This is a test string from Andrew&quot;.split(), key=str.lower)</div><div class="line">[&apos;a&apos;, &apos;Andrew&apos;, &apos;from&apos;, &apos;is&apos;, &apos;string&apos;, &apos;test&apos;, &apos;This&apos;]</div><div class="line"></div><div class="line">#exp2</div><div class="line">&gt;&gt;&gt; student_tuples = [</div><div class="line">    (&apos;john&apos;, &apos;A&apos;, 15),</div><div class="line">    (&apos;jane&apos;, &apos;B&apos;, 12),</div><div class="line">    (&apos;dave&apos;, &apos;B&apos;, 10),</div><div class="line">]</div><div class="line">&gt;&gt;&gt; sorted(student_tuples, key=lambda student: student[2]) # sort by age</div><div class="line">[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.python.org/moin/HowTo/Sorting" target="_blank" rel="external">Sorting Mini-HOW TO</a><br><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">Built-in Functions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典排序&quot;&gt;&lt;a href=&quot;#字典排序&quot; class=&quot;headerlink&quot; title=&quot;字典排序&quot;&gt;&lt;/a&gt;字典排序&lt;/h2&gt;&lt;h3 id=&quot;字典key排序&quot;&gt;&lt;a href=&quot;#字典key排序&quot; class=&quot;headerlink&quot; title=&quot;字典key排序&quot;&gt;&lt;/a&gt;字典key排序&lt;/h3&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dict = &amp;#123;&amp;apos;b&amp;apos;:3,&amp;apos;a&amp;apos;:1,&amp;apos;d&amp;apos;:7,&amp;apos;c&amp;apos;:5&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items = dict.items()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items.sort()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print [(k,v) for k,v in items] //[(&amp;apos;a&amp;apos;, 1), (&amp;apos;b&amp;apos;, 3), (&amp;apos;c&amp;apos;, 5), (&amp;apos;d&amp;apos;, 7)]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>ss获取内核状态信息</title>
    <link href="http://yoursite.com/2016/06/16/ss/"/>
    <id>http://yoursite.com/2016/06/16/ss/</id>
    <published>2016-06-16T12:46:44.000Z</published>
    <updated>2016-11-07T08:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ss-简介"><a href="#一、ss-简介" class="headerlink" title="一、ss 简介"></a>一、ss 简介</h2><blockquote>
<p>ss  is  used to dump socket statistics. It allows showing information similar to netstat.  It can dis‐<br>       play more TCP and state informations than other tools.</p>
<p>The ss command is capable of showing more information than the netstat and is faster. The netstat command reads various /proc files to gather information. However this approach falls weak when there are lots of connections to display. This makes it slower.</p>
<p>The ss command gets its information directly from kernel space. The options used with the ss commands are very similar to netstat making it an easy replacement.</p>
</blockquote>
<p>ss 命令用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但 ss 的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p>
<p>ss 利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。</p>
<a id="more"></a>
<h3 id="1-1-选项"><a href="#1-1-选项" class="headerlink" title="1.1 选项"></a>1.1 选项</h3><pre><code>Usage: ss [ OPTIONS ]
    ss [ OPTIONS ] [ FILTER ]
-h, --help      this message
-V, --version   output version information
-n, --numeric   don&apos;t resolve service names  #不解析服务名称，以数字方式显示
-a, --all       display all sockets #显示所有的套接字
-l, --listening display listening sockets #显示处于监听状态的套接字
-o, --options       show timer information #显示计时器信息
-m, --memory        show socket memory usage #显示套接字的内存使用情况
-p, --processes show process using socket #显示使用套接字的进程信息
-i, --info      show internal TCP information #显示内部TCP信息
-t, --tcp       display only TCP sockets #只显示TCP套接字
-u, --udp       display only UDP sockets #只显示UDP套接字
-d, --dccp      display only DCCP sockets #只显示DCCP套接字
-w, --raw       display only RAW sockets #只显示RAW套接字
-x, --unix      display only Unix domain sockets #只显示UNIX域套接字
</code></pre><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><h3 id="2-1-显示所有的连接"><a href="#2-1-显示所有的连接" class="headerlink" title="2.1 显示所有的连接"></a>2.1 显示所有的连接</h3><pre><code># ss | more
Netid  State      Recv-Q Send-Q   Local Address:Port       Peer Address:Port
u_str  ESTAB      0      0      /var/run/dbus/system_bus_socket 24643                 * 39740
u_str  ESTAB      0      0                    * 26693                 * 26694
u_str  ESTAB      0      0                    * 26683                 * 39746
u_str  ESTAB      0      0      @/com/ubuntu/upstart 16419                 * 101
u_str  ESTAB      0      0      /var/run/mysqld/mysqld.sock 23234                 * 8691
......
</code></pre><h3 id="2-2-过滤TCP、UDP和UNIX域套接字"><a href="#2-2-过滤TCP、UDP和UNIX域套接字" class="headerlink" title="2.2 过滤TCP、UDP和UNIX域套接字"></a>2.2 过滤TCP、UDP和UNIX域套接字</h3><pre><code># ss -t  //仅显示建立的tcp连接
State      Recv-Q Send-Q                      Local Address:Port                          Peer Address:Port
ESTAB      0      0                               127.0.0.1:59954                            127.0.0.1:2633
ESTAB      0      0                               127.0.0.1:2633                             127.0.0.1:59954
ESTAB      0      148                          10.249.7.247:ssh                          10.249.23.101:50285
# ss -ta //显示tcp连接的所有状态
State      Recv-Q Send-Q                      Local Address:Port                          Peer Address:Port
LISTEN     0      128                                     *:40861                                    *:*
LISTEN     0      15                                      *:2633                                     *:*
LISTEN     0      50                              127.0.0.1:mysql                                    *:*
ESTAB      0      0                               127.0.0.1:59956                            127.0.0.1:2633
TIME-WAIT  0      0                               127.0.0.1:2633                             127.0.0.1:59951
# ss -u
# ss -ua
# ss -x
# ss -ltu //查看处于监听状态的tcp和udp连接
</code></pre><h3 id="2-3-显示-Sockets-摘要"><a href="#2-3-显示-Sockets-摘要" class="headerlink" title="2.3 显示 Sockets 摘要"></a>2.3 显示 Sockets 摘要</h3><pre><code># ss -s
Total: 168 (kernel 1734)
TCP:   22 (estab 1, closed 9, orphaned 0, synrecv 0, timewait 8/0), ports 0

Transport Total     IP        IPv6
*     1734      -         -
RAW   0         0         0
UDP   10        7         3
TCP   13        10        3
INET      23        17        6
FRAG      0         0         0
</code></pre><h3 id="2-4-查看进程使用的Socket"><a href="#2-4-查看进程使用的Socket" class="headerlink" title="2.4 查看进程使用的Socket"></a>2.4 查看进程使用的Socket</h3><pre><code># ss -plt
State      Recv-Q Send-Q                      Local Address:Port                          Peer Address:Port
LISTEN     0      128                                     *:40861                                    *:*        users:((&quot;rpc.statd&quot;,1325,9))
LISTEN     0      15                                      *:2633                                     *:*        users:((&quot;oned&quot;,2204,26))
LISTEN     0      50                              127.0.0.1:mysql                                    *:*        users:((&quot;mysqld&quot;,1525,10))
LISTEN     0      100                          10.249.7.247:9869                                     *:*        users:((&quot;ruby&quot;,2070,8))
LISTEN     0      128                                     *:sunrpc                                   *:*        users:((&quot;rpcbind&quot;,1319,8))
LISTEN     0      100                                     *:29876                                    *:*        users:((&quot;python&quot;,2054,0))
</code></pre><h3 id="2-5-根据TCP状态过滤连接"><a href="#2-5-根据TCP状态过滤连接" class="headerlink" title="2.5 根据TCP状态过滤连接"></a>2.5 根据TCP状态过滤连接</h3><pre><code># ss [ OPTIONS ] [ STATE-FILTER ] [ ADDRESS-FILTER ]
# ss -t4 state established
Recv-Q Send-Q                           Local Address:Port                               Peer Address:Port
0      148                               10.249.7.247:ssh                               10.249.23.101:50285
0      0                                    127.0.0.1:60035                                 127.0.0.1:2633
0      0                                    127.0.0.1:2633                                  127.0.0.1:60035
# ss -t4 state time-wait
Recv-Q Send-Q                           Local Address:Port                               Peer Address:Port
0      0                                    127.0.0.1:2633                                  127.0.0.1:60033
0      0                                 10.249.7.247:9869                              10.249.23.101:60243
0      0                                 10.249.7.247:9869                              10.249.23.101:60248
0      0                                 10.249.7.247:9869                              10.249.23.101:60239
0      0                                 10.249.7.247:9869                              10.249.23.101:60245
</code></pre><p>状态如下：</p>
<blockquote>
<p>1.established</p>
<p>2.syn-sent </p>
<p>3.syn-recv </p>
<p>4.fin-wait-1  </p>
<p>5.fin-wait-2 </p>
<p>6.time-wait </p>
<p>7.closed </p>
<p>8.close-wait </p>
<p>9.last-ack </p>
<p>10.closing </p>
<p>11.all - All of the above states </p>
<p>12.connected - All the states except for listen and closed </p>
<p>13.synchronized - All the connected states except for syn-sent </p>
<p>14.bucket - Show states, which are maintained as minisockets, i.e. time-wait and syn-recv. </p>
<p>15.big - Opposite to bucket state.</p>
</blockquote>
<h3 id="2-6-根据IP地址和端口过滤连接"><a href="#2-6-根据IP地址和端口过滤连接" class="headerlink" title="2.6 根据IP地址和端口过滤连接"></a>2.6 根据IP地址和端口过滤连接</h3><pre><code># ss -at &apos;( dport = :ssh or sport = :ssh )&apos;
# ss -nt  dst :443 or dst :80 
# ss -nt dst 74.125.236.178
</code></pre><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><p><a href="http://www.binarytides.com/linux-ss-command/" target="_blank" rel="external">10 examples of Linux ss command to monitor network connections</a><br><a href="http://man.linuxde.net/ss" target="_blank" rel="external">ss 命令详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、ss-简介&quot;&gt;&lt;a href=&quot;#一、ss-简介&quot; class=&quot;headerlink&quot; title=&quot;一、ss 简介&quot;&gt;&lt;/a&gt;一、ss 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ss  is  used to dump socket statistics. It allows showing information similar to netstat.  It can dis‐&lt;br&gt;       play more TCP and state informations than other tools.&lt;/p&gt;
&lt;p&gt;The ss command is capable of showing more information than the netstat and is faster. The netstat command reads various /proc files to gather information. However this approach falls weak when there are lots of connections to display. This makes it slower.&lt;/p&gt;
&lt;p&gt;The ss command gets its information directly from kernel space. The options used with the ss commands are very similar to netstat making it an easy replacement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ss 命令用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但 ss 的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。&lt;/p&gt;
&lt;p&gt;ss 利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。&lt;/p&gt;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="ss" scheme="http://yoursite.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>raid磁盘状态备忘</title>
    <link href="http://yoursite.com/2016/06/12/raid_states/"/>
    <id>http://yoursite.com/2016/06/12/raid_states/</id>
    <published>2016-06-12T13:06:42.000Z</published>
    <updated>2016-11-07T08:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Physical-Drive-States"><a href="#Physical-Drive-States" class="headerlink" title="Physical Drive States"></a>Physical Drive States</h3><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/54211F71-8626-4FEE-A37D-91E5F1464B74.png" alt=""></p>
<a id="more"></a>
<p>Unconfigured Good：表示该硬盘为空闲硬盘,没有加入到raid阵列中也没有设置为热备盘</p>
<p>Unconfigured Bad：表示该硬盘为空闲硬盘且硬盘有损坏</p>
<p>Rebuild:表示该盘正在重建数据</p>
<p>Foreign:表示该盘有外来的阵列信息，需要清除原来的阵列信息才能配置</p>
<p>readly –&gt; online  [ foreign –&gt; readly –&gt; online ]</p>
<h3 id="Virtual-Disk-States"><a href="#Virtual-Disk-States" class="headerlink" title="Virtual Disk States"></a>Virtual Disk States</h3><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/AB6872BA-666F-4EEE-A33C-4B0FE067ED95.png" alt=""></p>
<p>Virtual Disk States：指的是由物理硬盘做完raid后的虚拟磁盘（逻辑磁盘）</p>
<p>Optimal:表示整个raid的状态正常</p>
<p>Degraded:表示有一块物理硬盘出错或下线，导致raid进入降级模式</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="ftp://ftp.sgi.com/public/Technical%20Support/Pdf%20files/LSI/84016E_mr_sas_sw_ug.pdf" target="_blank" rel="external">megacli_user_guide.pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Physical-Drive-States&quot;&gt;&lt;a href=&quot;#Physical-Drive-States&quot; class=&quot;headerlink&quot; title=&quot;Physical Drive States&quot;&gt;&lt;/a&gt;Physical Drive States&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/54211F71-8626-4FEE-A37D-91E5F1464B74.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="raid" scheme="http://yoursite.com/tags/raid/"/>
    
  </entry>
  
  <entry>
    <title>cpuinfo</title>
    <link href="http://yoursite.com/2016/06/07/cpuinfo/"/>
    <id>http://yoursite.com/2016/06/07/cpuinfo/</id>
    <published>2016-06-07T12:39:35.000Z</published>
    <updated>2016-11-07T08:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="/proc/cpuinfo"></a>/proc/cpuinfo</h3><blockquote>
<p> Information about the processor, such as its type, make, model, and performance.</p>
</blockquote>
<h3 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h3><h4 id="CPU型号"><a href="#CPU型号" class="headerlink" title="CPU型号"></a>CPU型号</h4><pre><code># cat /proc/cpuinfo | grep vendor | uniq
vendor_id   : GenuineIntel
#  cat /proc/cpuinfo | grep &apos;model name&apos; | uniq
model name  : Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz
</code></pre><h4 id="CPU-架构"><a href="#CPU-架构" class="headerlink" title="CPU 架构"></a>CPU 架构</h4><pre><code># lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
......
</code></pre><a id="more"></a>
<h4 id="物理CPU个数"><a href="#物理CPU个数" class="headerlink" title="物理CPU个数"></a>物理CPU个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;physical id&quot; | sort -u | wc -l
2
</code></pre><h4 id="单个物理CPU中Core个数"><a href="#单个物理CPU中Core个数" class="headerlink" title="单个物理CPU中Core个数"></a>单个物理CPU中Core个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq
cpu cores   : 8
</code></pre><h4 id="所有物理CPU上的Core个数（core-id-数量）"><a href="#所有物理CPU上的Core个数（core-id-数量）" class="headerlink" title="所有物理CPU上的Core个数（core id 数量）"></a>所有物理CPU上的Core个数（core id 数量）</h4><pre><code># cat /proc/cpuinfo | grep &quot;core id&quot; | uniq |  wc -l
32
</code></pre><h4 id="逻辑CPU个数"><a href="#逻辑CPU个数" class="headerlink" title="逻辑CPU个数"></a>逻辑CPU个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l
32
</code></pre><h4 id="超线程（HT）技术"><a href="#超线程（HT）技术" class="headerlink" title="超线程（HT）技术"></a>超线程（HT）技术</h4><blockquote>
<p>number of processing units = number of cores [ no hyper threading ] </p>
<p>number of processing units = number of cores * 2 [ hyper threading present ]</p>
</blockquote>
<pre><code># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq
cpu cores   : 8
# cat /proc/cpuinfo | grep &quot;siblings&quot; | sort -u
siblings    : 16
# lscpu | grep Thread
Thread(s) per core:    2
</code></pre><h4 id="重要字段含义"><a href="#重要字段含义" class="headerlink" title="重要字段含义"></a>重要字段含义</h4><ul>
<li>processor 逻辑处理器的唯一标识符</li>
<li>physical id 每个物理封装的唯一标识符</li>
<li>core id 每个内核的唯一标识符</li>
<li>siblings 位于相同物理封装中的逻辑处理器的数量</li>
<li>cpu cores 位于相同物理封装中的内核数量</li>
</ul>
<p>各字段关系如下图所示：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/5793DDE2-40C0-4147-AD14-C85C1574C2DE.png" alt=""> </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.binarytides.com/linux-check-processor/" target="_blank" rel="external">How to check processor and cpu details on Linux</a><br><a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/s2-proc-cpuinfo.html" target="_blank" rel="external">Deployment_Guide/s2-proc-cpuinfo</a><br><a href="http://blog.csdn.net/sycflash/article/details/6643492" target="_blank" rel="external">CPU信息/proc/cpuinfo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;proc-cpuinfo&quot;&gt;&lt;a href=&quot;#proc-cpuinfo&quot; class=&quot;headerlink&quot; title=&quot;/proc/cpuinfo&quot;&gt;&lt;/a&gt;/proc/cpuinfo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; Information about the processor, such as its type, make, model, and performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;信息查看&quot;&gt;&lt;a href=&quot;#信息查看&quot; class=&quot;headerlink&quot; title=&quot;信息查看&quot;&gt;&lt;/a&gt;信息查看&lt;/h3&gt;&lt;h4 id=&quot;CPU型号&quot;&gt;&lt;a href=&quot;#CPU型号&quot; class=&quot;headerlink&quot; title=&quot;CPU型号&quot;&gt;&lt;/a&gt;CPU型号&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cat /proc/cpuinfo | grep vendor | uniq
vendor_id   : GenuineIntel
#  cat /proc/cpuinfo | grep &amp;apos;model name&amp;apos; | uniq
model name  : Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;CPU-架构&quot;&gt;&lt;a href=&quot;#CPU-架构&quot; class=&quot;headerlink&quot; title=&quot;CPU 架构&quot;&gt;&lt;/a&gt;CPU 架构&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
......
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="cpuinfo" scheme="http://yoursite.com/tags/cpuinfo/"/>
    
  </entry>
  
  <entry>
    <title>iostat查看磁盘IO信息</title>
    <link href="http://yoursite.com/2016/05/27/iostat/"/>
    <id>http://yoursite.com/2016/05/27/iostat/</id>
    <published>2016-05-27T03:19:17.000Z</published>
    <updated>2016-11-07T08:43:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、iostat简介"><a href="#一、iostat简介" class="headerlink" title="一、iostat简介"></a>一、iostat简介</h3><blockquote>
<p>iostat - Report Central Processing Unit (CPU) statistics and input/out-put statistics for devices and partitions.</p>
</blockquote>
<p>iostat 用于输出CPU和磁盘I/O相关的统计信息。</p>
<a id="more"></a>
<p>选项如下：</p>
<pre><code>-c     The  -c  option  is exclusive of the -d option and displays only
       the CPU usage report.  //仅显示CPU统计信息，与-d选项互斥

-d     The -d option is exclusive of the -c option  and  displays  only
       the device utilization report. //仅显示磁盘统计信息，与-c选项互斥

-k     Display statistics in kilobytes per second instead of blocks per
       second.  Data displayed are valid  only  with  kernels  2.4  and
       newer. // 以KB为单位显示每秒的磁盘请求数，默认单位块

 -p device | ALL
       The -p option is exclusive of the -x option and displays statis-
       tics for block devices and all their partitions that are used by
       the  system.   If  a device name is entered on the command line,
       then statistics for it and all  its  partitions  are  displayed.
       Last,  the ALL keyword indicates that statistics have to be dis-
       played for all the block devices and partitions defined  by  the
       system,  including  those  that have never been used.  Note that
       this option works only with post 2.5 kernels. 
       // 用于显示块设备及系统分区的统计信息，与-x选项互斥

-t     Print the time for each report displayed.

-V     Print version number and usage then exit.

-x     Display extended statistics.  This option is exclusive of the -p
       one,   and   works   with   post  2.5  kernels  since  it  needs
       /proc/diskstats file or a mounted sysfs to get  the  statistics.
       This  option may also work with older kernels (e.g. 2.4) only if
       extended statistics are available in /proc/partitions (the  ker-
       nel needs to be patched for that).
</code></pre><h3 id="二、iostat的简单使用"><a href="#二、iostat的简单使用" class="headerlink" title="二、iostat的简单使用"></a>二、iostat的简单使用</h3><pre><code># iostat  // 显示CPU和设备吞吐率的统计信息
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/26/2016  _x86_64_    (2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
            0.05    0.00    0.07    0.01    0.00   99.87

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               0.76         3.69        12.60   60628026  206899224
</code></pre><p>输出项说明：</p>
<p>%user:  在用户级别运行所使用的 CPU 的百分比。</p>
<p>%nice:  nice 操作所使用的 CPU 的百分比。</p>
<p>%system:    在核心级别（kernel）运行所使用 CPU 的百分比。</p>
<p>%iowait:    CPU 等待硬件 I/O 所占用 CPU 的百分比。</p>
<p>%steal: 当管理程序（hypervisor）为另一个虚拟进程提供服务而等待虚拟 CPU 的百分比。</p>
<p>%idle:  CPU 空闲时间的百分比。</p>
<p>tps:    每秒钟物理设备的 I/O 传输总量。</p>
<p>[MB/KB/B]lk_read:   读入的数据总量，单位为MB/KB/块。</p>
<p>[MB/KB/B]lk_wrtn    :写入的数据总量，单位为MB/KB/块。</p>
<p>[MB/KB/B]lk_read/s: 每秒从驱动器读入的数据量，单位为MB/KB/块。</p>
<p>[MB/KB/B]lk_wrtn/s: 每秒向驱动器写入的数据量，单位为MB/KB/块。</p>
<pre><code># iostat -d 2  //每隔2秒显示一次设备吞吐率的统计信息（单位为 块/s）
# iostat -dk 2 //每隔2秒显示一次设备吞吐率的统计信息（单位为 KB/s）
# iostat -dk 2 3 // 每隔2秒显示一次，共显示3次

# iostat -x sda  //显示 sda 设备扩展统计信息
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/26/2016  _x86_64_    (2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
            0.05    0.00    0.07    0.01    0.00   99.87

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
sda               0.00     0.86    0.05    0.72     3.69    12.60    21.36     0.00    1.83   0.75   0.06
# iostat -p sda  //显示sda 及上面所有分区的统计信息
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/26/2016  _x86_64_    (2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
            0.05    0.00    0.07    0.01    0.00   99.87

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               0.76         3.69        12.60   60628026  206904888
sda1              0.00         0.00         0.00       4994        512
sda2              0.04         3.52         2.22   57853834   36386304
sda3              0.72         0.17        10.38    2763066  170501848
sda4              0.00         0.00         0.00         20          0
sda5              0.00         0.00         0.00       4816      16224
</code></pre><p>输出项说明：</p>
<p>rrqm/s: 将读入请求合并后，每秒发送到设备的读入请求数。</p>
<p>wrqm/s: 将写入请求合并后，每秒发送到设备的写入请求数。</p>
<p>r/s:    每秒发送到设备的读入请求数。</p>
<p>w/s:    每秒发送到设备的写入请求数。</p>
<p>rsec/s: 每秒从设备读入的扇区数。</p>
<p>wsec/s: 每秒向设备写入的扇区数。</p>
<p>rkB/s:  每秒从设备读入的数据量，单位为 KB/s。</p>
<p>wkB/s:  每秒向设备写入的数据量，单位为 KB/s。</p>
<p>rMB/s:  每秒从设备读入的数据量，单位为 MB/s。</p>
<p>wMB/s:  每秒向设备写入的数据量，单位为 MB/s。</p>
<p>avgrq-sz:   发送到设备的请求的平均大小，单位为扇区。</p>
<p>avgqu-sz:   发送到设备的请求的平均队列长度。</p>
<p>await:  I/O请求平均执行时间。包括发送请求和执行的时间。单位为毫秒。</p>
<p>svctm:  发送到设备的I/O请求的平均执行时间。单位为毫秒。</p>
<p>%util:  在I/O请求发送到设备期间，占用CPU时间的百分比。用于显示设备的带宽利用率。当这个值接近100%时，表示设备带宽已经占满。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、iostat简介&quot;&gt;&lt;a href=&quot;#一、iostat简介&quot; class=&quot;headerlink&quot; title=&quot;一、iostat简介&quot;&gt;&lt;/a&gt;一、iostat简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;iostat - Report Central Processing Unit (CPU) statistics and input/out-put statistics for devices and partitions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iostat 用于输出CPU和磁盘I/O相关的统计信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="iostat" scheme="http://yoursite.com/tags/iostat/"/>
    
  </entry>
  
  <entry>
    <title>sar系统状态信息统计</title>
    <link href="http://yoursite.com/2016/05/26/sar/"/>
    <id>http://yoursite.com/2016/05/26/sar/</id>
    <published>2016-05-26T03:15:51.000Z</published>
    <updated>2016-11-07T08:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、sar-简介"><a href="#一、sar-简介" class="headerlink" title="一、sar 简介"></a>一、sar 简介</h3><blockquote>
<p>sar - Collect, report, or save system activity information.</p>
<p>Usage: sar [ options ] [ interval  count  ]    </p>
<p> sar 选项 [输出间隔时间] [输出次数(默认为1)]</p>
</blockquote>
<p>sar命令是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。</p>
<p>sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。</p>
<a id="more"></a>
<pre><code># cat /etc/cron.d/sysstat
# Run system activity accounting tool every 10 minutes
*/10 * * * * root /usr/lib64/sa/sa1 1 1
# Generate a daily summary of process accounting at 23:53
53 23 * * * root /usr/lib64/sa/sa2 -A   //将当天的汇总信息写入文件 /var/log/sa/saDD

sa1: stores system activities in binary data file. sa1 depends on sadc for this purpose. sa1 runs from cron.
sa2: creates daily summary of the collected statistics. sa2 runs from cron.
</code></pre><h3 id="二、sar-常用命令"><a href="#二、sar-常用命令" class="headerlink" title="二、sar 常用命令"></a>二、sar 常用命令</h3><h4 id="2-1-CPU-Usage"><a href="#2-1-CPU-Usage" class="headerlink" title="2.1 CPU Usage"></a>2.1 CPU Usage</h4><blockquote>
<p>sar -u:   Displays CPU usage for the current day that was collected until that point.</p>
<p>sar -u ALL:  Same as “sar -u” but displays additional fields.</p>
<p>sar -P ALL:  indicates that it should displays statistics for ALL the individual Cores.</p>
<p>sar -u -f /var/log/sa/sa10:  Displays CPU usage for the 10day of the month from the sa10 file.</p>
</blockquote>
<pre><code># sar -u  1 3
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/24/2016  _x86_64_    (2 CPU)

06:23:59 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
06:24:00 PM     all      0.00      0.00      0.00      0.00      0.00    100.00
06:24:01 PM     all      0.00      0.00      0.50      0.00      0.00     99.50
06:24:02 PM     all      0.50      0.00      0.50      0.00      0.00     99.00
Average:        all      0.17      0.00      0.33      0.00      0.00     99.50

# sar -P ALL 1 1
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/24/2016  _x86_64_    (2 CPU)

06:28:13 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
06:28:14 PM     all      0.00      0.00      0.00      0.00      0.00    100.00
06:28:14 PM       0      0.00      0.00      0.00      0.00      0.00    100.00
06:28:14 PM       1      0.00      0.00      0.00      0.00      0.00    100.00

Average:        CPU     %user     %nice   %system   %iowait    %steal     %idle
Average:        all      0.00      0.00      0.00      0.00      0.00    100.00
Average:          0      0.00      0.00      0.00      0.00      0.00    100.00
Average:          1      0.00      0.00      0.00      0.00      0.00    100.00

%iowait: Percentage of time that the CPU or CPUs were idle during which the  system  had an outstanding disk I/O request.
         显示用于等待I/O操作占用 CPU 总时间的百分比，若该值过高则表示硬盘存在I/O瓶颈
%idle: Percentage of time that the CPU or CPUs were idle and the system did  not  have an outstanding disk I/O request.
         显示 CPU 空闲时间占用 CPU 总时间的百分比。
</code></pre><h4 id="2-2-Memory-Free-and-Used"><a href="#2-2-Memory-Free-and-Used" class="headerlink" title="2.2 Memory Free and Used"></a>2.2 Memory Free and Used</h4><blockquote>
<p> sar -r : Report memory utilization statistics.</p>
</blockquote>
<pre><code># sar -r 1 3
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/25/2016  _x86_64_    (2 CPU)

10:20:16 AM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit
10:20:17 AM    157356   1764852     91.81    207948   1288836    791016      7.82
10:20:18 AM    157356   1764852     91.81    207948   1288836    791016      7.82
10:20:19 AM    157356   1764852     91.81    207948   1288836    791016      7.82
Average:       157356   1764852     91.81    207948   1288836    791016      7.82
</code></pre><h4 id="2-3-Swap-Space-Used"><a href="#2-3-Swap-Space-Used" class="headerlink" title="2.3 Swap Space Used"></a>2.3 Swap Space Used</h4><blockquote>
<p>sar -S: Reports  swap statistics.</p>
</blockquote>
<pre><code># sar -S 1 3
Linux 2.6.32-573.el6.x86_64 (Mr-zhao)   05/26/2016  _x86_64_    (2 CPU)

10:05:34 AM kbswpfree kbswpused  %swpused  kbswpcad   %swpcad
10:05:35 AM   8183488      7484      0.09       532      7.11
10:05:36 AM   8183488      7484      0.09       532      7.11
10:05:37 AM   8183488      7484      0.09       532      7.11
Average:      8183488      7484      0.09       532      7.11
</code></pre><h4 id="2-4-Overall-I-O-Activities"><a href="#2-4-Overall-I-O-Activities" class="headerlink" title="2.4 Overall I/O Activities"></a>2.4 Overall I/O Activities</h4><blockquote>
<p>sar -b: reports I/O statistics.</p>
</blockquote>
<pre><code># sar -b 1 3
Linux 2.6.32-504.23.4.el6.x86_64 (tjtx-93-96.58os.org)  05/26/2016  _x86_64_    (24 CPU)

10:12:27 AM       tps      rtps      wtps   bread/s   bwrtn/s
10:12:28 AM     49.49      0.00     49.49      0.00    412.12
10:12:29 AM      0.00      0.00      0.00      0.00      0.00
10:12:30 AM      0.00      0.00      0.00      0.00      0.00
Average:        16.39      0.00     16.39      0.00    136.45
</code></pre><h4 id="2-5-Individual-Block-Device-I-O-Activities"><a href="#2-5-Individual-Block-Device-I-O-Activities" class="headerlink" title="2.5 Individual Block Device I/O Activities"></a>2.5 Individual Block Device I/O Activities</h4><blockquote>
<p>sar -d: To identify the activities by the individual block devices </p>
<p> -p: Pretty-print  device names</p>
</blockquote>
<pre><code># sar -d 1 3
Linux 2.6.32-504.23.4.el6.x86_64 (tjtx-93-96.58os.org)  05/26/2016  _x86_64_    (24 CPU)

10:17:42 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:17:43 AM    dev8-0      1.98      0.00    847.52    428.00      0.01      3.00      1.50      0.30

10:17:43 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:17:44 AM    dev8-0      3.00      0.00     96.00     32.00      0.00      0.00      0.00      0.00

10:17:44 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:17:45 AM    dev8-0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

Average:          DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
Average:       dev8-0      1.67      0.00    317.33    190.40      0.00      1.20      0.60      0.10
# sar -dp 1 3
Linux 2.6.32-504.23.4.el6.x86_64 (tjtx-93-96.58os.org)  05/26/2016  _x86_64_    (24 CPU)

10:21:36 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:21:37 AM       sda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

10:21:37 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:21:38 AM       sda     10.00      0.00    184.00     18.40      0.00      0.30      0.30      0.30

10:21:38 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:21:39 AM       sda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

Average:          DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
Average:          sda      3.36      0.00     61.74     18.40      0.00      0.30      0.30      0.10
</code></pre><h4 id="2-6-Display-context-switch-per-second"><a href="#2-6-Display-context-switch-per-second" class="headerlink" title="2.6 Display context switch per second"></a>2.6 Display context switch per second</h4><blockquote>
<p>sar -w: Reports the total number of processes created per second, and total number of context switches per second.    </p>
</blockquote>
<pre><code># sar -w 1 3
Linux 2.6.32-504.23.4.el6.x86_64 (tjtx-93-96.58os.org)  05/26/2016  _x86_64_    (24 CPU)

10:33:49 AM    proc/s   cswch/s
10:33:50 AM      8.08    732.32
10:33:51 AM     10.00    964.00
10:33:52 AM      8.08    686.87
Average:         8.72    794.97
</code></pre><h4 id="2-7-Reports-run-queue-and-load-average"><a href="#2-7-Reports-run-queue-and-load-average" class="headerlink" title="2.7 Reports run queue and load average"></a>2.7 Reports run queue and load average</h4><blockquote>
<p>sar -q: Reports the run queue size and load average of last 1 minute, 5 minutes, and 15 minutes.</p>
</blockquote>
<pre><code># sar -q 1 3
Linux 2.6.32-504.el6.x86_64 (tjtx-83-97.58os.org)   05/26/2016  _x86_64_    (32 CPU)

10:58:55 AM   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15
10:58:56 AM         4       874      0.79      0.58      0.51
10:58:57 AM         0       873      0.79      0.58      0.51
10:58:58 AM         0       865      0.79      0.58      0.51
Average:            1       871      0.79      0.58      0.51
</code></pre><h4 id="2-8-Report-network-statistics"><a href="#2-8-Report-network-statistics" class="headerlink" title="2.8 Report network statistics"></a>2.8 Report network statistics</h4><blockquote>
<p>sar  -n { keyword [,…] | ALL } : Report network statistics.</p>
<p>Possible  keywords  are  DEV,  EDEV, NFS, NFSD, SOCK, IP, EIP, ICMP, EICMP, TCP, ETCP,<br>              UDP, SOCK6, IP6, EIP6, ICMP6, EICMP6 and UDP6.</p>
<p>   DEV – Displays network devices vital statistics for eth0, eth1, etc.</p>
</blockquote>
<pre><code># sar -n DEV 1 1
Linux 2.6.32-504.23.4.el6.x86_64 (tjtx-93-96.58os.org)  05/26/2016  _x86_64_    (24 CPU)

11:06:32 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
11:06:33 AM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00
11:06:33 AM      eth0    175.76    173.74     27.92     31.94      0.00      0.00      0.00
11:06:33 AM      eth1      0.00      0.00      0.00      0.00      0.00      0.00      0.00
11:06:33 AM      eth2      0.00      0.00      0.00      0.00      0.00      0.00      0.00
11:06:33 AM      eth3      0.00      0.00      0.00      0.00      0.00      0.00      0.00


Average:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
Average:           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00
Average:         eth0    175.76    173.74     27.92     31.94      0.00      0.00      0.00
Average:         eth1      0.00      0.00      0.00      0.00      0.00      0.00      0.00
Average:         eth2      0.00      0.00      0.00      0.00      0.00      0.00      0.00
Average:         eth3      0.00      0.00      0.00      0.00      0.00      0.00      0.00
# sar -n DEV  | grep eth0
</code></pre><h4 id="2-9-Report-Sar-Data-Using-Start-Time"><a href="#2-9-Report-Sar-Data-Using-Start-Time" class="headerlink" title="2.9 Report Sar Data Using Start Time"></a>2.9 Report Sar Data Using Start Time</h4><blockquote>
<p>-s [ hh:mm:ss ]</p>
<p>   Set  the  starting  time of the data, causing the sar command to extract records time-<br>              tagged at, or following, the time specified.</p>
<p>When you view historic sar data from the /var/log/sa/saXX file using “sar -f” option, it displays all the sar data for that specific day starting from 12:00 a.m for that day.</p>
<p>Using “-s hh:mi:ss” option, you can specify the start time. For example, if you specify “sar -s 10:00:00”, it will display the sar data starting from 10 a.m (instead of starting from midnight) as shown below.</p>
</blockquote>
<pre><code># sar -q -f /var/log/sa/sa23 -s 10:00:01
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.thegeekstuff.com/2011/03/sar-examples/" target="_blank" rel="external">10 Useful Sar (Sysstat) Examples for UNIX / Linux Performance Monitoring</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、sar-简介&quot;&gt;&lt;a href=&quot;#一、sar-简介&quot; class=&quot;headerlink&quot; title=&quot;一、sar 简介&quot;&gt;&lt;/a&gt;一、sar 简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;sar - Collect, report, or save system activity information.&lt;/p&gt;
&lt;p&gt;Usage: sar [ options ] [ interval  count  ]    &lt;/p&gt;
&lt;p&gt; sar 选项 [输出间隔时间] [输出次数(默认为1)]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sar命令是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。&lt;/p&gt;
&lt;p&gt;sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。&lt;/p&gt;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="sar" scheme="http://yoursite.com/tags/sar/"/>
    
  </entry>
  
  <entry>
    <title>Screen会话管理</title>
    <link href="http://yoursite.com/2016/05/23/screen/"/>
    <id>http://yoursite.com/2016/05/23/screen/</id>
    <published>2016-05-23T12:47:12.000Z</published>
    <updated>2016-11-07T08:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<p><a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">GNU’s Screen 官方站点</a></p>
<h3 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h3><h4 id="会话恢复"><a href="#会话恢复" class="headerlink" title="会话恢复"></a>会话恢复</h4><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。</p>
<h4 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h4><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p>
<a id="more"></a>
<h4 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h4><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>
<h3 id="三、常用参数"><a href="#三、常用参数" class="headerlink" title="三、常用参数"></a>三、常用参数</h3><pre><code>screen -S yourname   //新建一个叫yourname的session
screen -ls（或者screen -list） //列出当前所有的session
screen -r yourname  //回到yourname这个session
screen -d yourname   //远程detach某个session，转移到当前终端
screen -d -r yourname  //结束当前session并回到yourname这个session

ctrl+a x -&gt; 锁住当前的 window，需用用户密码解锁
ctrl-a k -&gt; kill window，强行关闭当前的 window
ctrl+a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响
</code></pre><h3 id="四、使用实例"><a href="#四、使用实例" class="headerlink" title="四、使用实例"></a>四、使用实例</h3><h4 id="创建新窗口"><a href="#创建新窗口" class="headerlink" title="创建新窗口"></a>创建新窗口</h4><pre><code># screen  -S text   // 创建一个名字为text的会话，会打开一个默认的shell环境（一般都是bash shell）
# vi file.txt
</code></pre><p>或</p>
<pre><code># screen vi file.txt   //退出vi将退出该会话
</code></pre><h3 id="会话分离与恢复"><a href="#会话分离与恢复" class="headerlink" title="会话分离与恢复"></a>会话分离与恢复</h3><p>在screen窗口键入C-a d，Screen会给出detached，暂时中断会话。</p>
<p>找到并恢复会话：</p>
<pre><code># screen -ls    //查看当前会话
There is a screen on:
10526.test  (05/23/2016 07:48:58 PM)    (Detached)
1 Socket in /var/run/screen/S-root. 

# screen -r  test  // 进入被中断的会话，screen的名字和编号都行
</code></pre><h4 id="清除-dead会话"><a href="#清除-dead会话" class="headerlink" title="清除 dead会话"></a>清除 dead会话</h4><pre><code># screen -wipe
</code></pre><h4 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h4><pre><code>Ctrl-a k  // kill会话，同时kill会话里的进程
Ctrl-a :   // 然后输入quit命令退出Screen会话,会杀死所有窗口并退出其中运行的所有程序
</code></pre><h3 id="会话共享-1"><a href="#会话共享-1" class="headerlink" title="会话共享"></a>会话共享</h3><pre><code># screen -x  screenname

-x  Attach to a not detached screen. (Multi display mode).
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;p&gt;GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/screen/&quot;&gt;GNU’s Screen 官方站点&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、功能&quot;&gt;&lt;a href=&quot;#二、功能&quot; class=&quot;headerlink&quot; title=&quot;二、功能&quot;&gt;&lt;/a&gt;二、功能&lt;/h3&gt;&lt;h4 id=&quot;会话恢复&quot;&gt;&lt;a href=&quot;#会话恢复&quot; class=&quot;headerlink&quot; title=&quot;会话恢复&quot;&gt;&lt;/a&gt;会话恢复&lt;/h4&gt;&lt;p&gt;只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。&lt;/p&gt;
&lt;h4 id=&quot;多窗口&quot;&gt;&lt;a href=&quot;#多窗口&quot; class=&quot;headerlink&quot; title=&quot;多窗口&quot;&gt;&lt;/a&gt;多窗口&lt;/h4&gt;&lt;p&gt;在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="screen" scheme="http://yoursite.com/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础知识备忘</title>
    <link href="http://yoursite.com/2016/05/20/ansible/"/>
    <id>http://yoursite.com/2016/05/20/ansible/</id>
    <published>2016-05-20T08:25:38.000Z</published>
    <updated>2016-11-07T05:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、体系结构"><a href="#一、体系结构" class="headerlink" title="一、体系结构"></a>一、体系结构</h3><p>ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系统安装以外的批量系统配置、批量任务执行及批量程序部署等功能。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/25.png" alt=""></p>
<ul>
<li>Inventory：主机库，定义可控制的主机</li>
<li>Modules：基于模块化设计，通过模块来实现批量部署</li>
<li>playbook：剧本，使用YAML编写的声明性的配置文件</li>
<li>plugins: 插件，完成日志记录、邮件等功能</li>
</ul>
<h3 id="二、-特点"><a href="#二、-特点" class="headerlink" title="二、 特点"></a>二、 特点</h3><ul>
<li>高度模块化，借助模块完成各种任务</li>
<li>agentless，无需在被控制端安装agent</li>
<li>默认基于ssh协议向被控制端发送操作指令<ul>
<li>基于密钥认证</li>
<li>在inventory文件中指定账号和密码</li>
</ul>
</li>
<li>批量任务执行可写成剧本playbook</li>
<li>幂等性：不会重复执行相同操作</li>
</ul>
<h3 id="三、简单使用"><a href="#三、简单使用" class="headerlink" title="三、简单使用"></a>三、简单使用</h3><h4 id="3-1-ssh免密钥登录"><a href="#3-1-ssh免密钥登录" class="headerlink" title="3.1 ssh免密钥登录"></a>3.1 ssh免密钥登录</h4><pre><code># ssh-keygen -t rsa -P &apos;&apos;  
# ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.249.6.64
# ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.48.156.8
</code></pre><h4 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h4><p>ansible-doc</p>
<pre><code>Options:

-l, --list            List available modules  //列出所有模块
-s, --snippet         Show playbook snippet for specified module(s) //查看指定模块用法

更多信息请参考manual手册
</code></pre><p>ansible</p>
<p> ansible <host-pattern>  [-f forks][-m module_name] [-a args] [options]</host-pattern></p>
<pre><code>Options:

  -a MODULE_ARGS, --args=MODULE_ARGS
                    module arguments   // 传递模块参数
  -f FORKS, --forks=FORKS  // 指定并发数
                    specify number of parallel processes to use
                    (default=5)
  -i INVENTORY, --inventory-file=INVENTORY 
                    specify inventory host file
                    (default=/etc/ansible/hosts)    
  -m MODULE_NAME, --module-name=MODULE_NAME
                    module name to execute (default=command)   

 更多信息请参考manual手册        
</code></pre><p>ansible-playbook  </p>
<p>ansible-playbook <filename.yml> … [options]             </filename.yml></p>
<h3 id="四、模块"><a href="#四、模块" class="headerlink" title="四、模块"></a>四、模块</h3><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>命令模块: ansible默认模块，用于在远程执行命令，command模块并不支持shell变量和管道等，若想使用shell来执行，应使用shell模块。</p>
<pre><code># ansible-doc -l | grep ^command
command              Executes a command on a remote node                        

# ansible 10.249.6.64 -m command -a &quot;date&quot;
10.249.6.64 | success | rc=0 &gt;&gt;
Wed May 11 21:21:35 CST 2016                        
</code></pre><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>ping模块：测试指定主机是否能连接</p>
<pre><code># ansible-doc -l | grep  -w ^ping
ping                 Try to connect to host and return `pong&apos; on success.                  

# ansible 10.249.6.64 -m ping
10.249.6.64 | success &gt;&gt; {
    &quot;changed&quot;: false,
    &quot;ping&quot;: &quot;pong&quot;
}
</code></pre><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><p>计划任务模块 ：管理计划任务</p>
<pre><code># ansible-doc -l | grep  ^cron
cron                 Manage cron.d and crontab entries.

# ansible-doc  -s cron
- name: Manage cron.d and crontab entries.
action: cron
  backup                 # If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup&apos; variable by this module.
  cron_file              # If specified, uses this file in cron.d instead of an individual user&apos;s crontab.
  day                    # Day of the month the job should run ( 1-31, *, */2, etc )
  hour                   # Hour when the job should run ( 0-23, *, */2, etc )
  job                    # The command to execute. Required if state=present.
  minute                 # Minute when the job should run ( 0-59, *, */2, etc )
  month                  # Month of the year the job should run ( 1-12, *, */2, etc )
  name                   # Description of a crontab entry.
  reboot                 # If the job should be run at reboot. This option is deprecated. Users should use special_time.
  special_time           # Special time specification nickname.
  state                  # Whether to ensure the job is present or absent.
  user                   # The specific user who&apos;s crontab should be modified.
  weekday                # Day of the week that the job should run ( 0-7 for Sunday - Saturday, *, etc )        

# ansible 10.249.6.64 -m cron -a &apos;name=&quot;sync time&quot; minute=&quot;*/10&quot; \ 
job=&quot;/usr/sbin/ntpdate 0.centos.pool.ntp.org &amp;&amp; hwclock -w&quot; &apos;

10.249.6.64 | success &gt;&gt; {
    &quot;changed&quot;: true,
    &quot;jobs&quot;: [
    &quot;sync time&quot;
    ]
}                   
</code></pre><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>用户模块：管理用户账户</p>
<pre><code># ansible-doc -l | grep ^user
user                 Manage user accounts  

# ansible 10.249.6.64 -m user -a &apos;name=work shell=/bin/bash home=/home/www&apos;   //添加用户
10.249.6.64 | success &gt;&gt; {
&quot;changed&quot;: true,
&quot;comment&quot;: &quot;&quot;,
&quot;createhome&quot;: true,
&quot;group&quot;: 500,
&quot;home&quot;: &quot;/home/www&quot;,
&quot;name&quot;: &quot;work&quot;,
&quot;shell&quot;: &quot;/bin/bash&quot;,
&quot;state&quot;: &quot;present&quot;,
&quot;system&quot;: false,
&quot;uid&quot;: 500
}        

# ansible 10.249.6.64 -m user -a &apos;name=work state=absent&apos;  // 删除用户
10.249.6.64 | success &gt;&gt; {
&quot;changed&quot;: true,
&quot;force&quot;: false,
&quot;name&quot;: &quot;work&quot;,
&quot;remove&quot;: false,
&quot;state&quot;: &quot;absent&quot;
}             
</code></pre><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>copy模块：文件复制</p>
<pre><code>#  ansible-doc -l | grep ^copy
copy                 Copies files to remote locations. 

# ansible-doc -s copy
- name: Copies files to remote locations.
action: copy
  backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
  content                # When used instead of &apos;src&apos;, sets the contents of a file directly to the specified value.
  dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.
  directory_mode         # When doing a recursive copy set the mode for the directories. If this is not set we will default the system defaults.
  force                  # the default is `yes&apos;, which will replace the remote file when contents are different than the source.  If `no&apos;, the file will only be transferred if the destination does not exist.
  src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with &quot;/&quot;, only inside contents of that directory are copied to destination. Otherwise, if it does not end with &quot;/&quot;, the directory itself with all contents is copied. This behavior is similar to Rsync.
  validate               # The validation command to run before copying into place.  The path to the file to validate is passed in via &apos;%s&apos; which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won&apos;t work.

# ansible 10.249.6.64 -m copy -a &quot;src=/root/test.txt dest=/tmp/&quot;
10.249.6.64 | success &gt;&gt; {
&quot;changed&quot;: true,
&quot;dest&quot;: &quot;/tmp/test.txt&quot;,
&quot;gid&quot;: 0,
&quot;group&quot;: &quot;root&quot;,
&quot;md5sum&quot;: &quot;d41d8cd98f00b204e9800998ecf8427e&quot;,
&quot;mode&quot;: &quot;0644&quot;,
&quot;owner&quot;: &quot;root&quot;,
&quot;size&quot;: 0,
&quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1463662606.99-26627840524349/source&quot;,
&quot;state&quot;: &quot;file&quot;,
&quot;uid&quot;: 0
}   
# ansible 10.249.6.64 -m copy -a &quot;content=&apos;hello world&apos; dest=/tmp/test.txt&quot;
# ansible 10.249.6.64 -m copy -a &apos;src=/root/test.txt dest=/tmp/test.txt owner=evans group=evans mode=600 backup=yes&apos;
</code></pre><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>file模块：文件模块，设置文件属性</p>
<pre><code># ansible-doc -l | grep -w ^file
file                 Sets attributes of files   
# ansible 10.249.6.64 -m file -a &quot;src=/tmp/test.txt path=/tmp/test.link state=link&quot;
# ansible 10.249.6.64 -m file -a &quot;owner=evans group=evans mode=600 path=/tmp/test.txt&quot;
</code></pre><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>service模块： 服务模块，管理系统服务</p>
<pre><code># ansible-doc -l | grep ^service
service              Manage services.
# ansible-doc -s service
 - name: Manage services.
 action: service
  arguments              # Additional arguments provided on the command line
  enabled                # Whether the service should start on boot. *At least one of state and enabled are required.*
  name=                  # Name of the service.
  pattern                # If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps&apos; command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.
  runlevel               # For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.
  sleep                  # If the service is being `restarted&apos; then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.
  state                  # `started&apos;/`stopped&apos; are idempotent actions that will not run commands unless necessary.  `restarted&apos; will always bounce the service.  `reloaded&apos; will always reload. *At least one of state and enabled are required.*
  # ansible 10.249.6.64 -m service -a &quot;name=mysqld state=restarted enabled=true&quot;  //重启mysql服务并设置开机自启动
</code></pre><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>shell模块：远程执行命令</p>
<pre><code># ansible 10.249.6.64 -m shell -a &apos;date&apos;
10.249.6.64 | success | rc=0 &gt;&gt;
Thu May 19 21:20:51 CST 2016    
</code></pre><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p>script模块：脚本模块，远程主机运行脚本</p>
<pre><code># ansible-doc  -l | grep ^script
script               Runs a local script on a remote node after transferring it..
# ansible 10.249.6.64 -m script -a &apos;/root/test.sh&apos;  //在远程主机上运行脚本，并没有拷贝到指定目录
10.249.6.64 | success &gt;&gt; {
&quot;changed&quot;: true,
&quot;rc&quot;: 0,
&quot;stderr&quot;: &quot;&quot;,
&quot;stdout&quot;: &quot;&quot;
}   
</code></pre><h4 id="yum、apt"><a href="#yum、apt" class="headerlink" title="yum、apt"></a>yum、apt</h4><p>yum模块和apt模块：包管理模块</p>
<pre><code>yum                  Manages packages with the `yum&apos; package manager
apt                  Manages apt-packages
# ansible 10.249.6.64 -m yum -a &quot;name=tree state=present&quot;
# ansible 10.249.6.43 -m apt -a &quot;name=tree state=present&quot;
# ansible 10.249.6.43 -m apt -a &quot;name=tree state=absent&quot;
</code></pre><blockquote>
<p> state<br> Whether to install (<code>present&#39;,</code>latest’), or remove (`absent’) a package.</p>
</blockquote>
<h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><p>setup模块：收集主机信息，playbook运行时，会自动调用setup模块收集远程主机的相关信息（称为facts，如操作系统版本、ip地址、cpu数量等），这些信息保存于变量中，可在playbook中引用</p>
<pre><code># ansible-doc -l | grep  setup
setup                Gathers facts about remote hosts
# ansible-doc -s setup
- name: Gathers facts about remote hosts
 action: setup
  fact_path              # path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format
  filter                 # if supplied, only return facts that match this shell-style (fnmatch) wildcard.
# ansible 10.249.6.43 -m setup
# ansible 10.249.6.43 -m setup -a &apos;filter=ansible_eth0&apos;   //过滤信息
# ansible 10.249.6.64 -m setup --tree /tmp/test.txt  //将收集的信息输出到本地文件
</code></pre><p>更多模块信息请查看：<a href="http://docs.ansible.com/ansible/list_of_all_modules.html" target="_blank" rel="external">官方文档</a></p>
<h3 id="五、playbook"><a href="#五、playbook" class="headerlink" title="五、playbook"></a>五、playbook</h3><h4 id="5-1-YAML"><a href="#5-1-YAML" class="headerlink" title="5.1 YAML"></a>5.1 YAML</h4><p>YAML是一种可读性高的用来表达资料序列的语言，其语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。</p>
<p>所有的yaml文件都以”—“开头表示开始一个document，所有的列表元素以”-“开头，键值对用”:”，后面必须有空格。YAML文件扩展名通常为.yaml或.yml</p>
<h4 id="5-2-playbook简介"><a href="#5-2-playbook简介" class="headerlink" title="5.2 playbook简介"></a>5.2 playbook简介</h4><p>playbook是ansible管理配置、部署应用和编排的文件，可用来描述在远程主机上执行的策略或一组任务。</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块。</p>
<p>playbook使用YAML语言编写，文件名以.yaml或.yml结尾。此外playbook和模板文件（template）还可使用jinja2语法语法实现高级功能。</p>
<p>5.2.1 playbook的基本组成</p>
<ul>
<li>targets：指定要执行playbook的远程主机组</li>
<li>variables：定义playbook运行时需要使用的变量</li>
<li>tasks：要执行的任务</li>
<li>handlers：处理器，在某些条件下被触发的操作</li>
</ul>
<p>简单playbook示例：</p>
<pre><code># cat nginx.yml
---
- hosts: 10.249.6.43
  user: root
  vars:
    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf
  tasks:
  - name: install nginx
    apt: name=nginx state=latest
    when: ansible_distribution == &apos;Ubuntu&apos;

  - name: configration file
    tags: conf
    copy: src=/root/mirror.conf dest={{remote_conffile_path}}
    notify: restart nginx

  - name: start nginx
    service: name=nginx enabled=yes state=started

  handlers:
  - name: restart nginx
    service: name=nginx state=restarted
# ansible-playbook  nginx.yml   // 执行playbook
</code></pre><ul>
<li>hosts、user</li>
</ul>
<p>hosts用于指定要执行指定任务的主机，其可以是一个或多个由逗号分隔主机组；user则用于指定远程主机上的执行任务的用户，还能使用sudo</p>
<ul>
<li>task list、action</li>
</ul>
<p>task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个。如果中途发生错误，所有已执行任务都将回滚，因此，在更正playbook后重新执行一次即可。</p>
<p> task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致。</p>
<p> 每个task都应该有其name，用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出。</p>
<p>定义task的可以使用“action: module options”或“module: options”的格式，推荐使用后者以实现向后兼容例如：</p>
<pre><code>tasks:
- name: make sure apache is running
  service: name=httpd state=running
</code></pre><p> 在众多模块中，只有command和shell模块仅需要给定一个列表而无需使用“key=value”格式，例如：</p>
<pre><code>tasks:
- name: disable selinux
  command: /sbin/setenforce 0
</code></pre><p>shell模块执行多条命令       </p>
<pre><code>---
- name: update zabbix agent conf
shell: |     
   sed  -i &quot;/Hostname/d&quot; /usr/local/zabbix-agent-ops/etc/zabbix_agentd.conf
   wget -O /tmp/hostinfo.txt http://10.126.93.2/bak/hostinfo.txt
   IP=`ifconfig | egrep -A1 eth[0-9] | egrep  -o  addr:[0-9]+.[0-9]+.[0-9]+.[0-9]+ | awk -F: &apos;{print $2}&apos;`
   USE=`egrep -w  $IP /tmp/hostinfo.txt | awk &apos;{print $2}&apos;| uniq`
   HOST=`hostname | awk -F . &apos;{print $1}&apos;`
   echo &quot;Hostname=${USE}${HOST}&quot; &gt;&gt; /usr/local/zabbix-agent-ops/etc/zabbix_agentd.conf   
</code></pre><p>如果模块执行返回值不为零，即表示执行失败，任务会立即中止，后续任务不再执行。可以使用ignore_errors来忽略错误信息确保后续任务的执行。</p>
<pre><code>tasks:
   - name: run this command and ignore the result
     shell: /usr/bin/somecommand
     ignore_errors: yes
</code></pre><ul>
<li>handlers</li>
</ul>
<p>当关注的资源发生变化时触发一定的操作。handler是task列表，这些task与前述的task并没有本质上的不同。</p>
<p>“notify”这个action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，取而代之，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作。       </p>
<pre><code>- name: template configuration file
  template: src=/root/template.conf dest=/etc/template.conf

notify:
  - restart memcached
  - restart apache

handlers:
- name: restart memcached
  service: name=memcached state=restarted
- name: restart apache
  service: name=apache state=restarted
</code></pre><ul>
<li>vars</li>
</ul>
<p>变量名仅能由字母、数字和下划线组成，且只能以字母开头  </p>
<ul>
<li>when </li>
</ul>
<p>条件判断：如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提，这时就要用到条件判断。</p>
<pre><code>when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;

when: ansible_distribution == &apos;CentOS&apos; or ansible_distribution == &apos;RedHat&apos; and ansible_distribution_version|int &gt;=6
</code></pre><p>忽略此前某语句的错误并基于其结果（failed或者sucess）运行后面指定的语句:</p>
<pre><code>---
- hosts: 10.249.6.64
  user: root
  tasks:
    - name: false test
      command: /bin/false
      register: result
      ignore_errors: yes
    - name: when false  to do
      command: touch /tmp/1.txt
      when: result | failed
    - name: when success to do
      command: touch /tmp/2.txt
      when: result | success
    - name: when skip to do
      command: touch /tmp/3.txt
      when: result | skipped
</code></pre><ul>
<li>item</li>
</ul>
<p>item 迭代：当有需要重复性执行的任务时，可以使用迭代机制。其使用格式为将需要迭代的内容定义为item变量引用，并通过with_items语句来指明迭代的元素列表即可</p>
<pre><code>- name: install base software
  apt: pkg={{ item }} state=present force=yes
  with_items:
    - gcc
    - g++
    - mysql-client-5.5
    - libmcrypt-dev
    - libmysqlclient-dev
    - libgmp10
    - vim
    - openssh-client
    - ethtool
when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;
</code></pre><ul>
<li>tag</li>
</ul>
<p>tag标签：让用户选择运行playbook中的某个或某些任务。虽然ansible具有幂等性，会跳过没有变化的部分，有些代码为测试其确实没有发生变化，也会耗费很长时间。我们将playbook中的指定任务打上标签，在运行playbook时指定标签名称，这样就不用运行全部代码了。</p>
<pre><code>---
- hosts: 10.249.6.43
  user: root
  vars:
    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf
  tasks:
  - name: install nginx
    apt: name=nginx state=latest
    when: ansible_distribution == &apos;Ubuntu&apos;

  - name: configration file
    tags: conf
    copy: src=/root/mirror.conf dest={{remote_conffile_path}}
    notify: restart nginx

  - name: start nginx
    service: name=nginx enabled=yes state=started
  handlers:
  - name: restart nginx
    service: name=nginx state=restarted
    # ansible-playbook nginx.yml -t conf   // 只执行tags部分
</code></pre><h3 id="六、roles"><a href="#六、roles" class="headerlink" title="六、roles"></a>六、roles</h3><p>roles 用于层次性、结构化地组织playbook。</p>
<p>roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。roles就是通过分别将变量、文件、任务、模块及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p>
<pre><code># ls
deploy_hosts  deploy.yml  roles  run.sh
# cat deploy_hosts   //主机或主机组列表
[web]
10.126.83.30
10.126.93.83
[db]
10.126.87.150
10.126.92.89
# cat deploy.yml  // 总的playbook 调用roles
---
- name: init for os
  hosts: web
  user: root
  gather_facts: True
  roles:
    - init
    - raid
- name: init for os
  hosts: db
  user: root
  gather_facts: True
  roles:
    - init
    - raid
    - db_init

# cat run.sh  // 运行playbook脚本
#!/bin/bash
/usr/bin/ansible-playbook -i ./deploy_hosts deploy.yml
# ls roles/
db_init   init    raid 
</code></pre><p>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录，用不到的目录可以创建为空目录，也可以不创建。</p>
<p>role内各目录中可用的文件:</p>
<ul>
<li><p>tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；此文件可以使用include包含其它的位于此目录中的task文件</p>
</li>
<li><p>files目录：存放由copy或script等模块调用的静态文件</p>
</li>
<li><p>templates目录：template模块会自动在此目录中寻找Jinja2模板文件</p>
</li>
<li><p>handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；此文件可以使用include包含其它的位于此目录中的handler文件</p>
</li>
<li><p>vars目录：至少有一个main.yml文件，用于定义此角色用到的变量</p>
</li>
<li><p>meta目录：至少有一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；ansible 1.3及其以后的版本才支持</p>
</li>
<li><p>default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</p>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://9124573.blog.51cto.com/9114573/1769887" target="_blank" rel="external">轻量级自动化运维工具ansible</a></p>
<p><a href="http://docs.ansible.com/ansible/intro.html" target="_blank" rel="external">ansible doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、体系结构&quot;&gt;&lt;a href=&quot;#一、体系结构&quot; class=&quot;headerlink&quot; title=&quot;一、体系结构&quot;&gt;&lt;/a&gt;一、体系结构&lt;/h3&gt;&lt;p&gt;ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix工作模式</title>
    <link href="http://yoursite.com/2016/05/18/zabbix-agent/"/>
    <id>http://yoursite.com/2016/05/18/zabbix-agent/</id>
    <published>2016-05-18T10:03:31.000Z</published>
    <updated>2016-11-07T05:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Zabbix uses a JSON based communication protocol for communicating with Zabbix agent.</p>
</blockquote>
<p>zabbix agent通信过程中的协议均基于json格式。主动模式和被动模式是相对于agent来说的。agent主动发送数据给server即为主动模式。</p>
<h3 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h3><p>server向agent请求获取监控项的数据，agent返回数据。</p>
<blockquote>
<p>A passive check is a simple data request. Zabbix server or proxy asks for some data (for example, CPU load) and Zabbix agent sends back the result to the server.</p>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>Server 发起请求：</p>
<pre><code>&lt;item key&gt;\n
</code></pre><p>Agent 返回响应数据：</p>
<pre><code>&lt;HEADER&gt;&lt;DATALEN&gt;&lt;DATA&gt;
</code></pre><p>server发送request给agent，agent收到request后本地执行相关检测收集到数据之后，发送数据到server端， 以agent.ping key 值为例具体工作流程如下：</p>
<p>1.Server opens a TCP connection</p>
<p>2.Server sends agent.ping\n</p>
<p>3.Agent reads the request and responds with <header><datalen></datalen></header></p>
<p>4.Server processes data to get the value, ‘1’ in our case</p>
<p>5.TCP connection is closed</p>
<h3 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h3><blockquote>
<p>Active checks require more complex processing. The agent must first retrieve from the server(s) a list of items for independent processing.</p>
<p>The servers to get the active checks from are listed in the ‘ServerActive’ parameter of the agent configuration file. The frequency of asking for these checks is set by the ‘RefreshActiveChecks’ parameter in the same configuration file. However, if refreshing active checks fails, it is retried after hardcoded 60 seconds. The agent then periodically sends the new values to the server(s).</p>
</blockquote>
<p>主动模式的工作流程要比被动模式的复杂一些，zabbix客户端代理（Agent）首先必须从服务器获取监控项列表来进行独立处理，然后它将定期发送新数据给服务器。</p>
<p>Part1: Getting the list of items</p>
<ol>
<li><p>Agent opens a TCP connection</p>
</li>
<li><p>Agent asks for the list of checks</p>
</li>
<li><p>Server responds with a list of items (item key, delay)</p>
</li>
<li><p>Agent parses the response</p>
</li>
<li><p>TCP connection is closed</p>
</li>
<li><p>Agent starts periodical collection of data</p>
</li>
</ol>
<p>Part2: agent send values</p>
<ol>
<li>Agent opens a TCP connection</li>
<li>Agent sends a list of values</li>
<li>Server processes the data and sends the status back</li>
<li>TCP connection is closed</li>
</ol>
<p>当使用被动式的时候，server和agent之间需要对每个item的检测建立一次tcp连接。 如果检测的item和agent过多的时候，对server端的性能是一个很大的考验，所以当agent 和items 数量增多时可以根据实际情况设置工作模式。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.2/manual/appendix/items/activepassive#passive_checks" target="_blank" rel="external">zabbix doc </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Zabbix uses a JSON based communication protocol for communicating with Zabbix agent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;zabbix agent通信过程中的
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="zabbix agent" scheme="http://yoursite.com/tags/zabbix-agent/"/>
    
  </entry>
  
  <entry>
    <title>nc小知识</title>
    <link href="http://yoursite.com/2016/05/05/nc/"/>
    <id>http://yoursite.com/2016/05/05/nc/</id>
    <published>2016-05-05T13:18:40.000Z</published>
    <updated>2016-11-07T05:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="远程拷贝文件"><a href="#远程拷贝文件" class="headerlink" title="远程拷贝文件"></a>远程拷贝文件</h3><p>server1: 10.48.156.8</p>
<p>server2: 10.249.6.43</p>
<p><strong>从server1拷贝文件到server2</strong></p>
<p>先在server2上激活监听：</p>
<pre><code># nc -lp 1234 &gt; file.txt
</code></pre><blockquote>
<p>-l：使用监听模式，监控传入的资料</p>
<p>-p &lt;通信端口&gt;：设置本地主机使用的通信端口</p>
</blockquote>
<p>然后server1上运行：</p>
<pre><code># ll file.txt
-rw-r--r-- 1 root root 35 May  5 20:43 file.txt
# nc 10.249.6.43  1234 &lt; file.txt
</code></pre><h3 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h3><p><strong>从server1拷贝MySQL-python-1.2.3目录内容到server2上</strong></p>
<p>先在server2上激活监听：</p>
<pre><code># nc -l 1234 | tar xzvf -
</code></pre><p>然后server1上运行：</p>
<pre><code># ll -d MySQL-python-1.2.3
drwxrwxr-x 3 500 500 4096 Jan  3 18:13 MySQL-python-1.2.3
# tar czvf - MySQL-python-1.2.3 | nc 10.249.6.43 1234
</code></pre><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><pre><code># nc localhost -z 22   //扫描本机端口
Connection to localhost 22 port [tcp/ssh] succeeded!
# nc 10.126.93.2 -z 80  //扫描远程机器端口
Connection to 10.126.93.2 80 port [tcp/http] succeeded!
# nc -v 10.126.93.2 -z 1-100  //指示扫描过程    
</code></pre><blockquote>
<p>-v：显示指令执行过程</p>
<p>-z：使用0输入/输出模式，只在扫描通信端口时使用</p>
<p>-w &lt;超时秒数&gt;：设置等待连线的时间</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;远程拷贝文件&quot;&gt;&lt;a href=&quot;#远程拷贝文件&quot; class=&quot;headerlink&quot; title=&quot;远程拷贝文件&quot;&gt;&lt;/a&gt;远程拷贝文件&lt;/h3&gt;&lt;p&gt;server1: 10.48.156.8&lt;/p&gt;
&lt;p&gt;server2: 10.249.6.43&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="nc" scheme="http://yoursite.com/tags/nc/"/>
    
  </entry>
  
  <entry>
    <title>Create A .deb Package Repository</title>
    <link href="http://yoursite.com/2016/03/08/Create-A-deb-Package-Repository/"/>
    <id>http://yoursite.com/2016/03/08/Create-A-deb-Package-Repository/</id>
    <published>2016-03-08T06:22:22.000Z</published>
    <updated>2016-11-07T05:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Install-Reprepro-and-Generate-Key"><a href="#Install-Reprepro-and-Generate-Key" class="headerlink" title="Install Reprepro and Generate Key"></a>Install Reprepro and Generate Key</h3><p>安装软件包并生成密钥</p>
<pre><code># sudo apt-get  install reprepro gnupg -y
</code></pre><p>创建gpg key需要大量的随机操作，使用rng-tools产生大量随机操作    </p>
<pre><code># apt-get install rng-tools -y

# vim /etc/default/rng-tools   

[...]

HRNGDEVICE=/dev/urandom

[...]

# /etc/init.d/rng-tools start
</code></pre><p>Generate a gpg key using gnupg  </p>
<pre><code># gpg --gen-key
......
Please select what kind of key you want:
(1) RSA and RSA (default)
(2) DSA and Elgamal
(3) DSA (sign only)
(4) RSA (sign only)
Your selection? 4
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
        0 = key does not expire
    &lt;n&gt;  = key expires in n days
    &lt;n&gt;w = key expires in n weeks
    &lt;n&gt;m = key expires in n months
    &lt;n&gt;y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
 &quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;

Real name: Mr-zhao
Email address: zhifanzhao@gmail.com
Comment: ops deb
Enter passphrase:****
You selected this USER-ID:
    &quot;Mr-zhao (ops deb) &lt;zhifanzhao@gmail.com&gt;&quot;

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o
You need a Passphrase to protect your secret key.

You don&apos;t want a passphrase - this is probably a *bad* idea!
I will do it anyway.  You can change your passphrase at any time,
using this program with the option &quot;--edit-key&quot;.

We need to generate a lot of random bytes.
 It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.

......
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key D94F748F marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   4096R/D94F748F 2016-03-08
    Key fingerprint = 7D96 2419 19C6 B7C3 7F97  F4BB 63BF 6A4F D94F 748F
uid                  Mr-zhao (ops deb) &lt;zhifanzhao@gmail.com&gt;

Note that this key cannot be used for encryption.  You may want to use
the command &quot;--edit-key&quot; to generate a subkey for this purpose. 
</code></pre><p>查看和修改 gpg key</p>
<pre><code># gpg --list-keys
/root/.gnupg/pubring.gpg
------------------------
pub   4096R/D94F748F 2016-03-08
uid                  Mr-zhao (ops deb) &lt;zhifanzhao@gmail.com&gt;

# gpg --edit-key
usage: gpg [options] --edit-key user-id [commands]
</code></pre><h3 id="Create-a-Package-Repository-and-Export-Key"><a href="#Create-a-Package-Repository-and-Export-Key" class="headerlink" title="Create a Package Repository and Export Key"></a>Create a Package Repository and Export Key</h3><pre><code># cd /data
# mkdir apt
# mkdir -p ./apt/conf

#vim  ./apt/conf/distributions
Origin:        ops-ubuntu
Label:         ops-ubuntu
Suite:         trusty
Codename:      trusty
Version:       14.04
Architectures: amd64 i386
Components:    main restricted multiverse universe
Description:   private main deb repository for trusty
SignWith: yes

#vim ./apt/conf/options   //reprepro --options命令的集合
verbose
basedir  .
ask-passphrase
distdir  /data/apt/repos/dists   //dist文件的输出位置
outdir   /data/apt/repos    //pool输出的位置
</code></pre><p>Create the repository tree</p>
<pre><code># reprepro --ask-passphrase -Vb /data/apt/ export
</code></pre><p>Export Key</p>
<pre><code># gpg --armor --export Mr-zhao zhifanzhao@gmail.com &gt;&gt; ./repos/public.key
</code></pre><h3 id="Add-Packages-to-Newly-Created-Repository"><a href="#Add-Packages-to-Newly-Created-Repository" class="headerlink" title="Add Packages to Newly Created Repository"></a>Add Packages to Newly Created Repository</h3><pre><code>#reprepro -b . -C main includedeb trusty /tmp/packages.deb  //add

#reprepro remove trusty packages   //remove 
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tecmint.com/create-deb-pacakge-repository-in-ubuntu/" target="_blank" rel="external">Create A .deb Package Repository</a><br><a href="https://wikitech.wikimedia.org/wiki/Reprepro" target="_blank" rel="external">wiki reprepro</a><br><a href="https://wiki.debian.org/SecureApt" target="_blank" rel="external">SecureApt)</a><br><a href="http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/" target="_blank" rel="external">gpg-cheat</a><br><a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html" target="_blank" rel="external">gpg</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Install-Reprepro-and-Generate-Key&quot;&gt;&lt;a href=&quot;#Install-Reprepro-and-Generate-Key&quot; class=&quot;headerlink&quot; title=&quot;Install Reprepro and Gener
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="deb" scheme="http://yoursite.com/tags/deb/"/>
    
      <category term="reprepro" scheme="http://yoursite.com/tags/reprepro/"/>
    
  </entry>
  
  <entry>
    <title>free查看内存相关信息</title>
    <link href="http://yoursite.com/2016/03/03/free/"/>
    <id>http://yoursite.com/2016/03/03/free/</id>
    <published>2016-03-03T11:02:23.000Z</published>
    <updated>2016-11-07T05:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><h4 id="manual-description"><a href="#manual-description" class="headerlink" title="manual description"></a>manual description</h4><blockquote>
<p>free  displays  the total amount of free and used physical and swap memory in the system, as well as the buffers used bythe kernel.</p>
<p>The shared memory column represents either the MemShared value (2.4 series kernels) or the Shmem value (2.6 series kernels and later) taken from the /proc/meminfo file. The value is zero if none of the entries is exported by the kernel.</p>
</blockquote>
<h4 id="buffers-and-cached"><a href="#buffers-and-cached" class="headerlink" title="buffers and cached"></a>buffers and cached</h4><blockquote>
<p><strong>What is the difference between buffers and Cache?</strong></p>
<p>A buffer is a temporary location to store data for a particular application and this data is not used by any other application. This is similar to bandwidth concept. When you try to send burst of data through network, if your network card is capable of sending less data, it will keep these huge amounts of data in buffer so that it can send data constantly in lesser speeds. In other hand Cache is a memory location to store frequently used data for faster access. Other difference between a buffer and a cache is that cache can be used multiple times where as buffer is used single time. And both are temporary store for your data processing.</p>
</blockquote>
<ul>
<li>A buffer is something that has yet to be “written” to disk.</li>
<li>A cache is something that has been “read” from the disk and stored for later use.</li>
</ul>
<p>buffer是用于存放要输出到disk（块设备）的数据的，而cache是存放从disk上读出的数据。   这二者是为了提高IO性能的。为了提高IO read的性能，总是要多cache一些数据，这也就是为什么cached memor比较大，而比较小的原因。</p>
<pre><code>root@Mr-zhao:~# free -m
             total       used       free     shared    buffers     cached
Mem:          2001        979       1021          0         58        774
-/+ buffers/cache:        146       1854
Swap:         4092          0       4092
</code></pre><p>当我们第一次读一个大文件时耗时可能会比第二次长，原因就是第二次读取时已有cache数据。</p>
<ul>
<li><p>-/+ buffers/cache(used): 表示一个应用程序认为系统被用掉多少内存；</p>
<p>  -/+ buffers/cache(used) = Mem(used) – Mem(buffers) – Mem(cached)</p>
</li>
<li><p>-/+ buffers/cache(free)，表示一个应用程序认为系统还有多少内存；</p>
<p>  -/+ buffers/cache(free) = Mem(free) + Mem(buffers) + Mem(cached)</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html" target="_blank" rel="external">Linux上的free命令详解</a><br><a href="http://www.freelinuxconsole.info/understanding-free-command-in-linuxunix-2/" target="_blank" rel="external">Understanding free command in Linux/Unix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;free&quot;&gt;&lt;a href=&quot;#free&quot; class=&quot;headerlink&quot; title=&quot;free&quot;&gt;&lt;/a&gt;free&lt;/h3&gt;&lt;h4 id=&quot;manual-description&quot;&gt;&lt;a href=&quot;#manual-description&quot; class=&quot;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="free" scheme="http://yoursite.com/tags/free/"/>
    
  </entry>
  
</feed>
