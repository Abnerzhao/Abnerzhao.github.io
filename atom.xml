<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abnerzhao</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-23T15:30:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abnerzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python正则表达式</title>
    <link href="http://yoursite.com/2017/03/05/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/05/Python正则表达式/</id>
    <published>2017-03-05T09:13:36.000Z</published>
    <updated>2017-06-23T15:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。</strong>正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果</p>
<p><strong>常用的元字符</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配数字</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词的开始或结束(空格、标点、换行都算是单词的分割)</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><strong>示例：</strong></p>
<p><code>\ba\w*\b</code>: 匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)</p>
<p><code>\d+</code>: 匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是\</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次</p>
<p><code>\b\w{6}\b</code>: 匹配刚好6个字符的单词</p>
<p><code>^\d{5,12}$</code>: 匹配5位到12位数字</p>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p><strong>常用的限定符(指定数量的代码)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">重复n次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">重复n次或更多次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">重复n到m次</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong><br>Windows\d+: 匹配Windows后面跟1个或更多数字<br>^\w+: 匹配一行的第一个单词</p>
<h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p><strong>常用的反义代码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td style="text-align:left">[^x]</td>
<td style="text-align:left">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">[^aeiou]</td>
<td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>我们要想查找数字，字母或数字，空白这些很简单，直接使用元字符对应的字符集合即可实现。但是如果想要匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p>
<p>这时我们需要在方括号<code>[]</code>中列出想要匹配的字符集合。如[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p>
<p>[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）</p>
<p>\(?0\d{2}[) -]?\d{8}:匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等</p>
<h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开，匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了</p>
<p><code>0\d{2}-\d{8}|0\d{3}-\d{7}</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</p>
<p><code>\\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[-]?\d{8}</code>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>重复单个字符在后面加上限定符就行了，如果想要重复多个字符那么就需要用<code>小括号</code>来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。</p>
<p>(\d{1,3}.){3}：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次</p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>使用反斜杠<code>\</code>来取消元字符的特殊含义</p>
<p>例如：deerchao\.net匹配deerchao.net，C:\\Windows匹配C:\Windows</p>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>Python 通过标准库的 re 模块支持正则表达式。</p>
<p><strong>常见的正则表达式函数与方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">函数/方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">re 模块的函数</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">compile(pattern,flags=0)</td>
<td style="text-align:left">对正则表达式模式 pattern 进行编译,flags是可选标志符,并返回一个 regex 对象</td>
</tr>
<tr>
<td style="text-align:left">re 模块的函数和 regex 对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">match(pattern,string, flags=0)</td>
<td style="text-align:left">尝试用正则表达式模式 pattern 匹配字符串 string,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">search(pattern,string, flags=0)</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的第一次出现,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">findall(pattern,string[,flags])</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的所有出现;返回一个匹配对象的列表</td>
</tr>
<tr>
<td style="text-align:left">finditer(pattern,string[, flags])</td>
<td style="text-align:left">和 findall()相同,但返回的不是列表而是迭代器;对 于每个匹配,该迭代器返回一个匹配对象</td>
</tr>
<tr>
<td style="text-align:left">匹配对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">split(pattern,string, max=0)</td>
<td style="text-align:left">根据正则表达式 pattern 中的分隔符把字符 string 分割为一个列表,返回成功匹配的列表,最多分割 max 次(默认是分割所有匹配的地方)</td>
</tr>
<tr>
<td style="text-align:left">sub(pattern, repl, string, max=0)</td>
<td style="text-align:left">把字符串 string 中所有匹配正则表达式 pattern 的地方替换成字符串 repl,如果 max 的值没有给出,则对所有匹配的地方进行替换</td>
</tr>
<tr>
<td style="text-align:left">group(num=0)</td>
<td style="text-align:left">返回全部匹配对象(或指定编号是 num 的子组)</td>
</tr>
<tr>
<td style="text-align:left">groups()</td>
<td style="text-align:left">返回一个包含全部匹配的子组的元组(如果没有成功匹配,就返回一个空元组)</td>
</tr>
</tbody>
</table>
<p>将一个正则表达式的样式编译为Python中正则表达式对象。由于正则表达式在执行过程中被多次用于比较，通过re.compile()进行预编译可以提升性能。􏰁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; p = re.compile(&apos;[a-z]+&apos;)</div><div class="line">&gt;&gt;&gt; p</div><div class="line">&lt;_sre.SRE_Pattern object at 0x108174df0&gt;</div><div class="line">&gt;&gt;&gt; a = p.match(&apos;abc&apos;)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c9f0&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823ca58&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;123&apos;)  #匹配失败返回None</div><div class="line">&gt;&gt;&gt;</div><div class="line">#不使用compile同样可以</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c988&gt;</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;123&apos;)</div></pre></td></tr></table></figure>
<h3 id="匹配对象和方法"><a href="#匹配对象和方法" class="headerlink" title="匹配对象和方法"></a>匹配对象和方法</h3><p>在处理正则表达式时，除regex对象外，还有另一种对象类型-匹配对象。这些对象是在match() 或 search()被成功调用之后所返回的结果。匹配对象有两个主要方法:<strong>group() 和 groups()</strong></p>
<p>group()方法返回所有匹配对象或是根据要求返回某个特定子组。<br>groups()返回一个包含唯一或所有子组的元组。如果正则表达式中没有子组的话, groups() 将返回一个空元组,而 group()仍会返回全部匹配对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x1082483e8</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group() <span class="comment">#返回所有匹配结果</span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>) <span class="comment">#原始字符串 </span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>) </div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups() <span class="comment">#返回包含子组的元组</span></div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div></pre></td></tr></table></figure>
<h3 id="re-match和re-search"><a href="#re-match和re-search" class="headerlink" title="re.match和re.search"></a>re.match和re.search</h3><p><strong>re.match和re.search的区别：</strong><br>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配失败返回None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配成功</span></div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x10823ca58</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>findall():</strong>根据正则表达式搜索字符串，返回所有符合的子字符串列表<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'fooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'foofooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>]</div></pre></td></tr></table></figure></p>
<p>findall()和 search()相似之处在于二者都执行字符串搜索，但 findall()和 match()与 search()不同之处是,findall()总返回一个列表。</p>
<h3 id="切分和替换"><a href="#切分和替换" class="headerlink" title="切分和替换"></a>切分和替换</h3><p><strong>re.split()</strong>:根据正则表达式分割字符串，返回分割后的所有子字符串列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]'</span>,<span class="string">'a,b,c d;e'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</div></pre></td></tr></table></figure>
<p><strong>re.subn()和re.sub()</strong><br>将某字符串中所有匹配正则表达式模式的部分进行替换，用来替换的部分通常是一个字符串,但也可能是一个函数,该函数返回一个用来替换的字符串。subn()和sub()一样,但它还返回一个表示替换次 数的数字,替换后的字符串和表示替换次数的数字作为一个元组的元素返回。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> &gt;&gt;&gt; re.sub(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">&apos;XbcdXf&apos;</div><div class="line">&gt;&gt;&gt; re.subn(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">(&apos;XbcdXf&apos;, 2)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="external">Python官方文档</a><br><a href="https://book.douban.com/subject/3112503/" target="_blank" rel="external">Python核心编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。&lt;/strong&gt;正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。&lt;/p&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的元字符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;代码&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配单词的开始或结束(空格、标点、换行都算是单词的分割)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix Low-level discovery</title>
    <link href="http://yoursite.com/2017/01/21/low-level-discovery/"/>
    <id>http://yoursite.com/2017/01/21/low-level-discovery/</id>
    <published>2017-01-21T14:13:32.000Z</published>
    <updated>2017-06-22T02:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. </p>
<p>In Zabbix, four types of item discovery are supported out of the box:</p>
<ul>
<li>discovery of file systems;</li>
<li>discovery of network interfaces;</li>
<li>discovery of CPUs and CPU cores;</li>
<li>discovery of SNMP OIDs.</li>
</ul>
<p>A user can define their own types of discovery, provided they follow a particular JSON protocol.</p>
</blockquote>
<a id="more"></a>
<p>简而言之，zabbix的低水平发现就是减少我们的重复操作，能够根据不同的监控实例自动添加监控项、触发器和图形。<br><code>vfs.fs.discovery</code>和<code>net.if.discovery</code>就是zabbix自带的自动发现键值，能够自动识别agent端的文件挂载情况和网卡信息。还有基于SNMP OID的自动发现键值，能够自动识别交换机的所有端口信息。<br>当我们的一个服务有多个端口需要监控时，我通常是先在agent端写好监控脚本，定义键值，然后再为每个端口新建监控项、触发器和图形（当然你可以直接克隆），但还是免不了一些重复操作。下面就通过一个例子看一下Low-level discovery是如何工作的：</p>
<h3 id="监控需求："><a href="#监控需求：" class="headerlink" title="监控需求："></a>监控需求：</h3><p>监控udp端口12222-12229的端口状态</p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><h4 id="1-以json格式自定义发现类型"><a href="#1-以json格式自定义发现类型" class="headerlink" title="1.以json格式自定义发现类型"></a>1.以json格式自定义发现类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cat udpport_discovery.py</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> sys,datetime,socket</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    zbxkey = sys.argv[<span class="number">1</span>]</div><div class="line">    zbx_d = &#123;&#125;</div><div class="line">    zbx_d[<span class="string">"data"</span>] = []</div><div class="line">    host_name = socket.gethostname().lower()</div><div class="line"></div><div class="line">    res = [<span class="string">'12222'</span>, <span class="string">'12223'</span>, <span class="string">'12224'</span>, <span class="string">'12225'</span>, <span class="string">'12226'</span>, <span class="string">'12227'</span>, <span class="string">'12228'</span>, <span class="string">'12229'</span>]</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> res:</div><div class="line">        d = &#123;&#125;</div><div class="line">        d[<span class="string">"&#123;#%s&#125;"</span> % zbxkey] = line</div><div class="line">        zbx_d[<span class="string">"data"</span>].append(d)</div><div class="line">    <span class="keyword">print</span> str(zbx_d).replace(<span class="string">"'"</span>,<span class="string">'"'</span>)</div></pre></td></tr></table></figure>
<h4 id="2-定义配置文件"><a href="#2-定义配置文件" class="headerlink" title="2.定义配置文件"></a>2.定义配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.conf</div><div class="line">#############Template_Udp#############</div><div class="line">UserParameter=status[*],/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udp_port.sh $1</div><div class="line">UserParameter=discovery.udpport,/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udpport_discovery.py PORT</div></pre></td></tr></table></figure>
<h4 id="3-检测自定义键值"><a href="#3-检测自定义键值" class="headerlink" title="3.检测自定义键值"></a>3.检测自定义键值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python udpport_discovery.py PORT</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure>
<p>zabbix server端测试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./zabbix_get -s 10.0.0.206 -k discovery.udpport</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-编写监控脚本"><a href="#4-编写监控脚本" class="headerlink" title="4.编写监控脚本"></a>4.编写监控脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.sh</div><div class="line">Port=$1</div><div class="line">case $Port in</div><div class="line">        12222)   netstat -nupl | grep 12222 |wc -l;;</div><div class="line">        12223)   netstat -nupl | grep 12223 |wc -l;;</div><div class="line">        12224)   netstat -nupl | grep 12224 |wc -l;;</div><div class="line">        12225)   netstat -nupl | grep 12225 |wc -l;;</div><div class="line">        12226)   netstat -nupl | grep 12226 |wc -l;;</div><div class="line">        12227)   netstat -nupl | grep 12227 |wc -l;;</div><div class="line">        12228)   netstat -nupl | grep 12228 |wc -l;;</div><div class="line">        12229)   netstat -nupl | grep 12229 |wc -l;;</div><div class="line">        *) echo Error; exit 1;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="5-web添加模板"><a href="#5-web添加模板" class="headerlink" title="5.web添加模板"></a>5.web添加模板</h4><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/01256527-8987-40C4-9C65-2FC6D1D8610F.png" alt=""></p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/E604037B-096A-4789-9AB3-A47B14020FB2.png" alt=""></p>
<h4 id="6-将模板关联对应机器"><a href="#6-将模板关联对应机器" class="headerlink" title="6.将模板关联对应机器"></a>6.将模板关联对应机器</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.4/manual/discovery/low_level_discovery" target="_blank" rel="external">LDD官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. &lt;/p&gt;
&lt;p&gt;In Zabbix, four types of item discovery are supported out of the box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discovery of file systems;&lt;/li&gt;
&lt;li&gt;discovery of network interfaces;&lt;/li&gt;
&lt;li&gt;discovery of CPUs and CPU cores;&lt;/li&gt;
&lt;li&gt;discovery of SNMP OIDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A user can define their own types of discovery, provided they follow a particular JSON protocol.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Python datetime那点事</title>
    <link href="http://yoursite.com/2016/11/16/python-datetime/"/>
    <id>http://yoursite.com/2016/11/16/python-datetime/</id>
    <published>2016-11-16T13:08:40.000Z</published>
    <updated>2017-06-21T14:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。</p>
<h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><p>datetime 模块主要用来操作日期和时间</p>
<h3 id="date日期对象"><a href="#date日期对象" class="headerlink" title="date日期对象"></a>date日期对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today()  //返回当前本地日期</div><div class="line"><span class="keyword">print</span> datetime.date(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>) //生成日期对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="time时间对象"><a href="#time时间对象" class="headerlink" title="time时间对象"></a>time时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">Time = datetime.time(<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成时间对象</div><div class="line"><span class="keyword">print</span> Time</div><div class="line"><span class="keyword">print</span> Time.hour</div><div class="line"><span class="keyword">print</span> Time.minute</div><div class="line"><span class="keyword">print</span> Time.second</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="datetime日期时间对象"><a href="#datetime日期时间对象" class="headerlink" title="datetime日期时间对象"></a>datetime日期时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.datetime(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成datetime对象</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() //返回当前日期时间</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //对当前时间格式化并返回字符串(将datetime对象转换为str)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> datetime.datetime.strptime(<span class="string">'2016-11-16 16:13:43'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)//将字符串转换为datetime对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47.913755</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span></div><div class="line">Wed Nov <span class="number">16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span> <span class="number">2016</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">43</span></div></pre></td></tr></table></figure>
<h3 id="timedelta对象"><a href="#timedelta对象" class="headerlink" title="timedelta对象"></a>timedelta对象</h3><p>timedelta对象表示一个时间段，即两个日期 (date) 或时间 (time) 之间的差。利用timedelta可实现时间的相加减，当然时间对象本身就能直接进行算术运算和比较运算。</p>
<blockquote>
<p>datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天后</div><div class="line"><span class="keyword">print</span> datetime.date.today() - datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天前</div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">-3</span>) //<span class="number">3</span>天前(参数可为负)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(weeks=<span class="number">1</span>) //<span class="number">1</span>个星期后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(days=<span class="number">1</span>) //明天</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>) //<span class="number">3</span>小时后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">5</span>) //<span class="number">5</span>分钟后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>) //<span class="number">60</span>秒</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-19</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311780</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-17</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311797</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">26.311806</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">19</span>:<span class="number">26.311815</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">26.311823</span></div></pre></td></tr></table></figure>
<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><p>time模块提供时间相关的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">print</span> time.ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> time.localtime() //返回当前时间timetuple</div><div class="line">time.sleep(<span class="number">10</span>) //睡眠<span class="number">10</span>秒</div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //格式化并返回字符串</div><div class="line"></div><div class="line">//stdout</div><div class="line">Wed Nov <span class="number">16</span> <span class="number">17</span>:<span class="number">25</span>:<span class="number">50</span> <span class="number">2016</span></div><div class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">16</span>, tm_hour=<span class="number">17</span>, tm_min=<span class="number">25</span>, tm_sec=<span class="number">50</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">321</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h2 id="strftime-格式化字符串含义"><a href="#strftime-格式化字符串含义" class="headerlink" title="strftime()格式化字符串含义"></a>strftime()格式化字符串含义</h2><table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期名称简写</td>
<td>Sun, Mon, …, Sat</td>
</tr>
<tr>
<td>%A</td>
<td>星期名称的全称</td>
<td>Sunday, Monday, …, Saturday</td>
</tr>
<tr>
<td>%w</td>
<td>十进制数表示的星期[0表示星期日]</td>
<td>0, 1, …, 6</td>
</tr>
<tr>
<td>%d</td>
<td>十进制数表示的一个月的第几天</td>
<td>01, 02, …, 31</td>
</tr>
<tr>
<td>%b</td>
<td>月份名称的简写</td>
<td>Jan, Feb, …, Dec</td>
</tr>
<tr>
<td>%B</td>
<td>月份名称的全称</td>
<td>January, February, …, December</td>
</tr>
<tr>
<td>%m</td>
<td>十进制数表示的月份</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%y</td>
<td>十进制数表示的年份，不带有世纪</td>
<td>00, 01, …, 99</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制数表示的年份，带有世纪</td>
<td>1970, 1988, 2001, 2013</td>
</tr>
<tr>
<td>%H</td>
<td>十进制数表示的小时（24小时制）</td>
<td>00, 01, …, 23</td>
</tr>
<tr>
<td>%I</td>
<td>十进制数表示的小时（12小时制）</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%p</td>
<td>AM or PM</td>
<td>AM, PM</td>
</tr>
<tr>
<td>%M</td>
<td>十进制数表示的分钟</td>
<td>00, 01, …, 59</td>
</tr>
<tr>
<td>%S</td>
<td>十进制表示的秒数</td>
<td>00, 01, …, 59</td>
</tr>
</tbody>
</table>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C24469F5-B517-4D77-963E-37A6BC4B56AC.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="external">datetime官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。&lt;/p&gt;
&lt;h2 id=&quot;datetime模块&quot;&gt;&lt;a href=&quot;#datetime模块&quot; class=&quot;headerlink&quot; title=&quot;datetime模块&quot;&gt;&lt;/a&gt;datetime模块&lt;/h2&gt;&lt;p&gt;datetime 模块主要用来操作日期和时间&lt;/p&gt;
&lt;h3 id=&quot;date日期对象&quot;&gt;&lt;a href=&quot;#date日期对象&quot; class=&quot;headerlink&quot; title=&quot;date日期对象&quot;&gt;&lt;/a&gt;date日期对象&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date.today()  //返回当前本地日期&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) //生成日期对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//stdout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="datetime" scheme="http://yoursite.com/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>小试Ansible Python API</title>
    <link href="http://yoursite.com/2016/11/04/ansible-python-api/"/>
    <id>http://yoursite.com/2016/11/04/ansible-python-api/</id>
    <published>2016-11-04T10:49:12.000Z</published>
    <updated>2017-06-21T15:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// ping 模块</div><div class="line">$ ansible localhost -m ping</div><div class="line">localhost | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div><div class="line">// shell 模块</div><div class="line">$ ansible localhost -m shell -a &apos;uptime&apos;</div><div class="line">localhost | success | rc=0 &gt;&gt;</div><div class="line">11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<h3 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h3><p>通过ansible.runner模块来实现</p>
<a id="more"></a>
<h4 id="使用API实现ping模块功能："><a href="#使用API实现ping模块功能：" class="headerlink" title="使用API实现ping模块功能："></a>使用API实现ping模块功能：</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">    module_name=<span class="string">'ping'</span>,  //模块名</div><div class="line">    module_args=<span class="string">''</span>,  //模块参数</div><div class="line">    pattern=<span class="string">'localhost'</span>,  //匹配主机或主机组</div><div class="line">    forks=<span class="number">2</span> //多线程</div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> data  //打印输出结果默认json格式</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;<span class="string">'dark'</span>: &#123;&#125;, <span class="string">'contacted'</span>: &#123;<span class="string">'localhost'</span>: &#123;<span class="string">'invocation'</span>: &#123;<span class="string">'module_name'</span>: <span class="string">'ping'</span>, <span class="string">'module_args'</span>: <span class="string">''</span>&#125;, <span class="string">u'changed'</span>: <span class="keyword">False</span>, <span class="string">u'ping'</span>: <span class="string">u'pong'</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>由于输出结果默认是json格式，那么我们可以格式化一下，让它更美观</p>
<blockquote>
<p>sort_keys  <code>按key排序</code><br>indent <code>缩进</code><br>separators <code>指定分隔符(默认分隔符&#39;, &#39;,使用&#39;,&#39;,&#39;: &#39; 避免尾部空格)</code></p>
</blockquote>
<p>上例中的输出格式化：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)) //对json格式化输出</div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: false,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"ping"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用API实现shell模块功能"><a href="#使用API实现shell模块功能" class="headerlink" title="使用API实现shell模块功能"></a>使用API实现shell模块功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">   module_name=<span class="string">'shell'</span>,</div><div class="line">   module_args=<span class="string">'uptime'</span>,</div><div class="line">   pattern=<span class="string">'localhost'</span>,</div><div class="line">   forks=<span class="number">2</span></div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: true,</div><div class="line">            <span class="string">"cmd"</span>: <span class="string">"uptime"</span>,</div><div class="line">            <span class="string">"delta"</span>: <span class="string">"0:00:00.002573"</span>,</div><div class="line">            <span class="string">"end"</span>: <span class="string">"2016-11-04 14:57:26.549208"</span>,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">"uptime"</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"shell"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"rc"</span>: <span class="number">0</span>,</div><div class="line">            <span class="string">"start"</span>: <span class="string">"2016-11-04 14:57:26.546635"</span>,</div><div class="line">            <span class="string">"stderr"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"stdout"</span>: <span class="string">" 14:57:26 up 67 days,  3:31,  1 user,  load average: 0.00, 0.06, 0.07"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印stdout"><a href="#打印stdout" class="headerlink" title="打印stdout"></a>打印stdout</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(contacted)</span>:</span></div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> contacted.items():</div><div class="line">        <span class="keyword">if</span> k == <span class="string">'stdout'</span>:</div><div class="line">            <span class="keyword">print</span> v</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'ping'</span>,</div><div class="line">        module_args=<span class="string">''</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    <span class="keyword">print</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'shell'</span>,</div><div class="line">        module_args=<span class="string">'uptime'</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    result(data[<span class="string">'contacted'</span>][<span class="string">'localhost'</span>])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    shell_module()</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">15</span>:<span class="number">34</span>:<span class="number">09</span> up <span class="number">67</span> days,  <span class="number">4</span>:<span class="number">07</span>,  <span class="number">1</span> user,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></div></pre></td></tr></table></figure>
<h2 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h2><p>playbook描述了在远程主机上执行的策略或一组任务</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了一系列的task，每个task通过ansible的模块来实现特定的功能</p>
<p>exp.yml (<code>playbook使用YAML语言编写，文件名以.yaml或.yml结尾</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- hosts: localhost_group   //主机组</div><div class="line">  tasks:</div><div class="line">  - name: kernel release info  //task1</div><div class="line">    command: uname -a</div><div class="line"></div><div class="line">  - name: memory info  //task2</div><div class="line">    shell: free -m</div></pre></td></tr></table></figure>
<p>这个playbook可以查看远程主机的内核版本信息和内存信息</p>
<h3 id="ansible-playbook命令"><a href="#ansible-playbook命令" class="headerlink" title="ansible-playbook命令"></a>ansible-playbook命令</h3><p>命令行执行playbook<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  test.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=3    changed=2    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<h3 id="Python-API-1"><a href="#Python-API-1" class="headerlink" title="Python API"></a>Python API</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> ansible.playbook</div><div class="line"><span class="keyword">import</span> ansible.inventory</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">playbook_path = <span class="string">"/home/ubuntu/scripts/exp.yml"</span></div><div class="line"></div><div class="line"><span class="comment">##添加主机信息</span></div><div class="line">host = ansible.inventory.host.Host(</div><div class="line">    name = <span class="string">'localhost'</span></div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">##设置主机组并添加主机</span></div><div class="line">group = ansible.inventory.group.Group(</div><div class="line">    name = <span class="string">'localhost_group'</span></div><div class="line">    )</div><div class="line">group.add_host(host)</div><div class="line"></div><div class="line"><span class="comment">##主机列表</span></div><div class="line">example_inventory = ansible.inventory.Inventory()</div><div class="line">example_inventory.add_group(group)</div><div class="line"></div><div class="line"><span class="comment">#回调信息</span></div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)</div><div class="line"></div><div class="line"><span class="comment">#创建实例，playbook位于playbook_path</span></div><div class="line">pb = ansible.playbook.PlayBook(</div><div class="line">    playbook = playbook_path,</div><div class="line">    stats = stats,</div><div class="line">    callbacks = playbook_cb,</div><div class="line">    runner_callbacks = runner_cb,</div><div class="line">    inventory = example_inventory,</div><div class="line">    subset = <span class="string">'all'</span>,</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">#运行playbook</span></div><div class="line">pr = pb.run()</div><div class="line"></div><div class="line"><span class="comment">#打印结果</span></div><div class="line"><span class="keyword">print</span> json.dumps(pr, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div></pre></td></tr></table></figure>
<p>//stdout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line">&#123;</div><div class="line">    &quot;localhost&quot;: &#123;</div><div class="line">    &quot;changed&quot;: 2,</div><div class="line">    &quot;failures&quot;: 0,</div><div class="line">    &quot;ok&quot;: 3,</div><div class="line">    &quot;skipped&quot;: 0,</div><div class="line">    &quot;unreachable&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ansible-runner更多信息"><a href="#ansible-runner更多信息" class="headerlink" title="ansible.runner更多信息"></a>ansible.runner更多信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(ansible.runner)</div><div class="line">[<span class="string">'C'</span>, <span class="string">'DefaultRunnerCallbacks'</span>, <span class="string">'HAS_ATFORK'</span>, <span class="string">'HostVars'</span>, <span class="string">'ModuleReplacer'</span>, <span class="string">'OUTPUT_LOCKFILE'</span>, <span class="string">'PROCESS_LOCKFILE'</span>, <span class="string">'Queue'</span>, <span class="string">'ReturnData'</span>, <span class="string">'Runner'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__path__'</span>, <span class="string">'_executor_hook'</span>, <span class="string">'ansible'</span>, <span class="string">'atfork'</span>, <span class="string">'base64'</span>, <span class="string">'check_conditional'</span>, <span class="string">'collections'</span>, <span class="string">'connection'</span>, <span class="string">'errors'</span>, <span class="string">'getpass'</span>, <span class="string">'jinja2'</span>, <span class="string">'module_common'</span>, <span class="string">'module_replacer'</span>, <span class="string">'multiprocessing'</span>, <span class="string">'multiprocessing_runner'</span>, <span class="string">'os'</span>, <span class="string">'pipes'</span>, <span class="string">'poller'</span>, <span class="string">'pwd'</span>, <span class="string">'random'</span>, <span class="string">'return_data'</span>, <span class="string">'signal'</span>, <span class="string">'socket'</span>, <span class="string">'split_args'</span>, <span class="string">'string_functions'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'tempfile'</span>, <span class="string">'template'</span>, <span class="string">'time'</span>, <span class="string">'traceback'</span>, <span class="string">'utils'</span>, <span class="string">'vv'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(ansible.runner.Runner)</div></pre></td></tr></table></figure>
<h4 id="Python-yaml-模块自定义playbook"><a href="#Python-yaml-模块自定义playbook" class="headerlink" title="Python yaml 模块自定义playbook"></a>Python yaml 模块自定义playbook</h4><p>define_yaml.py<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">playbook_path = <span class="string">'/home/ubuntu/scripts'</span></div><div class="line"></div><div class="line">Yml_args = &#123;&#125;</div><div class="line">Yml = []</div><div class="line">Yml_args[<span class="string">"gather_facts"</span>] = <span class="keyword">False</span></div><div class="line">Yml_args[<span class="string">"hosts"</span>] = <span class="string">"localhost_group"</span></div><div class="line">Yml_args[<span class="string">"remote_user"</span>] = <span class="string">"ubuntu"</span></div><div class="line">Yml_task = []</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'uptime'</span>, <span class="string">'name'</span>: <span class="string">'uptime info'</span>&#125;)</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'free -m'</span>, <span class="string">'name'</span>: <span class="string">'memory info'</span>&#125;)</div><div class="line">Yml_args[<span class="string">"tasks"</span>] = Yml_task</div><div class="line">Yml.append(Yml_args)</div><div class="line">Yml = yaml.dump(Yml)</div><div class="line">Yml_path = os.path.join(playbook_path, <span class="string">"exp.yml"</span>)</div><div class="line"><span class="keyword">with</span> open(Yml_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(Yml)</div></pre></td></tr></table></figure></p>
<p>运行并检测：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python define_yaml.py</div><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  exp.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">TASK: [uptime info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=2    changed=2    unreachable=0    failed=0</div><div class="line"></div><div class="line">$ cat exp.yml</div><div class="line">- gather_facts: false</div><div class="line">  hosts: localhost_group</div><div class="line">  remote_user: ubuntu</div><div class="line">  tasks:</div><div class="line">  - &#123;name: uptime info, shell: uptime&#125;</div><div class="line">  - &#123;name: memory info, shell: free -m&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html" target="_blank" rel="external">Ansible Python API</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;h3 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ping 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success &amp;gt;&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// shell 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m shell -a &amp;apos;uptime&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success | rc=0 &amp;gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-API&quot;&gt;&lt;a href=&quot;#Python-API&quot; class=&quot;headerlink&quot; title=&quot;Python API&quot;&gt;&lt;/a&gt;Python API&lt;/h3&gt;&lt;p&gt;通过ansible.runner模块来实现&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python字典排序和列表去重</title>
    <link href="http://yoursite.com/2016/09/18/python-dict-list-sort/"/>
    <id>http://yoursite.com/2016/09/18/python-dict-list-sort/</id>
    <published>2016-09-18T03:31:26.000Z</published>
    <updated>2017-06-23T15:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><h3 id="字典key排序"><a href="#字典key排序" class="headerlink" title="字典key排序"></a>字典key排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">items = dict.items()</div><div class="line">items.sort()</div><div class="line"></div><div class="line">print [(k,v) for k,v in items] //[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [(k,dict[k]) for k in sorted(dict.keys())] </div><div class="line"></div><div class="line">//stdout</div><div class="line">[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div></pre></td></tr></table></figure>
<h3 id="字典value排序"><a href="#字典value排序" class="headerlink" title="字典value排序"></a>字典value排序</h3><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print [ v for v in sorted(dict.values())]</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 7]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]))</div><div class="line">//[(&apos;a&apos;, 1), (&apos;b&apos;, 3), (&apos;c&apos;, 5), (&apos;d&apos;, 7)]</div><div class="line">sorted(dict.items(), lambda x, y: cmp(x[1], y[1]), reverse=True) //降序</div><div class="line">//[(&apos;d&apos;, 7), (&apos;c&apos;, 5), (&apos;b&apos;, 3), (&apos;a&apos;, 1)]</div></pre></td></tr></table></figure>
<h2 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h2><p>方法一：</p>
<p>set方法：类似dict但不存储value，且key不能重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">list = list(set(num_list))</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">num_list = [1,1,2,3,4,4]</div><div class="line">print &#123;&#125;.fromkeys(num_list).keys() //创建新的字典 list的值为key 然后取key</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ids = [1,1,2,3,4,4]</div><div class="line">func = lambda x,y: x if y in x else x + [y]</div><div class="line">print reduce(func, [[], ] + ids) //利用reduce函数</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure>
<h2 id="sort和sorted"><a href="#sort和sorted" class="headerlink" title="sort和sorted"></a>sort和sorted</h2><p><strong>sort在容器内部排序，sorted生成一个新排好序的容器</strong></p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])<br>iterable:可迭代对象<br>cmp:比较函数，默认为None<br>key:比较的关键字，默认为None<br>reverse:布尔值，True则降序排列</p>
</blockquote>
<h3 id="利用sort和sorted实现列表排序"><a href="#利用sort和sorted实现列表排序" class="headerlink" title="利用sort和sorted实现列表排序"></a>利用sort和sorted实现列表排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#sort</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">list.sort(reverse = True)</div><div class="line">print list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[7, 5, 4, 3, 2, 1]  </div><div class="line"></div><div class="line">#sorted</div><div class="line">list = [1,3,5,2,7,4]</div><div class="line">new_list = sorted(list)</div><div class="line">print list</div><div class="line">print new_list</div><div class="line"></div><div class="line">//stdout</div><div class="line">[1, 3, 5, 2, 7, 4]</div><div class="line">[1, 2, 3, 4, 5, 7]</div></pre></td></tr></table></figure>
<h3 id="sorted对字典排序"><a href="#sorted对字典排序" class="headerlink" title="sorted对字典排序"></a>sorted对字典排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dict = &#123;&apos;b&apos;:3,&apos;a&apos;:1,&apos;d&apos;:7,&apos;c&apos;:5&#125;</div><div class="line">print sorted(dict.items(), key=lambda d: d[0]) //key</div><div class="line">print sorted(dict.items(), key=lambda d: d[1]) //value</div></pre></td></tr></table></figure>
<h3 id="sorted-key示例"><a href="#sorted-key示例" class="headerlink" title="sorted key示例"></a>sorted key示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#exp1</div><div class="line">&gt;&gt;&gt; sorted(&quot;This is a test string from Andrew&quot;.split(), key=str.lower)</div><div class="line">[&apos;a&apos;, &apos;Andrew&apos;, &apos;from&apos;, &apos;is&apos;, &apos;string&apos;, &apos;test&apos;, &apos;This&apos;]</div><div class="line"></div><div class="line">#exp2</div><div class="line">&gt;&gt;&gt; student_tuples = [</div><div class="line">    (&apos;john&apos;, &apos;A&apos;, 15),</div><div class="line">    (&apos;jane&apos;, &apos;B&apos;, 12),</div><div class="line">    (&apos;dave&apos;, &apos;B&apos;, 10),</div><div class="line">]</div><div class="line">&gt;&gt;&gt; sorted(student_tuples, key=lambda student: student[2]) # sort by age</div><div class="line">[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.python.org/moin/HowTo/Sorting" target="_blank" rel="external">Sorting Mini-HOW TO</a><br><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">Built-in Functions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典排序&quot;&gt;&lt;a href=&quot;#字典排序&quot; class=&quot;headerlink&quot; title=&quot;字典排序&quot;&gt;&lt;/a&gt;字典排序&lt;/h2&gt;&lt;h3 id=&quot;字典key排序&quot;&gt;&lt;a href=&quot;#字典key排序&quot; class=&quot;headerlink&quot; title=&quot;字典key排序&quot;&gt;&lt;/a&gt;字典key排序&lt;/h3&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dict = &amp;#123;&amp;apos;b&amp;apos;:3,&amp;apos;a&amp;apos;:1,&amp;apos;d&amp;apos;:7,&amp;apos;c&amp;apos;:5&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items = dict.items()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items.sort()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print [(k,v) for k,v in items] //[(&amp;apos;a&amp;apos;, 1), (&amp;apos;b&amp;apos;, 3), (&amp;apos;c&amp;apos;, 5), (&amp;apos;d&amp;apos;, 7)]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>cpuinfo</title>
    <link href="http://yoursite.com/2016/06/07/cpuinfo/"/>
    <id>http://yoursite.com/2016/06/07/cpuinfo/</id>
    <published>2016-06-07T12:39:35.000Z</published>
    <updated>2017-06-23T15:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="/proc/cpuinfo"></a>/proc/cpuinfo</h3><blockquote>
<p> Information about the processor, such as its type, make, model, and performance.</p>
</blockquote>
<h3 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h3><h4 id="CPU型号"><a href="#CPU型号" class="headerlink" title="CPU型号"></a>CPU型号</h4><pre><code># cat /proc/cpuinfo | grep vendor | uniq
vendor_id   : GenuineIntel
#  cat /proc/cpuinfo | grep &apos;model name&apos; | uniq
model name  : Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz
</code></pre><h4 id="CPU-架构"><a href="#CPU-架构" class="headerlink" title="CPU 架构"></a>CPU 架构</h4><pre><code># lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
......
</code></pre><a id="more"></a>
<h4 id="物理CPU个数"><a href="#物理CPU个数" class="headerlink" title="物理CPU个数"></a>物理CPU个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;physical id&quot; | sort -u | wc -l
2
</code></pre><h4 id="单个物理CPU中Core个数"><a href="#单个物理CPU中Core个数" class="headerlink" title="单个物理CPU中Core个数"></a>单个物理CPU中Core个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq
cpu cores   : 8
</code></pre><h4 id="所有物理CPU上的Core个数（core-id-数量）"><a href="#所有物理CPU上的Core个数（core-id-数量）" class="headerlink" title="所有物理CPU上的Core个数（core id 数量）"></a>所有物理CPU上的Core个数（core id 数量）</h4><pre><code># cat /proc/cpuinfo | grep &quot;core id&quot; | uniq |  wc -l
32
</code></pre><h4 id="逻辑CPU个数"><a href="#逻辑CPU个数" class="headerlink" title="逻辑CPU个数"></a>逻辑CPU个数</h4><pre><code># cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l
32
</code></pre><h4 id="超线程（HT）技术"><a href="#超线程（HT）技术" class="headerlink" title="超线程（HT）技术"></a>超线程（HT）技术</h4><blockquote>
<p>number of processing units = number of cores [ no hyper threading ] </p>
<p>number of processing units = number of cores * 2 [ hyper threading present ]</p>
</blockquote>
<pre><code># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq
cpu cores   : 8
# cat /proc/cpuinfo | grep &quot;siblings&quot; | sort -u
siblings    : 16
# lscpu | grep Thread
Thread(s) per core:    2
</code></pre><h4 id="重要字段含义"><a href="#重要字段含义" class="headerlink" title="重要字段含义"></a>重要字段含义</h4><ul>
<li>processor 逻辑处理器的唯一标识符</li>
<li>physical id 每个物理封装的唯一标识符</li>
<li>core id 每个内核的唯一标识符</li>
<li>siblings 位于相同物理封装中的逻辑处理器的数量</li>
<li>cpu cores 位于相同物理封装中的内核数量</li>
</ul>
<p>各字段关系如下图所示：</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/5793DDE2-40C0-4147-AD14-C85C1574C2DE.png" alt=""> </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.binarytides.com/linux-check-processor/" target="_blank" rel="external">How to check processor and cpu details on Linux</a><br><a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/s2-proc-cpuinfo.html" target="_blank" rel="external">Deployment_Guide/s2-proc-cpuinfo</a><br><a href="http://blog.csdn.net/sycflash/article/details/6643492" target="_blank" rel="external">CPU信息/proc/cpuinfo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;proc-cpuinfo&quot;&gt;&lt;a href=&quot;#proc-cpuinfo&quot; class=&quot;headerlink&quot; title=&quot;/proc/cpuinfo&quot;&gt;&lt;/a&gt;/proc/cpuinfo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; Information about the processor, such as its type, make, model, and performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;信息查看&quot;&gt;&lt;a href=&quot;#信息查看&quot; class=&quot;headerlink&quot; title=&quot;信息查看&quot;&gt;&lt;/a&gt;信息查看&lt;/h3&gt;&lt;h4 id=&quot;CPU型号&quot;&gt;&lt;a href=&quot;#CPU型号&quot; class=&quot;headerlink&quot; title=&quot;CPU型号&quot;&gt;&lt;/a&gt;CPU型号&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cat /proc/cpuinfo | grep vendor | uniq
vendor_id   : GenuineIntel
#  cat /proc/cpuinfo | grep &amp;apos;model name&amp;apos; | uniq
model name  : Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;CPU-架构&quot;&gt;&lt;a href=&quot;#CPU-架构&quot; class=&quot;headerlink&quot; title=&quot;CPU 架构&quot;&gt;&lt;/a&gt;CPU 架构&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
......
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="cpuinfo" scheme="http://yoursite.com/tags/cpuinfo/"/>
    
  </entry>
  
  <entry>
    <title>Screen会话管理</title>
    <link href="http://yoursite.com/2016/05/23/screen/"/>
    <id>http://yoursite.com/2016/05/23/screen/</id>
    <published>2016-05-23T12:47:12.000Z</published>
    <updated>2017-06-23T15:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<p><a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">GNU’s Screen 官方站点</a></p>
<h3 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h3><h4 id="会话恢复"><a href="#会话恢复" class="headerlink" title="会话恢复"></a>会话恢复</h4><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。</p>
<h4 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h4><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p>
<a id="more"></a>
<h4 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h4><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>
<h3 id="三、常用参数"><a href="#三、常用参数" class="headerlink" title="三、常用参数"></a>三、常用参数</h3><pre><code>screen -S yourname   //新建一个叫yourname的session
screen -ls（或者screen -list） //列出当前所有的session
screen -r yourname  //回到yourname这个session
screen -d yourname   //远程detach某个session，转移到当前终端
screen -d -r yourname  //结束当前session并回到yourname这个session

ctrl+a x -&gt; 锁住当前的 window，需用用户密码解锁
ctrl-a k -&gt; kill window，强行关闭当前的 window
ctrl+a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响
</code></pre><h3 id="四、使用实例"><a href="#四、使用实例" class="headerlink" title="四、使用实例"></a>四、使用实例</h3><h4 id="创建新窗口"><a href="#创建新窗口" class="headerlink" title="创建新窗口"></a>创建新窗口</h4><pre><code># screen  -S text   // 创建一个名字为text的会话，会打开一个默认的shell环境（一般都是bash shell）
# vi file.txt
</code></pre><p>或</p>
<pre><code># screen vi file.txt   //退出vi将退出该会话
</code></pre><h3 id="会话分离与恢复"><a href="#会话分离与恢复" class="headerlink" title="会话分离与恢复"></a>会话分离与恢复</h3><p>在screen窗口键入C-a d，Screen会给出detached，暂时中断会话。</p>
<p>找到并恢复会话：</p>
<pre><code># screen -ls    //查看当前会话
There is a screen on:
10526.test  (05/23/2016 07:48:58 PM)    (Detached)
1 Socket in /var/run/screen/S-root. 

# screen -r  test  // 进入被中断的会话，screen的名字和编号都行
</code></pre><h4 id="清除-dead会话"><a href="#清除-dead会话" class="headerlink" title="清除 dead会话"></a>清除 dead会话</h4><pre><code># screen -wipe
</code></pre><h4 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h4><pre><code>Ctrl-a k  // kill会话，同时kill会话里的进程
Ctrl-a :   // 然后输入quit命令退出Screen会话,会杀死所有窗口并退出其中运行的所有程序
</code></pre><h3 id="会话共享-1"><a href="#会话共享-1" class="headerlink" title="会话共享"></a>会话共享</h3><pre><code># screen -x  screenname

-x  Attach to a not detached screen. (Multi display mode).
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;p&gt;GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/screen/&quot;&gt;GNU’s Screen 官方站点&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、功能&quot;&gt;&lt;a href=&quot;#二、功能&quot; class=&quot;headerlink&quot; title=&quot;二、功能&quot;&gt;&lt;/a&gt;二、功能&lt;/h3&gt;&lt;h4 id=&quot;会话恢复&quot;&gt;&lt;a href=&quot;#会话恢复&quot; class=&quot;headerlink&quot; title=&quot;会话恢复&quot;&gt;&lt;/a&gt;会话恢复&lt;/h4&gt;&lt;p&gt;只要Screen本身没有终止，在其内部运行的会话都可以恢复。对于远程登录的用户即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。&lt;/p&gt;
&lt;h4 id=&quot;多窗口&quot;&gt;&lt;a href=&quot;#多窗口&quot; class=&quot;headerlink&quot; title=&quot;多窗口&quot;&gt;&lt;/a&gt;多窗口&lt;/h4&gt;&lt;p&gt;在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="screen" scheme="http://yoursite.com/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础知识备忘</title>
    <link href="http://yoursite.com/2016/05/20/ansible/"/>
    <id>http://yoursite.com/2016/05/20/ansible/</id>
    <published>2016-05-20T08:25:38.000Z</published>
    <updated>2017-06-21T15:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、体系结构"><a href="#一、体系结构" class="headerlink" title="一、体系结构"></a>一、体系结构</h2><p>ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系统安装以外的批量系统配置、批量任务执行及批量程序部署等功能。</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/25.png" alt=""></p>
<ul>
<li>Inventory：主机库，定义可控制的主机</li>
<li>Modules：基于模块化设计，通过模块来实现批量部署</li>
<li>playbook：剧本，使用YAML编写的声明性的配置文件</li>
<li>plugins: 插件，完成日志记录、邮件等功能</li>
</ul>
<a id="more"></a>
<h2 id="二、-特点"><a href="#二、-特点" class="headerlink" title="二、 特点"></a>二、 特点</h2><ul>
<li>高度模块化，借助模块完成各种任务</li>
<li>agentless，无需在被控制端安装agent</li>
<li>默认基于ssh协议向被控制端发送操作指令<ul>
<li>基于密钥认证</li>
<li>在inventory文件中指定账号和密码</li>
</ul>
</li>
<li>批量任务执行可写成剧本playbook</li>
<li>幂等性：不会重复执行相同操作</li>
</ul>
<h2 id="三、简单使用"><a href="#三、简单使用" class="headerlink" title="三、简单使用"></a>三、简单使用</h2><h3 id="3-1-ssh免密钥登录"><a href="#3-1-ssh免密钥登录" class="headerlink" title="3.1 ssh免密钥登录"></a>3.1 ssh免密钥登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ssh-keygen -t rsa -P &apos;&apos;</div><div class="line"># ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.249.6.64</div><div class="line"># ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.48.156.8</div></pre></td></tr></table></figure>
<h3 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><h4 id="ansible-doc"><a href="#ansible-doc" class="headerlink" title="ansible-doc"></a>ansible-doc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Options:</div><div class="line"></div><div class="line">   -l, --list            List available modules  //列出所有模块</div><div class="line">   -s, --snippet         Show playbook snippet for specified module(s) //查看指定模块用法</div><div class="line"></div><div class="line">// 更多信息请参考manual手册</div></pre></td></tr></table></figure>
<h4 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h4><blockquote>
<p>ansible <host-pattern>  [-f forks][-m module_name] [-a args] [options]</host-pattern></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Options:</div><div class="line"></div><div class="line">    -a MODULE_ARGS, --args=MODULE_ARGS</div><div class="line">                        module arguments   // 传递模块参数</div><div class="line">    -f FORKS, --forks=FORKS  // 指定并发数</div><div class="line">                        specify number of parallel processes to use</div><div class="line">                        (default=5)</div><div class="line">    -i INVENTORY, --inventory-file=INVENTORY</div><div class="line">                        specify inventory host file</div><div class="line">                        (default=/etc/ansible/hosts)</div><div class="line">    -m MODULE_NAME, --module-name=MODULE_NAME</div><div class="line">                        module name to execute (default=command)</div><div class="line">//更多信息请参考manual手册</div></pre></td></tr></table></figure>
<h4 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h4><blockquote>
<p>ansible-playbook <filename.yml> … [options]</filename.yml></p>
</blockquote>
<h2 id="四、模块"><a href="#四、模块" class="headerlink" title="四、模块"></a>四、模块</h2><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>命令模块: ansible默认模块，用于在远程执行命令，command模块并不支持shell变量和管道等，若想使用shell来执行，应使用shell模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^command</div><div class="line">command              Executes a command on a remote node</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m command -a &quot;date&quot;</div><div class="line">10.249.6.64 | success | rc=0 &gt;&gt;</div><div class="line">Wed May 11 21:21:35 CST 2016</div></pre></td></tr></table></figure>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>ping模块：测试指定主机是否能连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  -w ^ping</div><div class="line">ping                 Try to connect to host and return `pong&apos; on success.</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m ping</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h3><p>计划任务模块 ：管理计划任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  ^cron</div><div class="line">cron                 Manage cron.d and crontab entries.</div><div class="line"></div><div class="line"># ansible-doc  -s cron</div><div class="line">- name: Manage cron.d and crontab entries.</div><div class="line">action: cron</div><div class="line">    backup                 # If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup&apos; variable by this module.</div><div class="line">    cron_file              # If specified, uses this file in cron.d instead of an individual user&apos;s crontab.</div><div class="line">    day                    # Day of the month the job should run ( 1-31, *, */2, etc )</div><div class="line">    hour                   # Hour when the job should run ( 0-23, *, */2, etc )</div><div class="line">    job                    # The command to execute. Required if state=present.</div><div class="line">    minute                 # Minute when the job should run ( 0-59, *, */2, etc )</div><div class="line">    month                  # Month of the year the job should run ( 1-12, *, */2, etc )</div><div class="line">    name                   # Description of a crontab entry.</div><div class="line">    reboot                 # If the job should be run at reboot. This option is deprecated. Users should use special_time.</div><div class="line">    special_time           # Special time specification nickname.</div><div class="line">    state                  # Whether to ensure the job is present or absent.</div><div class="line">    user                   # The specific user who&apos;s crontab should be modified.</div><div class="line">    weekday                # Day of the week that the job should run ( 0-7 for Sunday - Saturday, *, etc )</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m cron -a &apos;name=&quot;sync time&quot; minute=&quot;*/10&quot; \</div><div class="line">  job=&quot;/usr/sbin/ntpdate 0.centos.pool.ntp.org &amp;&amp; hwclock -w&quot; &apos;</div><div class="line"></div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;jobs&quot;: [</div><div class="line">    &quot;sync time&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>用户模块：管理用户账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^user</div><div class="line">user                 Manage user accounts</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m user -a &apos;name=work shell=/bin/bash home=/home/www&apos;   //添加用户</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;comment&quot;: &quot;&quot;,</div><div class="line">    &quot;createhome&quot;: true,</div><div class="line">    &quot;group&quot;: 500,</div><div class="line">    &quot;home&quot;: &quot;/home/www&quot;,</div><div class="line">    &quot;name&quot;: &quot;work&quot;,</div><div class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;,</div><div class="line">    &quot;state&quot;: &quot;present&quot;,</div><div class="line">    &quot;system&quot;: false,</div><div class="line">    &quot;uid&quot;: 500</div><div class="line">&#125;</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m user -a &apos;name=work state=absent&apos;  // 删除用户</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;force&quot;: false,</div><div class="line">    &quot;name&quot;: &quot;work&quot;,</div><div class="line">    &quot;remove&quot;: false,</div><div class="line">    &quot;state&quot;: &quot;absent&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>copy模块：文件复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#  ansible-doc -l | grep ^copy</div><div class="line">copy                 Copies files to remote locations.</div><div class="line"></div><div class="line"># ansible-doc -s copy</div><div class="line">- name: Copies files to remote locations.</div><div class="line">action: copy</div><div class="line">    backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.</div><div class="line">    content                # When used instead of &apos;src&apos;, sets the contents of a file directly to the specified value.</div><div class="line">    dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.</div><div class="line">    directory_mode         # When doing a recursive copy set the mode for the directories. If this is not set we will default the system defaults.</div><div class="line">    force                  # the default is `yes&apos;, which will replace the remote file when contents are different than the source.  If `no&apos;, the file will only be transferred if the destination does not exist.</div><div class="line">    src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with &quot;/&quot;, only inside contents of that directory are copied to destination. Otherwise, if it does not end with &quot;/&quot;, the directory itself with all contents is copied. This behavior is similar to Rsync.</div><div class="line">    validate               # The validation command to run before copying into place.  The path to the file to validate is passed in via &apos;%s&apos; which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won&apos;t work.</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m copy -a &quot;src=/root/test.txt dest=/tmp/&quot;</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;dest&quot;: &quot;/tmp/test.txt&quot;,</div><div class="line">    &quot;gid&quot;: 0,</div><div class="line">    &quot;group&quot;: &quot;root&quot;,</div><div class="line">    &quot;md5sum&quot;: &quot;d41d8cd98f00b204e9800998ecf8427e&quot;,</div><div class="line">    &quot;mode&quot;: &quot;0644&quot;,</div><div class="line">    &quot;owner&quot;: &quot;root&quot;,</div><div class="line">    &quot;size&quot;: 0,</div><div class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1463662606.99-26627840524349/source&quot;,</div><div class="line">    &quot;state&quot;: &quot;file&quot;,</div><div class="line">    &quot;uid&quot;: 0</div><div class="line">&#125;</div><div class="line"># ansible 10.249.6.64 -m copy -a &quot;content=&apos;hello world&apos; dest=/tmp/test.txt&quot;</div><div class="line"># ansible 10.249.6.64 -m copy -a &apos;src=/root/test.txt dest=/tmp/test.txt owner=evans group=evans mode=600 backup=yes&apos;</div></pre></td></tr></table></figure>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>file模块：文件模块，设置文件属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep -w ^file</div><div class="line">file                 Sets attributes of files</div><div class="line"># ansible 10.249.6.64 -m file -a &quot;src=/tmp/test.txt path=/tmp/test.link state=link&quot;</div><div class="line"># ansible 10.249.6.64 -m file -a &quot;owner=evans group=evans mode=600 path=/tmp/test.txt&quot;</div></pre></td></tr></table></figure>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>service模块： 服务模块，管理系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^service</div><div class="line">service              Manage services.</div><div class="line"># ansible-doc -s service</div><div class="line">- name: Manage services.</div><div class="line">  action: service</div><div class="line">    arguments              # Additional arguments provided on the command line</div><div class="line">    enabled                # Whether the service should start on boot. *At least one of state and enabled are required.*</div><div class="line">    name=                  # Name of the service.</div><div class="line">    pattern                # If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps&apos; command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.</div><div class="line">    runlevel               # For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.</div><div class="line">    sleep                  # If the service is being `restarted&apos; then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.</div><div class="line">    state                  # `started&apos;/`stopped&apos; are idempotent actions that will not run commands unless necessary.  `restarted&apos; will always bounce the service.  `reloaded&apos; will always reload. *At least one of state and enabled are required.*</div><div class="line"># ansible 10.249.6.64 -m service -a &quot;name=mysqld state=restarted enabled=true&quot;  //重启mysql服务并设置开机自启动</div></pre></td></tr></table></figure>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>shell模块：远程执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible 10.249.6.64 -m shell -a &apos;date&apos;</div><div class="line">10.249.6.64 | success | rc=0 &gt;&gt;</div><div class="line">Thu May 19 21:20:51 CST 2016</div></pre></td></tr></table></figure>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>script模块：脚本模块，远程主机运行脚本<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc  -l | grep ^script</div><div class="line">script               Runs a local script on a remote node after transferring it..</div><div class="line"># ansible 10.249.6.64 -m script -a &apos;/root/test.sh&apos;  //在远程主机上运行脚本，并没有拷贝到指定目录</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;rc&quot;: 0,</div><div class="line">    &quot;stderr&quot;: &quot;&quot;,</div><div class="line">    &quot;stdout&quot;: &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="yum、apt"><a href="#yum、apt" class="headerlink" title="yum、apt"></a>yum、apt</h3><p>yum模块和apt模块：包管理模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum                  Manages packages with the `yum&apos; package manager</div><div class="line">apt                  Manages apt-packages</div><div class="line"># ansible 10.249.6.64 -m yum -a &quot;name=tree state=present&quot;</div><div class="line"># ansible 10.249.6.43 -m apt -a &quot;name=tree state=present&quot;</div><div class="line"># ansible 10.249.6.43 -m apt -a &quot;name=tree state=absent&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p> state<br>Whether to install (<code>present&#39;,</code>latest’), or remove (`absent’) a package.</p>
</blockquote>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>setup模块：收集主机信息，playbook运行时，会自动调用setup模块收集远程主机的相关信息（称为facts，如操作系统版本、ip地址、cpu数量等），这些信息保存于变量中，可在playbook中引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  setup</div><div class="line">setup                Gathers facts about remote hosts</div><div class="line"># ansible-doc -s setup</div><div class="line">- name: Gathers facts about remote hosts</div><div class="line">    action: setup</div><div class="line">    fact_path              # path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format</div><div class="line">    filter                 # if supplied, only return facts that match this shell-style (fnmatch) wildcard.</div><div class="line"># ansible 10.249.6.43 -m setup</div><div class="line"># ansible 10.249.6.43 -m setup -a &apos;filter=ansible_eth0&apos;   //过滤信息</div><div class="line"># ansible 10.249.6.64 -m setup --tree /tmp/test.txt  //将收集的信息输出到本地文件</div></pre></td></tr></table></figure>
<p>更多模块信息请查看：<a href="http://docs.ansible.com/ansible/list_of_all_modules.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="五、playbook"><a href="#五、playbook" class="headerlink" title="五、playbook"></a>五、playbook</h2><h3 id="5-1-YAML"><a href="#5-1-YAML" class="headerlink" title="5.1 YAML"></a>5.1 YAML</h3><p>YAML是一种可读性高的用来表达资料序列的语言，其语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。</p>
<p>所有的yaml文件都以”—“开头表示开始一个document，所有的列表元素以”-“开头，键值对用”:”，后面必须有空格。YAML文件扩展名通常为.yaml或.yml</p>
<h3 id="5-2-playbook简介"><a href="#5-2-playbook简介" class="headerlink" title="5.2 playbook简介"></a>5.2 playbook简介</h3><p>playbook是ansible管理配置、部署应用和编排的文件，可用来描述在远程主机上执行的策略或一组任务。</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块。</p>
<p>playbook使用YAML语言编写，文件名以.yaml或.yml结尾。此外playbook和模板文件（template）还可使用jinja2语法语法实现高级功能。</p>
<p>5.2.1 playbook的基本组成</p>
<ul>
<li>targets：指定要执行playbook的远程主机组</li>
<li>variables：定义playbook运行时需要使用的变量</li>
<li>tasks：要执行的任务</li>
<li>handlers：处理器，在某些条件下被触发的操作</li>
</ul>
<p>简单playbook示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># cat nginx.yml</div><div class="line">---</div><div class="line">- hosts: 10.249.6.43</div><div class="line">  user: root</div><div class="line">  vars:</div><div class="line">    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf</div><div class="line">  tasks:</div><div class="line">  - name: install nginx</div><div class="line">    apt: name=nginx state=latest</div><div class="line">    when: ansible_distribution == &apos;Ubuntu&apos;</div><div class="line"></div><div class="line">  - name: configration file</div><div class="line">    tags: conf</div><div class="line">    copy: src=/root/mirror.conf dest=&#123;&#123;remote_conffile_path&#125;&#125;</div><div class="line">    notify: restart nginx</div><div class="line"></div><div class="line">  - name: start nginx</div><div class="line">    service: name=nginx enabled=yes state=started</div><div class="line"></div><div class="line">  handlers:</div><div class="line">  - name: restart nginx</div><div class="line">    service: name=nginx state=restarted</div><div class="line"># ansible-playbook  nginx.yml   // 执行playbook</div></pre></td></tr></table></figure>
<ul>
<li>hosts、user</li>
</ul>
<p>hosts用于指定要执行指定任务的主机，其可以是一个或多个由逗号分隔主机组；user则用于指定远程主机上的执行任务的用户，还能使用sudo</p>
<ul>
<li>task list、action</li>
</ul>
<p>task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个。如果中途发生错误，所有已执行任务都将回滚，因此，在更正playbook后重新执行一次即可。</p>
<p> task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致。</p>
<p> 每个task都应该有其name，用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出。</p>
<p>定义task的可以使用“action: module options”或“module: options”的格式，推荐使用后者以实现向后兼容例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: make sure apache is running</div><div class="line">  service: name=httpd state=running</div></pre></td></tr></table></figure>
<p>在众多模块中，只有command和shell模块仅需要给定一个列表而无需使用“key=value”格式，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: disable selinux</div><div class="line">  command: /sbin/setenforce 0</div></pre></td></tr></table></figure>
<p>shell模块执行多条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- name: update zabbix agent conf</div><div class="line">  shell: |</div><div class="line">       ...</div></pre></td></tr></table></figure>
<p>如果模块执行返回值不为零，即表示执行失败，任务会立即中止，后续任务不再执行。可以使用ignore_errors来忽略错误信息确保后续任务的执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">    - name: run this command and ignore the result</div><div class="line">      shell: /usr/bin/somecommand</div><div class="line">      ignore_errors: yes</div></pre></td></tr></table></figure>
<ul>
<li>handlers</li>
</ul>
<p>当关注的资源发生变化时触发一定的操作。handler是task列表，这些task与前述的task并没有本质上的不同。</p>
<p>“notify”这个action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，取而代之，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- name: template configuration file</div><div class="line">  template: src=/root/template.conf dest=/etc/template.conf</div><div class="line"></div><div class="line">notify:</div><div class="line">  - restart memcached</div><div class="line">  - restart apache</div><div class="line"></div><div class="line">handlers:</div><div class="line">  - name: restart memcached</div><div class="line">    service: name=memcached state=restarted</div><div class="line">  - name: restart apache</div><div class="line">    service: name=apache state=restarted</div></pre></td></tr></table></figure>
<ul>
<li>vars</li>
</ul>
<p>变量名仅能由字母、数字和下划线组成，且只能以字母开头</p>
<ul>
<li>when</li>
</ul>
<p>条件判断：如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提，这时就要用到条件判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;</div><div class="line"></div><div class="line">when: ansible_distribution == &apos;CentOS&apos; or ansible_distribution == &apos;RedHat&apos; and ansible_distribution_version|int &gt;=6</div></pre></td></tr></table></figure>
<p>忽略此前某语句的错误并基于其结果（failed或者sucess）运行后面指定的语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- hosts: 10.249.6.64</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">    - name: false test</div><div class="line">      command: /bin/false</div><div class="line">      register: result</div><div class="line">      ignore_errors: yes</div><div class="line">    - name: when false  to do</div><div class="line">      command: touch /tmp/1.txt</div><div class="line">      when: result | failed</div><div class="line">    - name: when success to do</div><div class="line">      command: touch /tmp/2.txt</div><div class="line">      when: result | success</div><div class="line">    - name: when skip to do</div><div class="line">      command: touch /tmp/3.txt</div><div class="line">      when: result | skipped</div></pre></td></tr></table></figure>
<ul>
<li>item</li>
</ul>
<p>item 迭代：当有需要重复性执行的任务时，可以使用迭代机制。其使用格式为将需要迭代的内容定义为item变量引用，并通过with_items语句来指明迭代的元素列表即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- name: install base software</div><div class="line">  apt: pkg=&#123;&#123; item &#125;&#125; state=present force=yes</div><div class="line">  with_items:</div><div class="line">    - gcc</div><div class="line">    - g++</div><div class="line">    - mysql-client-5.5</div><div class="line">    - libmcrypt-dev</div><div class="line">    - libmysqlclient-dev</div><div class="line">    - libgmp10</div><div class="line">    - vim</div><div class="line">    - openssh-client</div><div class="line">    - ethtool</div><div class="line">  when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;</div></pre></td></tr></table></figure>
<ul>
<li>tag</li>
</ul>
<p>tag标签：让用户选择运行playbook中的某个或某些任务。虽然ansible具有幂等性，会跳过没有变化的部分，有些代码为测试其确实没有发生变化，也会耗费很长时间。我们将playbook中的指定任务打上标签，在运行playbook时指定标签名称，这样就不用运行全部代码了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- hosts: 10.249.6.43</div><div class="line">  user: root</div><div class="line">  vars:</div><div class="line">    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf</div><div class="line">  tasks:</div><div class="line">  - name: install nginx</div><div class="line">    apt: name=nginx state=latest</div><div class="line">    when: ansible_distribution == &apos;Ubuntu&apos;</div><div class="line">      </div><div class="line">  - name: configration file</div><div class="line">    tags: conf</div><div class="line">    copy: src=/root/mirror.conf dest=&#123;&#123;remote_conffile_path&#125;&#125;</div><div class="line">    notify: restart nginx</div><div class="line"></div><div class="line">  - name: start nginx</div><div class="line">    service: name=nginx enabled=yes state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart nginx</div><div class="line">    service: name=nginx state=restarted</div><div class="line"># ansible-playbook nginx.yml -t conf   // 只执行tags部分</div></pre></td></tr></table></figure>
<h2 id="六、roles"><a href="#六、roles" class="headerlink" title="六、roles"></a>六、roles</h2><p>roles 用于层次性、结构化地组织playbook。</p>
<p>roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。roles就是通过分别将变量、文件、任务、模块及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ls</div><div class="line">deploy_hosts  deploy.yml  roles  run.sh</div><div class="line"># cat deploy_hosts   //主机或主机组列表</div><div class="line">[web]</div><div class="line">10.126.83.30</div><div class="line">10.126.93.83</div><div class="line">[db]</div><div class="line">10.126.87.150</div><div class="line">10.126.92.89</div><div class="line"># cat deploy.yml  // 总的playbook 调用roles</div><div class="line">---</div><div class="line">- name: init for os</div><div class="line">  hosts: web</div><div class="line">  user: root</div><div class="line">  gather_facts: True</div><div class="line">  roles:</div><div class="line">    - init</div><div class="line">    - raid</div><div class="line">- name: init for os</div><div class="line">  hosts: db</div><div class="line">  user: root</div><div class="line">  gather_facts: True</div><div class="line">  roles:</div><div class="line">    - init</div><div class="line">    - raid</div><div class="line">    - db_init</div><div class="line"></div><div class="line"># cat run.sh  // 运行playbook脚本</div><div class="line">#!/bin/bash</div><div class="line">/usr/bin/ansible-playbook -i ./deploy_hosts deploy.yml</div><div class="line"># ls roles/</div><div class="line">db_init   init    raid</div></pre></td></tr></table></figure>
<p>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录，用不到的目录可以创建为空目录，也可以不创建。</p>
<p>role内各目录中可用的文件:</p>
<ul>
<li><p>tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；此文件可以使用include包含其它的位于此目录中的task文件</p>
</li>
<li><p>files目录：存放由copy或script等模块调用的静态文件</p>
</li>
<li><p>templates目录：template模块会自动在此目录中寻找Jinja2模板文件</p>
</li>
<li><p>handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；此文件可以使用include包含其它的位于此目录中的handler文件</p>
</li>
<li><p>vars目录：至少有一个main.yml文件，用于定义此角色用到的变量</p>
</li>
<li><p>meta目录：至少有一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；ansible 1.3及其以后的版本才支持</p>
</li>
<li><p>default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</p>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://9124573.blog.51cto.com/9114573/1769887" target="_blank" rel="external">轻量级自动化运维工具ansible</a></p>
<p><a href="http://docs.ansible.com/ansible/intro.html" target="_blank" rel="external">ansible doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、体系结构&quot;&gt;&lt;a href=&quot;#一、体系结构&quot; class=&quot;headerlink&quot; title=&quot;一、体系结构&quot;&gt;&lt;/a&gt;一、体系结构&lt;/h2&gt;&lt;p&gt;ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系统安装以外的批量系统配置、批量任务执行及批量程序部署等功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inventory：主机库，定义可控制的主机&lt;/li&gt;
&lt;li&gt;Modules：基于模块化设计，通过模块来实现批量部署&lt;/li&gt;
&lt;li&gt;playbook：剧本，使用YAML编写的声明性的配置文件&lt;/li&gt;
&lt;li&gt;plugins: 插件，完成日志记录、邮件等功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Zabbix工作模式</title>
    <link href="http://yoursite.com/2016/05/18/zabbix-agent/"/>
    <id>http://yoursite.com/2016/05/18/zabbix-agent/</id>
    <published>2016-05-18T10:03:31.000Z</published>
    <updated>2017-06-23T15:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Zabbix uses a JSON based communication protocol for communicating with Zabbix agent.</p>
</blockquote>
<p>zabbix agent通信过程中的协议均基于json格式。主动模式和被动模式是相对于agent来说的。agent主动发送数据给server即为主动模式。</p>
<h3 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h3><p>server向agent请求获取监控项的数据，agent返回数据。</p>
<blockquote>
<p>A passive check is a simple data request. Zabbix server or proxy asks for some data (for example, CPU load) and Zabbix agent sends back the result to the server.</p>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>Server 发起请求：</p>
<pre><code>&lt;item key&gt;\n
</code></pre><p>Agent 返回响应数据：</p>
<pre><code>&lt;HEADER&gt;&lt;DATALEN&gt;&lt;DATA&gt;
</code></pre><p>server发送request给agent，agent收到request后本地执行相关检测收集到数据之后，发送数据到server端， 以agent.ping key 值为例具体工作流程如下：</p>
<p>1.Server opens a TCP connection</p>
<p>2.Server sends agent.ping\n</p>
<p>3.Agent reads the request and responds with <header><datalen></datalen></header></p>
<p>4.Server processes data to get the value, ‘1’ in our case</p>
<p>5.TCP connection is closed</p>
<h3 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h3><blockquote>
<p>Active checks require more complex processing. The agent must first retrieve from the server(s) a list of items for independent processing.</p>
<p>The servers to get the active checks from are listed in the ‘ServerActive’ parameter of the agent configuration file. The frequency of asking for these checks is set by the ‘RefreshActiveChecks’ parameter in the same configuration file. However, if refreshing active checks fails, it is retried after hardcoded 60 seconds. The agent then periodically sends the new values to the server(s).</p>
</blockquote>
<p>主动模式的工作流程要比被动模式的复杂一些，zabbix客户端代理（Agent）首先必须从服务器获取监控项列表来进行独立处理，然后它将定期发送新数据给服务器。</p>
<p>Part1: Getting the list of items</p>
<ol>
<li><p>Agent opens a TCP connection</p>
</li>
<li><p>Agent asks for the list of checks</p>
</li>
<li><p>Server responds with a list of items (item key, delay)</p>
</li>
<li><p>Agent parses the response</p>
</li>
<li><p>TCP connection is closed</p>
</li>
<li><p>Agent starts periodical collection of data</p>
</li>
</ol>
<p>Part2: agent send values</p>
<ol>
<li>Agent opens a TCP connection</li>
<li>Agent sends a list of values</li>
<li>Server processes the data and sends the status back</li>
<li>TCP connection is closed</li>
</ol>
<p>当使用被动式的时候，server和agent之间需要对每个item的检测建立一次tcp连接。 如果检测的item和agent过多的时候，对server端的性能是一个很大的考验，所以当agent 和items 数量增多时可以根据实际情况设置工作模式。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.2/manual/appendix/items/activepassive#passive_checks" target="_blank" rel="external">zabbix doc </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Zabbix uses a JSON based communication protocol for communicating with Zabbix agent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;zabbix agent通信过程中的
    
    </summary>
    
      <category term="Ops" scheme="http://yoursite.com/categories/Ops/"/>
    
    
      <category term="zabbix agent" scheme="http://yoursite.com/tags/zabbix-agent/"/>
    
  </entry>
  
  <entry>
    <title>free查看内存相关信息</title>
    <link href="http://yoursite.com/2016/03/03/free/"/>
    <id>http://yoursite.com/2016/03/03/free/</id>
    <published>2016-03-03T11:02:23.000Z</published>
    <updated>2017-06-23T15:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><h4 id="manual-description"><a href="#manual-description" class="headerlink" title="manual description"></a>manual description</h4><blockquote>
<p>free  displays  the total amount of free and used physical and swap memory in the system, as well as the buffers used bythe kernel.</p>
<p>The shared memory column represents either the MemShared value (2.4 series kernels) or the Shmem value (2.6 series kernels and later) taken from the /proc/meminfo file. The value is zero if none of the entries is exported by the kernel.</p>
</blockquote>
<h4 id="buffers-and-cached"><a href="#buffers-and-cached" class="headerlink" title="buffers and cached"></a>buffers and cached</h4><blockquote>
<p><strong>What is the difference between buffers and Cache?</strong></p>
<p>A buffer is a temporary location to store data for a particular application and this data is not used by any other application. This is similar to bandwidth concept. When you try to send burst of data through network, if your network card is capable of sending less data, it will keep these huge amounts of data in buffer so that it can send data constantly in lesser speeds. In other hand Cache is a memory location to store frequently used data for faster access. Other difference between a buffer and a cache is that cache can be used multiple times where as buffer is used single time. And both are temporary store for your data processing.</p>
</blockquote>
<ul>
<li>A buffer is something that has yet to be “written” to disk.</li>
<li>A cache is something that has been “read” from the disk and stored for later use.</li>
</ul>
<p>buffer是用于存放要输出到disk（块设备）的数据的，而cache是存放从disk上读出的数据。   这二者是为了提高IO性能的。为了提高IO read的性能，总是要多cache一些数据，这也就是为什么cached memor比较大，而比较小的原因。</p>
<pre><code>root@Mr-zhao:~# free -m
             total       used       free     shared    buffers     cached
Mem:          2001        979       1021          0         58        774
-/+ buffers/cache:        146       1854
Swap:         4092          0       4092
</code></pre><p>当我们第一次读一个大文件时耗时可能会比第二次长，原因就是第二次读取时已有cache数据。</p>
<ul>
<li><p>-/+ buffers/cache(used): 表示一个应用程序认为系统被用掉多少内存；</p>
<p>  -/+ buffers/cache(used) = Mem(used) – Mem(buffers) – Mem(cached)</p>
</li>
<li><p>-/+ buffers/cache(free)，表示一个应用程序认为系统还有多少内存；</p>
<p>  -/+ buffers/cache(free) = Mem(free) + Mem(buffers) + Mem(cached)</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html" target="_blank" rel="external">Linux上的free命令详解</a><br><a href="http://www.freelinuxconsole.info/understanding-free-command-in-linuxunix-2/" target="_blank" rel="external">Understanding free command in Linux/Unix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;free&quot;&gt;&lt;a href=&quot;#free&quot; class=&quot;headerlink&quot; title=&quot;free&quot;&gt;&lt;/a&gt;free&lt;/h3&gt;&lt;h4 id=&quot;manual-description&quot;&gt;&lt;a href=&quot;#manual-description&quot; class=&quot;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="free" scheme="http://yoursite.com/tags/free/"/>
    
  </entry>
  
  <entry>
    <title>ulimit小记</title>
    <link href="http://yoursite.com/2016/02/25/ulimit/"/>
    <id>http://yoursite.com/2016/02/25/ulimit/</id>
    <published>2016-02-25T11:11:45.000Z</published>
    <updated>2017-06-21T15:30:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ulimit简介"><a href="#ulimit简介" class="headerlink" title="ulimit简介"></a>ulimit简介</h2><p>ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。</p>
<p>作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。</p>
<a id="more"></a>
<h2 id="ulimit的设置"><a href="#ulimit的设置" class="headerlink" title="ulimit的设置"></a>ulimit的设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ulimit  -a    //查看当前配置文件ulimit全局系数</div><div class="line">core file size          (blocks, -c) 0</div><div class="line">data seg size           (kbytes, -d) unlimited</div><div class="line">scheduling priority             (-e) 0</div><div class="line">file size               (blocks, -f) unlimited</div><div class="line">pending signals                 (-i) 7389</div><div class="line">max locked memory       (kbytes, -l) 64</div><div class="line">max memory size         (kbytes, -m) unlimited</div><div class="line">open files                      (-n) 10240</div><div class="line">pipe size            (512 bytes, -p) 8</div><div class="line">POSIX message queues     (bytes, -q) 819200</div><div class="line">real-time priority              (-r) 0</div><div class="line">stack size              (kbytes, -s) 10240</div><div class="line">cpu time               (seconds, -t) unlimited</div><div class="line">max user processes              (-u) 10240</div><div class="line">virtual memory          (kbytes, -v) unlimited</div><div class="line">file locks                      (-x) unlimited</div></pre></td></tr></table></figure>
<p>对于线上环境的机器一般要对<code>open files</code>和<code>max user processes</code>进行修改。</p>
<h3 id="临时性的修改，只对当前shell生效。"><a href="#临时性的修改，只对当前shell生效。" class="headerlink" title="临时性的修改，只对当前shell生效。"></a>临时性的修改，只对当前shell生效。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ulimit  -n 65535</div><div class="line"># ulimit  -u 65535</div></pre></td></tr></table></figure>
<p><strong>想要ulimit的设置永久性生效，需要修改/etc/security/limits.conf文件</strong></p>
<p>对于centos系统/etc/security/limits.d/90-nproc.conf文件的优先级高于/etc/security/limits.conf，所以对全局的设定需修改90-nproc.conf文件。对于单个用户的ulimit的设置并不受etc/security/limits.d/90-nproc.conf影响。</p>
<p>对于ubuntu系统，只需对/etc/security/limits.conf文件进行修改，ubuntu系统没有引入90-nproc.conf文件。但是ubuntux系统也会存在一个问题，就是对全局的设置其实对于root用户是没有效果的。所以ubuntu系统下的设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># grep -Ev &quot;^$|^#&quot; /etc/security/limits.conf</div><div class="line">root - nofile 65535</div><div class="line">root - nproc  65535</div><div class="line">* - nofile 65535</div><div class="line">* - nproc 65535</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-ulimit/" target="_blank" rel="external">通过 ulimit 改善系统性能</a><br><a href="http://ss64.com/bash/limits.conf.html" target="_blank" rel="external">limits.conf - configuration file</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ulimit简介&quot;&gt;&lt;a href=&quot;#ulimit简介&quot; class=&quot;headerlink&quot; title=&quot;ulimit简介&quot;&gt;&lt;/a&gt;ulimit简介&lt;/h2&gt;&lt;p&gt;ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。&lt;/p&gt;
&lt;p&gt;作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL主从复制备忘</title>
    <link href="http://yoursite.com/2016/01/15/mysql-duplicate/"/>
    <id>http://yoursite.com/2016/01/15/mysql-duplicate/</id>
    <published>2016-01-15T13:43:35.000Z</published>
    <updated>2017-06-21T15:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li><p>Master:10.249.17.38</p>
</li>
<li><p>Slave:10.249.17.45</p>
</li>
</ul>
<h2 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h2><ul>
<li>主从复制的步骤</li>
</ul>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/94D51A80-A0DB-4189-8F30-673260AC6FCC.png" alt=""></p>
<a id="more"></a>
<p>1.master将改变记录到二进制日志(binary log)</p>
<p>2.slave将master的binary log events(二进制日志事件)拷贝到它的中继日志(relay log)</p>
<p>3.slave重做中继日志中的事件，将改变反映它自己的数据。</p>
<h3 id="主从复制类型"><a href="#主从复制类型" class="headerlink" title="主从复制类型"></a>主从复制类型</h3><ul>
<li>基于语句的复制：</li>
</ul>
<p>在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。一旦发现没法精确复制时，会自动选着基于行的复制。</p>
<ul>
<li>基于行的复制：</li>
</ul>
<p>把改变的内容复制过去，而不是把命令在从服务器上执行一遍. 从mysql5.0开始支持。</p>
<ul>
<li>混合类型的复制:</li>
</ul>
<p>默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</p>
<h2 id="配置Master和Slave"><a href="#配置Master和Slave" class="headerlink" title="配置Master和Slave"></a>配置Master和Slave</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mysqladmin -u root -p password 123  // 修改密码</div><div class="line">mysql&gt; grant replication slave,replication client on *.* to  zzf@10.249.17.45 identified by &quot;zzf&quot;;  //建立内部复制用户</div></pre></td></tr></table></figure>
<p>编辑/etc/my.cnf 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">server_id=1</div><div class="line">log-bin=mysql-bin</div><div class="line">...</div></pre></td></tr></table></figure>
<p>重启服务，查看状态</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/BAC-9068-D8174D803F18.png" alt=""></p>
<h3 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mysqladmin -u root -p password 123  // 修改密码</div></pre></td></tr></table></figure>
<p>编辑/etc/my.cnf 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">server_id=2</div><div class="line">log-bin=mysql-bin</div><div class="line">log_slave_updates=1</div><div class="line">...</div></pre></td></tr></table></figure>
<p>同步master并查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; change master to master_host=&apos;10.249.17.38&apos;,master_user=&apos;zzf&apos;,master_password=&apos;zzf&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=106;</div><div class="line">mysql&gt; start slave;</div></pre></td></tr></table></figure>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/F2D3964D-8081-4F27-ACFF-39ADF603CCDB.png" alt=""></p>
<blockquote>
<p>Slave_IO_Running: Yes\<br>Slave_SQL_Running: Yes</p>
</blockquote>
<h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><h3 id="Master-1"><a href="#Master-1" class="headerlink" title="Master"></a>Master</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; create database zzf;</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line">mysql&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| test               |</div><div class="line">| zzf                |</div><div class="line">+--------------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="Slave-1"><a href="#Slave-1" class="headerlink" title="Slave"></a>Slave</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| test               |</div><div class="line">| zzf                |</div><div class="line">+--------------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Master:10.249.17.38&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slave:10.249.17.45&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主从复制的原理&quot;&gt;&lt;a href=&quot;#主从复制的原理&quot; class=&quot;headerlink&quot; title=&quot;主从复制的原理&quot;&gt;&lt;/a&gt;主从复制的原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主从复制的步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/94D51A80-A0DB-4189-8F30-673260AC6FCC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>运维必备之Linux命令概览</title>
    <link href="http://yoursite.com/2016/01/01/command/"/>
    <id>http://yoursite.com/2016/01/01/command/</id>
    <published>2016-01-01T12:48:46.000Z</published>
    <updated>2017-06-23T15:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/C3EB9F70-7F51-4B46-8B14-825CD9B8C11B.png" alt=""></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/BF852F66-2D8E-42D8-A4EB-2826A98C354C.png" alt=""></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/429014F3-442B-4115-A97D-32D62E6BEE7F.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Linux Performance</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;监控&quot;&gt;&lt;a href=&quot;#监控&quot; class=&quot;headerlink&quot; title=&quot;监控&quot;&gt;&lt;/a&gt;监控&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vzmp5.com1.z0.glb.clouddn.com/C3EB9F70-7F51-4B46-8B1
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="命令汇总" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>dmidecode查看服务器硬件信息</title>
    <link href="http://yoursite.com/2015/10/21/dmidecode/"/>
    <id>http://yoursite.com/2015/10/21/dmidecode/</id>
    <published>2015-10-21T12:43:03.000Z</published>
    <updated>2017-06-23T15:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dmidecode-简介"><a href="#Dmidecode-简介" class="headerlink" title="Dmidecode 简介"></a>Dmidecode 简介</h3><blockquote>
<p>Dmidecode reports information about your system’s hardware as described in your system BIOS according to the SMBIOS/DMI standard (see a sample output). This information typically includes system manufacturer, model name, serial number, BIOS version, asset tag as well as a lot of other details of varying level of interest and reliability depending on the manufacturer. This will often include usage status for the CPU sockets, expansion slots (e.g. AGP, PCI, ISA) and memory module slots, and the list of I/O ports (e.g. serial, parallel, USB).</p>
</blockquote>
<p> dmidecode 遵循 SMBIOS/DMI 标准，其输出的信息包括 BIOS、系统、主板、处理器、内存、缓存等等。</p>
<h4 id="DMI"><a href="#DMI" class="headerlink" title="DMI"></a>DMI</h4><p>Desktop Management Interface</p>
<p>电脑系统信息的管理系统,DMI的主要组成部分是Management Information Format(MIF)数据库。这个数据库包括了所有有关电脑系统和配件的信息。通过DMI，用户可以获取序列号、电脑厂商、串口信息以及其它系统配件信息</p>
<h4 id="SMBIOS"><a href="#SMBIOS" class="headerlink" title="SMBIOS"></a>SMBIOS</h4><p>System Management BIOS</p>
<p>主板或系统制造者以标准格式显示产品管理信息所需遵循的统一规范</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>将DMI数据库中的信息解码，以可读的文本方式显示。由于DMI信息可以人为修改，因此里面的信息不一定是系统准确的信息。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Usage: dmidecode [OPTIONS]</div><div class="line"></div><div class="line">Options are:</div><div class="line"></div><div class="line">-q, --quiet Less verbose output     //显示更少的简化信息</div><div class="line"></div><div class="line">-s, --string KEYWORD Only display the value of the given DMI string  //只显示指定DMI字符串的信息</div><div class="line"></div><div class="line">-t, --type TYPE Only display the entries of given type  //只显示指定条目的信息</div><div class="line"></div><div class="line">dmidecode: option requires an argument -- &apos;s&apos;</div><div class="line">String keyword expected</div><div class="line">Valid string keywords are:</div><div class="line">    bios-vendor</div><div class="line">    bios-version</div><div class="line">    bios-release-date</div><div class="line">    system-manufacturer</div><div class="line">    system-product-name</div><div class="line">    system-version</div><div class="line">    system-serial-number</div><div class="line">    system-uuid</div><div class="line">    baseboard-manufacturer</div><div class="line">    baseboard-product-name</div><div class="line">    baseboard-version</div><div class="line">    baseboard-serial-number</div><div class="line">    baseboard-asset-tag</div><div class="line">    chassis-manufacturer</div><div class="line">    chassis-type</div><div class="line">    chassis-version</div><div class="line">    chassis-serial-number</div><div class="line">    chassis-asset-tag</div><div class="line">    processor-family</div><div class="line">    processor-manufacturer</div><div class="line">    processor-version</div><div class="line">    processor-frequency</div><div class="line"></div><div class="line"></div><div class="line">dmidecode: option requires an argument -- &apos;t&apos;</div><div class="line">Type number or keyword expected</div><div class="line">Valid type keywords are:</div><div class="line">    bios</div><div class="line">    system</div><div class="line">    baseboard</div><div class="line">    chassis</div><div class="line">    processor</div><div class="line">    memory</div><div class="line">    cache</div><div class="line">    connector</div><div class="line">    slot</div></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查看内存槽数、那个槽位插了内存，大小是多少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode|grep -P -A5 &quot;Memory\s+Device&quot;|grep Size|grep -v Range</div></pre></td></tr></table></figure>
<p>查看最大支持内存数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode|grep -P &apos;Maximum\s+Capacity&apos;</div></pre></td></tr></table></figure>
<p>查看服务器型号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode | grep &apos;Product Name&apos;</div></pre></td></tr></table></figure>
<p>查看主板的序列号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode |grep &apos;Serial Number&apos;</div></pre></td></tr></table></figure>
<p>查看系统序列号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode -s system-serial-number</div></pre></td></tr></table></figure>
<p>查看内存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode -t memory</div></pre></td></tr></table></figure>
<p>查看OEM信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># dmidecode -t 11</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Dmidecode-简介&quot;&gt;&lt;a href=&quot;#Dmidecode-简介&quot; class=&quot;headerlink&quot; title=&quot;Dmidecode 简介&quot;&gt;&lt;/a&gt;Dmidecode 简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Dmidecode reports
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RAID阵列卡系列命令备忘</title>
    <link href="http://yoursite.com/2015/10/11/raid/"/>
    <id>http://yoursite.com/2015/10/11/raid/</id>
    <published>2015-10-11T12:27:51.000Z</published>
    <updated>2017-06-21T15:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阵列卡类型"><a href="#阵列卡类型" class="headerlink" title="阵列卡类型"></a>阵列卡类型</h2><h3 id="查看阵列卡的类型"><a href="#查看阵列卡的类型" class="headerlink" title="查看阵列卡的类型"></a>查看阵列卡的类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ lspci | grep -i raid</div></pre></td></tr></table></figure>
<p>一般有LSI和HP的两种，对应的管理命令为 MegaCli 和 hpssacli</p>
<p>LSI官方网站和驱动下载： <a href="http://www.avagotech.com" target="_blank" rel="external">avagotech</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="LSI的MegaSAS-RAID卡系列命令"><a href="#LSI的MegaSAS-RAID卡系列命令" class="headerlink" title="LSI的MegaSAS RAID卡系列命令"></a>LSI的MegaSAS RAID卡系列命令</h3><h4 id="显示所有逻辑磁盘组信息"><a href="#显示所有逻辑磁盘组信息" class="headerlink" title="显示所有逻辑磁盘组信息"></a>显示所有逻辑磁盘组信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -LDInfo -Lall -aALL</div><div class="line">$ MegaCli -LDInfo -Lall -aALL | grep State</div><div class="line">// 过滤State， 正常情况为：&quot;State : Optimal&quot;，否则为异常，例如 &quot;State : Degraded&quot;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="查看所有物理磁盘信息"><a href="#查看所有物理磁盘信息" class="headerlink" title="查看所有物理磁盘信息"></a>查看所有物理磁盘信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -PDList -aAll -NoLog</div><div class="line">$ MegaCli -PDList -aAll -NoLog | grep   &quot;Firmware state&quot;</div><div class="line">//如果 &quot;Firmware state&quot; 显示为非 Online，则表示该磁盘有问题。</div></pre></td></tr></table></figure>
<h4 id="显示-RAID-卡型号，RAID-设置及物理磁盘的相关信息"><a href="#显示-RAID-卡型号，RAID-设置及物理磁盘的相关信息" class="headerlink" title="显示 RAID 卡型号，RAID 设置及物理磁盘的相关信息"></a>显示 RAID 卡型号，RAID 设置及物理磁盘的相关信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -cfgdsply -aALL -NoLog</div></pre></td></tr></table></figure>
<h4 id="查看磁盘总数和磁盘类型"><a href="#查看磁盘总数和磁盘类型" class="headerlink" title="查看磁盘总数和磁盘类型"></a>查看磁盘总数和磁盘类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -cfgdsply -aALL -NoLog | grep &quot;Media Type:&quot;</div></pre></td></tr></table></figure>
<h4 id="查看磁盘的rebuild-进度"><a href="#查看磁盘的rebuild-进度" class="headerlink" title="查看磁盘的rebuild 进度"></a>查看磁盘的rebuild 进度</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -PDRbld -ShowProg -PhysDrv [32:3] -a0</div><div class="line">Rebuild Progress on Device at Enclosure 32, Slot 3 Completed 95% in 50 Minutes.</div></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 显示 RAID 卡信息</div><div class="line">$ MegaCli -AdpAllInfo -aALL -NoLog</div><div class="line"></div><div class="line"># 查看 RAID 卡日志</div><div class="line">$ MegaCli -FwTermLog -Dsply -aALL -NoLog</div><div class="line"></div><div class="line"># 查看电池信息</div><div class="line">$ MegaCli -AdpBbuCmd -aAll -NoLog</div><div class="line"></div><div class="line"># 显示适配器个数</div><div class="line">$ MegaCli -adpCount -NoLog</div><div class="line"></div><div class="line">#显示适配器时间</div><div class="line">$ MegaCli -AdpGetTime –aALL -NoLog</div></pre></td></tr></table></figure>
<h4 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -LDSetProp WB -LALL -aALL</div><div class="line">$ MegaCli -LDSetProp ADRA -LALL-aALL</div><div class="line">$ MegaCli -LDSetProp disDskCache -LALL-aALL</div><div class="line">$ MegaCli -LDSetProp CachedBadBBU -Lall -aALL</div></pre></td></tr></table></figure>
<h3 id="HP-Smart-Array-CLI-命令"><a href="#HP-Smart-Array-CLI-命令" class="headerlink" title="HP Smart Array CLI 命令"></a>HP Smart Array CLI 命令</h3><h4 id="显示raid卡信息"><a href="#显示raid卡信息" class="headerlink" title="显示raid卡信息"></a>显示raid卡信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl all show  config</div><div class="line">$ hpssacli ctrl all show detail config   //查看raid卡详细信息</div></pre></td></tr></table></figure>
<h4 id="显示所有物理磁盘信息"><a href="#显示所有物理磁盘信息" class="headerlink" title="显示所有物理磁盘信息"></a>显示所有物理磁盘信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl slot=0 pd all show status</div><div class="line">$ hpssacli ctrl slot=0 pd all show detail   //查看所有物理磁盘详细信息</div><div class="line">$ hpssacli ctrl all show config | grep physicaldrive  //查看磁盘总数和磁盘类型</div></pre></td></tr></table></figure>
<h4 id="查看电池状态"><a href="#查看电池状态" class="headerlink" title="查看电池状态"></a>查看电池状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl all show status | grep Battery</div></pre></td></tr></table></figure>
<h4 id="查看raid缓存策略"><a href="#查看raid缓存策略" class="headerlink" title="查看raid缓存策略"></a>查看raid缓存策略</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl all show detail config | grep &quot;Drive Write Cache:&quot;</div><div class="line">Drive Write Cache: Enabled</div><div class="line">// Drive Write Cache 有两种状态：Disable和Enable。</div><div class="line">// Disable代表将数据直接写入磁盘，Enable代表先将数据写入缓存然后在写入磁盘。</div></pre></td></tr></table></figure>
<h4 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h4><p>开启阵列逻辑盘cache加速策略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl slot=1 logicaldrive 1 modify arrayaccelerator=enable</div></pre></td></tr></table></figure>
<p>没有电池的情况下开启raid写缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl slot=1 modify nobatterywritecache=enable forced</div></pre></td></tr></table></figure>
<p>启用物理磁盘cache功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl slot=1 modify drivewritecache=enable</div></pre></td></tr></table></figure>
<p>设置读写百分比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hpssacli ctrl slot=1 modify cacheratio=25/75</div></pre></td></tr></table></figure>
<h2 id="raid电池策略"><a href="#raid电池策略" class="headerlink" title="raid电池策略"></a>raid电池策略</h2><h3 id="电池作用"><a href="#电池作用" class="headerlink" title="电池作用"></a>电池作用</h3><p>保护数据：当服务器掉电时，raid电池提供电量保证raid卡缓存的数据写入磁盘。</p>
<h3 id="电池的充放电"><a href="#电池的充放电" class="headerlink" title="电池的充放电"></a>电池的充放电</h3><p>由于电池是可充电电池，在空闲时候会有微弱的放电。当电量低于一定的阀值，raid卡程序会进行一次放电，将剩余电量放掉然后再充电。在充放电的过程，raid的缓存策略会发生改变，当电池电量低于阀值时，raid卡程序会认为电池不可用，从而禁用了缓存策略，这时数据会直接写入磁盘，raid IO性能会下降，系统的IO的负载会升高。对于高IO的应用，IO性能下降的影响还是比较大。</p>
<h3 id="电池充放电对IO影响的解决方案"><a href="#电池充放电对IO影响的解决方案" class="headerlink" title="电池充放电对IO影响的解决方案"></a>电池充放电对IO影响的解决方案</h3><p>1.检测电池的状态，掌握电池充放电的周期，在机器负载低的情况下手动强制放电。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -AdpBbuCmd -BbuLearn -aALL</div></pre></td></tr></table></figure>
<p>电池在放电过程策略会从WriteBack变成WriteThrough</p>
<p>2.强制改变raid策略，使其在充放电过程不禁用raid卡缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ MegaCli -LDSetProp CachedBadBBU -lall -a0</div></pre></td></tr></table></figure>
<p>raid缓存策略从No Write Cache if Bad BBU变成Write Cache OK if Bad BBU，这样在充放电的过程IO性能也不下降。</p>
<h3 id="简单介绍四种raid-cache策略"><a href="#简单介绍四种raid-cache策略" class="headerlink" title="简单介绍四种raid cache策略"></a>简单介绍四种raid cache策略</h3><ul>
<li>WriteBack</li>
</ul>
<p>进行写操作时，将数据写入RAID卡缓存，并直接返回，RAID卡控制器将在系统负载低或者Cache满了的情况下把数据写入硬盘。该设置会大大提升RAID卡写性能，绝大多数的情况下会降低系统IO负载。数据的可靠性由RAID卡的BBU(Battery Backup Unit)进行保证。</p>
<ul>
<li>WriteThrough</li>
</ul>
<p>数据写操作不使用缓存，数据直接写入磁盘。RAID卡写性能下降，在大多数情况下该设置会造成系统IO负载上升。</p>
<ul>
<li>No Write Cache if Bad BBU</li>
</ul>
<p>如果BBU出问题，则关闭Write Cache。由WriteBack自动切换到WriteThrough模式。如果没有特殊要求，强烈建议采用该设置，以确保数据的安全。</p>
<ul>
<li>Write Cache OK if Bad BBU</li>
</ul>
<p>如果BBU出问题，依然启用Write Cache. 这是不推荐的设置，BBU出问题将无法保证断电情况下数据的正常，如果此时依然采用WriteBack模式，遇到断电将发生数据丢失。除非有UPS作额外保证，不然不推荐采用这个设置。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.inetmail.ca/Wiki/index.php/HP_Smart_Array_CLI_commands_on_ESXi" target="_blank" rel="external">HP_Smart_Array_CLI_commands</a><br><a href="http://zh.community.dell.com/techcenter/b/weblog/archive/2013/03/07/megacli-command-share" target="_blank" rel="external">MegaCli常用管理命令汇总</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;阵列卡类型&quot;&gt;&lt;a href=&quot;#阵列卡类型&quot; class=&quot;headerlink&quot; title=&quot;阵列卡类型&quot;&gt;&lt;/a&gt;阵列卡类型&lt;/h2&gt;&lt;h3 id=&quot;查看阵列卡的类型&quot;&gt;&lt;a href=&quot;#查看阵列卡的类型&quot; class=&quot;headerlink&quot; title=&quot;查看阵列卡的类型&quot;&gt;&lt;/a&gt;查看阵列卡的类型&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lspci | grep -i raid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般有LSI和HP的两种，对应的管理命令为 MegaCli 和 hpssacli&lt;/p&gt;
&lt;p&gt;LSI官方网站和驱动下载： &lt;a href=&quot;http://www.avagotech.com&quot;&gt;avagotech&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;LSI的MegaSAS-RAID卡系列命令&quot;&gt;&lt;a href=&quot;#LSI的MegaSAS-RAID卡系列命令&quot; class=&quot;headerlink&quot; title=&quot;LSI的MegaSAS RAID卡系列命令&quot;&gt;&lt;/a&gt;LSI的MegaSAS RAID卡系列命令&lt;/h3&gt;&lt;h4 id=&quot;显示所有逻辑磁盘组信息&quot;&gt;&lt;a href=&quot;#显示所有逻辑磁盘组信息&quot; class=&quot;headerlink&quot; title=&quot;显示所有逻辑磁盘组信息&quot;&gt;&lt;/a&gt;显示所有逻辑磁盘组信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ MegaCli -LDInfo -Lall -aALL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ MegaCli -LDInfo -Lall -aALL | grep State&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 过滤State， 正常情况为：&amp;quot;State : Optimal&amp;quot;，否则为异常，例如 &amp;quot;State : Degraded&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ipmitool智能平台管理工具</title>
    <link href="http://yoursite.com/2015/09/15/ipmitool/"/>
    <id>http://yoursite.com/2015/09/15/ipmitool/</id>
    <published>2015-09-15T13:23:05.000Z</published>
    <updated>2017-06-23T15:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IPMI"><a href="#IPMI" class="headerlink" title="IPMI"></a>IPMI</h3><blockquote>
<p>Intelligent Platform Management Interface</p>
</blockquote>
<p>IPMI是一个开放的标准，监控，记录，回收，库存和硬件实现独立于主CPU，BIOS，以及操作系统的控制权。无论在开机还是关机的状态下，只要接通电源就可以实现对服务器的监控。</p>
<blockquote>
<p>The service processor (or Baseboard Management Controller, BMC) is the brain behind platform management and its primary purpose is to handle the autonomous sensor monitoring and event logging features.</p>
</blockquote>
<p>IPMI是一种规范的标准，其中最重要的物理部件就是BMC(Baseboard Management Controller)一种嵌入式管理微控制器，它相当于整个平台管理的“大脑”，通过它ipmi可以监控各个传感器的数据并记录各种事件的日志。</p>
<p>利用 IPMI可以监视服务器的物理特征，如温度、电压、电扇工作状态、电源供应以及机箱入侵等。</p>
<h3 id="ipmitool"><a href="#ipmitool" class="headerlink" title="ipmitool"></a>ipmitool</h3><blockquote>
<p>ipmitool - utility for controlling IPMI-enabled devices</p>
</blockquote>
<p>ipmitool 用于管理和配置，支持智能平台管理接口(IPMI)1.5版和2.0版规范的设备的命令行工具</p>
<h3 id="ipmitool常用选项"><a href="#ipmitool常用选项" class="headerlink" title="ipmitool常用选项"></a>ipmitool常用选项</h3><p>Ipmitool本地监控命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool –I open command</div></pre></td></tr></table></figure>
<p>其中-I open表示使用OpenIPMI接口，command有以下项：</p>
<ul>
<li><p>raw：发送一个原始的IPMI请求，并且打印回复信息。</p>
</li>
<li><p><code>Lan</code>：配置网络（lan）信道(channel)</p>
</li>
<li><p>chassis ：查看底盘的状态和设置电源</p>
</li>
<li><p>event：向BMC发送一个已经定义的事件（event），可用于测试配置的SNMP是否成功</p>
</li>
<li><p>mc：  查看MC（Management Contollor）状态和各种允许的项</p>
</li>
<li><p>sdr：打印传感器仓库中的所有监控项和从传感器读取到的值。</p>
</li>
<li><p><code>Sensor</code>：打印详细的传感器信息。</p>
</li>
<li><p>Fru：打印内建的Field Replaceable Unit (FRU)信息</p>
</li>
<li><p>Sel： 打印 System Event Log (SEL)</p>
</li>
<li><p>Pef： 设置 Platform Event Filtering(PEF)，事件过滤平台用于在监控系统发现有event时候，用PEF中的策略进行事件过滤，然后看是否需要报警。</p>
</li>
<li><p>Sol/isol：用于配置通过串口的Lan进行监控</p>
</li>
<li><p>User：设置BMC中用户的信息 。</p>
</li>
<li><p>Channel：设置Management Controller信道。</p>
</li>
</ul>
<h3 id="ipmitool-常用命令举例"><a href="#ipmitool-常用命令举例" class="headerlink" title="ipmitool 常用命令举例"></a>ipmitool 常用命令举例</h3><p>查看传感器中的各种监测值和该值的监测阈值，包括CPU温度，电压，风扇转速，电源调制模块温度，电源电压等信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool -I open sensor list</div></pre></td></tr></table></figure>
<p>查看idrac卡相关信息，包括IP、MAC地址等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool -I open lan print</div></pre></td></tr></table></figure>
<h4 id="通过ipmitool重置idrac登陆密码"><a href="#通过ipmitool重置idrac登陆密码" class="headerlink" title="通过ipmitool重置idrac登陆密码"></a>通过ipmitool重置idrac登陆密码</h4><p>1.加载内核模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># modprobe ipmi_msghandler</div><div class="line"># modprobe ipmi_devintf</div><div class="line"># modprobe ipmi_si</div></pre></td></tr></table></figure>
<p>2.查看idrac用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool user list &lt;channel_no&gt;</div></pre></td></tr></table></figure>
<p>DELL的<channel_no>是1，HP的是2</channel_no></p>
<p>如果不知道机器的型号可以通过如下命令获取通道号,获取到的通道号代表管理员id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># for i in &#123;1..14&#125;; do ipmitool lan print $i 2&gt;/dev/null | grep -q ^Set &amp;&amp; echo $i; done</div></pre></td></tr></table></figure>
<p>3.重置管理员密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool lan set &lt;channel_no&gt; password  xxxxxx</div><div class="line"># ipmitool lan set 2 password  xxxxxx</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://openipmi.sourceforge.net/IPMI.pdf" target="_blank" rel="external">http://openipmi.sourceforge.net/IPMI.pdf</a></p>
<p><a href="http://www.openfusion.net/tags/ipmi/" target="_blank" rel="external">http://www.openfusion.net/tags/ipmi/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IPMI&quot;&gt;&lt;a href=&quot;#IPMI&quot; class=&quot;headerlink&quot; title=&quot;IPMI&quot;&gt;&lt;/a&gt;IPMI&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Intelligent Platform Management Interface&lt;/p&gt;
&lt;/b
    
    </summary>
    
    
  </entry>
  
</feed>
