<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abnerzhao</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-14T15:52:42.065Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abnerzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读「学习之道」</title>
    <link href="http://yoursite.com/2018/09/08/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/"/>
    <id>http://yoursite.com/2018/09/08/学习之道/</id>
    <published>2018-09-08T13:51:15.000Z</published>
    <updated>2018-11-14T15:52:42.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>公司书架上随手拿的一本书，豆瓣的评分还可以，于是花了一个礼拜读完，顺便做点笔记。</p>
</blockquote>
<p>这本书开篇就抛出了我们感同身受的一些问题。</p>
<blockquote>
<p>读完一本书，却记不得讲的什么？\<br>公众号、指导书、各种知识付费平台看了很多，却没有形成自己的学习体系？</p>
</blockquote>
<p>网上之前有句流行语：「你的同龄人正在抛弃你」，我们每个人或多或少都有些焦虑。一方面是对知识的焦虑，另一方面是低质量学习方式和方法。以为本书会对上面两个问题有很好的解答，结果却没有。</p>
<p>本书的作者本科专业是俄语，他很喜欢文学而理工科成绩却很差。但是他最终克服了对理工科特别是数学的恐惧，成为了一名工程学博士。所以本书更多的侧重点在于对理工学科的学习方法上，比较适合应试教育。当然也有一些从脑科学和心理学方面的研究成果对于不同学科的学习还是有参考价值的。</p>
<p>本书中对于我而言有收获有以下五点：</p>
<ul>
<li>专注思维和发散思维</li>
<li>工作记忆和长期记忆</li>
<li>记忆组块</li>
<li>拖延与习惯</li>
<li>学习法则</li>
</ul>
<a id="more"></a>
<h3 id="专注思维和发散思维"><a href="#专注思维和发散思维" class="headerlink" title="专注思维和发散思维"></a>专注思维和发散思维</h3><p>专注思维也称专注模式，指的是注意力高度集中的状态。与之对应发散思维则是放松休息的状态。</p>
<p>两种模式在频繁地切换，不同的模式大脑的工作方式是不同的。专注模式大脑中区块联系紧密，思路清晰。发散模式大脑中区块联系稀疏，但是容易产生灵感碰撞。</p>
<p>就像一个聚光灯，我们可以控制它的照明范围，当照明范围小时，光线比较集中，穿透力强；当照明范围大时，光线微弱，但是能看到的视野广。</p>
<p>我们要有意识的主动进行思维模式的切换，这样有两点好处：</p>
<p>1.避开思维定势</p>
<p>2.留出无意识的思考阶段</p>
<p>第一点很好解释，第二点的意思其实是在两个专注学习期之间空出时间，让神经模型得以巩固。就像砌墙一样，我们用水泥进行粘合，水泥是需要时间干固凝结的。书中称之为<code>神经砖块</code>和<code>思维水泥</code>。</p>
<h3 id="工作记忆和长期记忆"><a href="#工作记忆和长期记忆" class="headerlink" title="工作记忆和长期记忆"></a>工作记忆和长期记忆</h3><p>工作记忆指的是大脑中对正在处理的信息进行瞬时以及有意识加工的记忆，而长期记忆如同仓库，一直保存在我们大脑中的记忆。从计算机的角度来理解工作记忆就是内存，机器重启内存里的数据就消失了，而长期记忆是硬盘，数据会一直保存。</p>
<p>大脑的记忆组块是有限的，就像内存的大小一样。但是硬盘的容量可比内存大得多也廉价得多。所以我们需要将工作记忆转化为长期记忆。书中介绍的方法是<code>间隔重复法</code>，大家都知道艾宾浩斯记忆曲线，想要增强记忆也就只能多重复练习了。不过书中还给出了其他增强记忆力的好方法：</p>
<ul>
<li>比喻和形象化</li>
<li>创建意群：通过组合构成某种关系，形成一个新的意义群体</li>
<li>编故事</li>
<li>肌肉记忆</li>
</ul>
<h3 id="记忆组块"><a href="#记忆组块" class="headerlink" title="记忆组块"></a>记忆组块</h3><p>组块指的是信息碎片组成的集合，要熟练掌握数学和科学知识，需要通过意义将分散的信息碎片组合起来，这个过程就是创建组块。</p>
<p>相信大家都玩过拼图，通过拼图我们可以很好地理解如何构成组块。杂乱的拼图碎片代表的是原始信息，只有理解每个拼图块在全局的位置，即理解每个图块的概念和关系，拼图碎片才会形成凹凸状的互锁边缘。不加理解那么是无法拼接出完整的图形。</p>
<h4 id="如何构建记忆组块"><a href="#如何构建记忆组块" class="headerlink" title="如何构建记忆组块"></a>如何构建记忆组块</h4><p>1.专注模式</p>
<p>2.理解</p>
<p>3.重复练习</p>
<blockquote>
<p>构建组块是一种从下至上的学习过程，总览全局则是一种从上至下的学习过程</p>
</blockquote>
<p><img src="/img/13112312312312.png" alt=""></p>
<h3 id="拖延与习惯"><a href="#拖延与习惯" class="headerlink" title="拖延与习惯"></a>拖延与习惯</h3><h4 id="拖延的形成"><a href="#拖延的形成" class="headerlink" title="拖延的形成"></a>拖延的形成</h4><p>人讨厌做自己不擅长的事，如果是擅长的事往往乐在其中。做不怎么喜欢的事情会激活大脑中的痛觉中枢，驱使我们转移到令自己开心的事情上，获得暂时的感觉良好。而专注做事情需要获得顽强的意志力，需要调用大量的神经资源。转移到轻松愉悦的事情却是简单轻松的，所以很容易陷入拖延，渐渐的拖延也会变成一种习惯。</p>
<h3 id="习惯的组成"><a href="#习惯的组成" class="headerlink" title="习惯的组成"></a>习惯的组成</h3><p>1.信号：习惯动作的触发点</p>
<p>2.反应程序：接收信号暗示时做出的常规性、习惯性的反应</p>
<p>3.奖励机制：习惯得以发展和继续是因为它能激励人，使人感到愉悦（拖延使我们转移到更愉悦的事情上能迅速得到这种奖励）</p>
<p>4.信念：相信习惯的力量，正向循环</p>
<h4 id="改变拖延的习惯"><a href="#改变拖延的习惯" class="headerlink" title="改变拖延的习惯"></a>改变拖延的习惯</h4><p>1.信号：对拖延信号进行屏蔽，防止干扰。将那些能够让我们转移到轻松愉悦的信号屏蔽。</p>
<p>2.反应程序：制定计划，因为这一步需要意志力的介入，所以我们可以通过制定计划来进行约束</p>
<p>3.奖励机制：用其他满足感替代</p>
<p>4.信念：对新系统效果坚信不疑，相信一切的改变会良性发展</p>
<h3 id="学习法则"><a href="#学习法则" class="headerlink" title="学习法则"></a>学习法则</h3><p>书的最后给出了十条学习法则：</p>
<p>1.运用回想</p>
<p>2.自我测试</p>
<p>3.对问题进行组块</p>
<p>4.间隔重复</p>
<p>5.使用不同解题技巧</p>
<p>6.注意休息</p>
<p>7.使用解释性的提问和类比</p>
<p>8.专注</p>
<p>9.困难的事情最先做</p>
<p>10.心理对照</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单小结一下就是：<code>两种思维模式、两种记忆类型、两种学习模式</code>。除了这些概念和方法之外，书中还有很多案例和科学实验的结果，一方面用来佐证作者的观点，另一方面让读者更加容易理解。虽然书中有些观点和方法是老生常谈了，如什么番茄工作法、回想练习，不过对于学习之道作者还是有提出了很多建设性的意见。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司书架上随手拿的一本书，豆瓣的评分还可以，于是花了一个礼拜读完，顺便做点笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这本书开篇就抛出了我们感同身受的一些问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读完一本书，却记不得讲的什么？\&lt;br&gt;公众号、指导书、各种知识付费平台看了很多，却没有形成自己的学习体系？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上之前有句流行语：「你的同龄人正在抛弃你」，我们每个人或多或少都有些焦虑。一方面是对知识的焦虑，另一方面是低质量学习方式和方法。以为本书会对上面两个问题有很好的解答，结果却没有。&lt;/p&gt;
&lt;p&gt;本书的作者本科专业是俄语，他很喜欢文学而理工科成绩却很差。但是他最终克服了对理工科特别是数学的恐惧，成为了一名工程学博士。所以本书更多的侧重点在于对理工学科的学习方法上，比较适合应试教育。当然也有一些从脑科学和心理学方面的研究成果对于不同学科的学习还是有参考价值的。&lt;/p&gt;
&lt;p&gt;本书中对于我而言有收获有以下五点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专注思维和发散思维&lt;/li&gt;
&lt;li&gt;工作记忆和长期记忆&lt;/li&gt;
&lt;li&gt;记忆组块&lt;/li&gt;
&lt;li&gt;拖延与习惯&lt;/li&gt;
&lt;li&gt;学习法则&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>QuerySet API 学习笔记</title>
    <link href="http://yoursite.com/2018/08/19/QuerySet-API-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/19/QuerySet-API-学习笔记/</id>
    <published>2018-08-19T04:51:03.000Z</published>
    <updated>2018-08-19T04:52:12.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QuerySets-evaluated"><a href="#QuerySets-evaluated" class="headerlink" title="QuerySets evaluated"></a>QuerySets evaluated</h3><p>可以创建、过滤、切片和传递查询集而不用真实操作数据库。在你对查询集做求值之前，不会发生任何实际的数据库操作。</p>
<p>对于查询集我们使用以下方法进行求值：</p>
<ul>
<li>Iteration</li>
<li>Slicing</li>
<li>Pickling/Caching</li>
<li>repr()</li>
<li>len()</li>
<li>list()</li>
<li>bool()</li>
</ul>
<h3 id="QuerySet-API"><a href="#QuerySet-API" class="headerlink" title="QuerySet API"></a>QuerySet API</h3><h4 id="返回新的查询集方法"><a href="#返回新的查询集方法" class="headerlink" title="返回新的查询集方法"></a>返回新的查询集方法</h4><ul>
<li>filter</li>
</ul>
<p>返回一个新的 QuerySet 包含给定参数的查询匹配对象，更复杂的查询可以使用 Q 对象。</p>
<ul>
<li>exclude</li>
</ul>
<p>返回一个新的 QuerySet，它包含不满足给定的查找参数的对象，更复杂的查询同样可以使用 Q 对象。</p>
<a id="more"></a>
<ul>
<li>annotate</li>
</ul>
<p>使用提供的查询表达式给 QuerySet 的每个对象增加注释，可以理解为增加一个新的属性。</p>
<p>查询表达式可以是一个简单的值、模型（或关联模型）字段的一个引用或对查询集中的对象一个聚合函数（平均值、和等）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.db.models import Count</div><div class="line">&gt;&gt;&gt; q = Blog.objects.annotate(Count(&apos;entry&apos;))</div><div class="line">&gt;&gt;&gt; q[0].name</div><div class="line">&apos;Blogasaurus&apos;</div><div class="line">&gt;&gt;&gt; q[0].entry__count # 新增的 entry__count 属性</div><div class="line">42</div><div class="line"></div><div class="line"># 指定注释名称</div><div class="line">&gt;&gt;&gt; q = Blog.objects.annotate(number_of_entries=Count(&apos;entry&apos;))</div><div class="line">&gt;&gt;&gt; q[0].number_of_entries</div><div class="line">42</div></pre></td></tr></table></figure>
<p>使用 annotate 需要用 django.db.models 的统计方法。除了 Count 统计方法之外，还有 Max、Min、Sum、Avg 等方法。</p>
<ul>
<li>order_by</li>
</ul>
<p>指定 QuerySet 排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 升序</div><div class="line">&gt;&gt;&gt; Author.objects.filter().order_by(&apos;name&apos;)</div><div class="line">&lt;QuerySet [&lt;Author: abner&gt;, &lt;Author: mike&gt;]&gt;</div><div class="line"> </div><div class="line"># 降序</div><div class="line">&gt;&gt;&gt; Author.objects.filter().order_by(&apos;-name&apos;)</div><div class="line">&lt;QuerySet [&lt;Author: mike&gt;, &lt;Author: abner&gt;]&gt;</div><div class="line"></div><div class="line"># 随机排序，不推荐使用(速度慢、查询昂贵)</div><div class="line">&gt;&gt;&gt; Author.objects.order_by(&apos;?&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>reverse</li>
</ul>
<p>反向排序 QuerySet 中返回的元素</p>
<ul>
<li>distinct</li>
</ul>
<p>返回一个新的 QuerySet 并去除查询结果中的重复的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; CompileRules.objects.values(&apos;business__name&apos;).distinct()</div><div class="line">&lt;QuerySet [&#123;&apos;business__name&apos;: &apos;img.ppdai.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;api.alert.risk.ppdaicorp.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;api.antifraud.risk.ppdaicorp.com&apos;&#125;, &#123;&apos;business__name&apos;: &apos;chargingjob.ppdapi.com&apos;&#125;]&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; rules = CompileRules.objects.distinct().values_list(&apos;business__name&apos;)</div><div class="line">&gt;&gt;&gt; [i[0] for i in rules]</div><div class="line">[&apos;img.ppdai.com&apos;,&apos;api.alert.risk.ppdaicorp.com&apos;,&apos;api.antifraud.risk.ppdaicorp.com&apos;,&apos;chargingjob.ppdapi.com&apos;]</div></pre></td></tr></table></figure>
<ul>
<li>values</li>
</ul>
<p>把 QuerySets 当作迭代器使用，返回一个字典，而不是模型实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Author.objects.filter(name=&apos;abner&apos;).values()</div><div class="line">&lt;QuerySet [&#123;&apos;id&apos;: 2, &apos;name&apos;: &apos;abner&apos;, &apos;email&apos;: &apos;abner@163.com&apos;&#125;, &#123;&apos;id&apos;: 3, &apos;name&apos;: &apos;abner&apos;, &apos;email&apos;: &apos;abner@qq.com&apos;&#125;]&gt;</div><div class="line"></div><div class="line"></div><div class="line"># 指定字段</div><div class="line">&gt;&gt;&gt; Author.objects.values(&apos;name&apos;)</div><div class="line">&lt;QuerySet [&#123;&apos;name&apos;: &apos;abner&apos;&#125;,&#123;&apos;name&apos;: &apos;abner&apos;&#125;,v&#123;&apos;name&apos;: &apos;mike&apos;&#125;]&gt;</div><div class="line"></div><div class="line"></div><div class="line"># 数据库函数，Lower 返回小写形式</div><div class="line">&gt;&gt;&gt; from django.db.models.functions import Lower</div><div class="line">&gt;&gt;&gt; Author.objects.values(lower=Lower(&apos;name&apos;))</div><div class="line">&lt;QuerySet [&#123;&apos;lower&apos;: &apos;dkey&apos;&#125;, &#123;&apos;lower&apos;: &apos;jerry&apos;&#125;, &#123;&apos;lower&apos;: &apos;jerry&apos;&#125;]&gt;</div></pre></td></tr></table></figure>
<ul>
<li>values_list</li>
</ul>
<p>以元组的形式返回查询集，可以返回特定字段的值，也可以是列表的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Business.objects.filter(level=1).values_list(&apos;id&apos;, &apos;name&apos;)</div><div class="line">&lt;TreeQuerySet [(3, &apos;借入运营&apos;), (106, &apos;借入借贷&apos;), (219, &apos;数据决策平台&apos;), (225, &apos;数据架构&apos;), (234, &apos;测试&apos;)]&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; Business.objects.filter(level=1).values_list(&apos;name&apos;, flat=True)</div><div class="line">&lt;TreeQuerySet [&apos;借入运营&apos;, &apos;借入借贷&apos;, &apos;数据决策平台&apos;, &apos;数据架构&apos;, &apos;测试&apos;]&gt;</div></pre></td></tr></table></figure>
<ul>
<li>dates</li>
</ul>
<blockquote>
<p>dates(field, kind, order=’ASC’)</p>
</blockquote>
<p>返回 datetime.date 对象列表，查询的字段应该是 DateField 模型，kind应为”year”、”month”或”day”。隐式的是升序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.year:返回字段不同年份值列表</div><div class="line">2.month:返回字段所有不同年/月值列表</div><div class="line">3.day:返回字段所有不同年/月/日值列表</div></pre></td></tr></table></figure>
<ul>
<li>datetimes</li>
</ul>
<blockquote>
<p>datetimes(field_name, kind, order=’ASC’, tzinfo=None)</p>
</blockquote>
<p>返回 datetime.datetimes 对象列表，查询的字段应该是 DateField 模型，kind应为”year”、”month”或”day”。隐式的是升序排序</p>
<ul>
<li>none</li>
</ul>
<p>创建一个不返回任何对象的查询集，访问结果时不会执行任何查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Entry.objects.none()</div><div class="line">[]</div><div class="line">&gt;&gt;&gt; from django.db.models.query import EmptyQuerySet</div><div class="line">&gt;&gt;&gt; isinstance(Entry.objects.none(), EmptyQuerySet)</div><div class="line">True</div></pre></td></tr></table></figure>
<ul>
<li>all</li>
</ul>
<p>所有查询集</p>
<ul>
<li>select_related</li>
</ul>
<blockquote>
<p>对于 ForeignKey 和 OneToOneField 等字段，通过添加 select_related，可以把相关的对象在一次查询中查出，之后使用时就不需要再次查数据库</p>
</blockquote>
<p>返回一个新的查询集，沿着外键查询关联对象的数据。它会生成一个复杂的查询并引起性能的损耗，但是在以后使用外键关系时将不需要数据库查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 普通查询</div><div class="line"># Hits the database.</div><div class="line">e = Entry.objects.get(id=5)</div><div class="line"># Hits the database again to get the related Blog object.</div><div class="line">b = e.blog</div><div class="line"></div><div class="line">#select_related 查询 </div><div class="line"># Hits the database.</div><div class="line">e = Entry.objects.select_related(&apos;blog&apos;).get(id=5)</div><div class="line"># Doesn&apos;t hit the database, because e.blog has been prepopulated</div><div class="line"># in the previous query.</div><div class="line">b = e.blog</div></pre></td></tr></table></figure>
<ul>
<li>prefetch_related</li>
</ul>
<blockquote>
<p>prefetch_related 对于相关对象会进行一次独立的查询，然后在 Python 中把对象关联起来。所以prefetch_related可以用于many-to-many and many-to-one关系</p>
</blockquote>
<ul>
<li>extra</li>
</ul>
<blockquote>
<p>extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)</p>
</blockquote>
<p>有些情况下，Django的查询语法难以简单的表达复杂的 WHERE 子句，对于这种情况, Django 提供了 extra() QuerySet 修改机制 — 它能在 QuerySet生成的SQL从句中注入新子句</p>
<p>extra可以指定一个或多个参数,例如 select, where or tables。 这些参数都不是必须的，但是你至少要使用一个</p>
<ul>
<li>defer</li>
</ul>
<p>排除不需要的字段，降低性能损耗</p>
<ul>
<li>only</li>
</ul>
<p>仅选择需要的字段</p>
<ul>
<li>using</li>
</ul>
<blockquote>
<p>using(alias) // alias 数据库别名</p>
</blockquote>
<p>如果使用多个数据库，改方法可以控制从哪个数据库上求值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># queries the database with the &apos;default&apos; alias.</div><div class="line">&gt;&gt;&gt; Entry.objects.all()</div><div class="line"></div><div class="line"># queries the database with the &apos;backup&apos; alias</div><div class="line">&gt;&gt;&gt; Entry.objects.using(&apos;backup&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>select_for_update</li>
</ul>
<p>返回一个 queryset ，会锁定相关行直到事务结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">entries = Entry.objects.select_for_update().filter(author=request.user)</div></pre></td></tr></table></figure>
<p>所有匹配的行将被锁定，直到事务结束。这意味着可以通过锁防止数据被其它事务修改。</p>
<ul>
<li>raw</li>
</ul>
<p>接收一个原始的SQL 查询，执行它并返回一个django.db.models.query.RawQuerySet 实例</p>
<p>Django提供两种方法使用原始SQL进行查询：一种是使用Manager.raw()方法，进行原始查询并返回模型实例；另一种是完全避开模型层，直接执行自定义的SQL语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; raw = Author.objects.raw(&apos;select * from polls_author&apos;)</div><div class="line">&gt;&gt;&gt; type(raw)</div><div class="line">&lt;class &apos;django.db.models.query.RawQuerySet&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="不返回新的查询集"><a href="#不返回新的查询集" class="headerlink" title="不返回新的查询集"></a>不返回新的查询集</h4><ul>
<li>get</li>
</ul>
<p>返回按照参数匹配的对象</p>
<ul>
<li>create</li>
</ul>
<p>创建并保存对象</p>
<ul>
<li>get_or_create</li>
</ul>
<p>通过给定参数来查询对象，如果对象不存在则会创建一个新的对象</p>
<p>返回一个由(object, created)组成的元组，元组中的object 是一个查询到的或者是被创建的对象， created 是一个表示是否创建了新的对象的布尔值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">try:</div><div class="line">    obj = Person.objects.get(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;)</div><div class="line">except Person.DoesNotExist:</div><div class="line">    obj = Person(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;, birthday=date(1940, 10, 9))</div><div class="line">    obj.save()</div><div class="line">    </div><div class="line"># use get_or_create</div><div class="line">obj, created = Person.objects.get_or_create(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;,</div><div class="line">                  defaults=&#123;&apos;birthday&apos;: date(1940, 10, 9)&#125;)</div></pre></td></tr></table></figure>
<p>任何传递给 get_or_create() 的关键字参数，除了一个可选的defaults，都将传递给get() 调用</p>
<blockquote>
<p>get_or_create() 在Django 视图中的使用。请确保只在POST 请求中使用，除非你有充分的理由。GET 请求不应该对数据有任何影响。而POST 则用于对数据产生影响的请求</p>
</blockquote>
<ul>
<li>update_or_create</li>
</ul>
<p>通过给定参数来更新对象，如果对象不存在则会创建一个新的对象</p>
<p>一个通过给出的kwargs 来更新对象的便捷方法， 如果需要的话创建一个新的对象。defaults 是一个由 (field, value) 对组成的字典，用于更新对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">try:</div><div class="line">    obj = Person.objects.get(first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;)</div><div class="line">    for key, value in updated_values.iteritems():</div><div class="line">        setattr(obj, key, value)</div><div class="line">    obj.save()</div><div class="line">except Person.DoesNotExist:</div><div class="line">    updated_values.update(&#123;&apos;first_name&apos;: &apos;John&apos;, &apos;last_name&apos;: &apos;Lennon&apos;&#125;)</div><div class="line">    obj = Person(**updated_values)</div><div class="line">    obj.save()</div><div class="line">    </div><div class="line"></div><div class="line"># use update_or_create</div><div class="line">obj, created = Person.objects.update_or_create(</div><div class="line">    first_name=&apos;John&apos;, last_name=&apos;Lennon&apos;, defaults=updated_values)</div></pre></td></tr></table></figure>
<blockquote>
<p>和上文描述的get_or_create() 一样，这个方式容易导致竞态条件，如果数据库层级没有前置唯一性它会让多行同时插入。</p>
</blockquote>
<ul>
<li>bulk_create</li>
</ul>
<p>批量写入数据</p>
<ul>
<li>count</li>
</ul>
<p>返回 QuerySet 对象个数</p>
<ul>
<li>in_bulk</li>
</ul>
<p>获取主键值的列表，并返回将每个主键值映射到具有给定ID的对象的实例的字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([1])</div><div class="line">&#123;1: &lt;Blog: Beatles Blog&gt;&#125;</div><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([1, 2])</div><div class="line">&#123;1: &lt;Blog: Beatles Blog&gt;, 2: &lt;Blog: Cheddar Talk&gt;&#125;</div><div class="line">&gt;&gt;&gt; Blog.objects.in_bulk([])</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>iterator</li>
<li>latest:使用作为日期字段提供的field_name，按日期返回表中的最新对象</li>
<li>earliest</li>
<li>first</li>
<li>last</li>
<li>aggregate:聚合查询</li>
</ul>
<p>返回一个字典，包含根据QuerySet 计算得到的聚合值（平均数、和等等）。aggregate() 的每个参数指定返回的字典中将要包含的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.db.models import Count</div><div class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(Count(&apos;entry&apos;))</div><div class="line">&#123;&apos;entry__count&apos;: 16&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(number_of_entries=Count(&apos;entry&apos;))</div><div class="line">&#123;&apos;number_of_entries&apos;: 16&#125;</div></pre></td></tr></table></figure>
<ul>
<li>exists</li>
</ul>
<p>exists() 用于搜寻对象是否在QuerySet 中以及QuerySet 是否存在任何对象，特别是QuerySet 比较大的时候。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># exists 方法比普通方法快</div><div class="line">entry = Entry.objects.get(pk=123)</div><div class="line">if some_queryset.filter(pk=entry.pk).exists():</div><div class="line">    print(&quot;Entry contained in queryset&quot;)</div><div class="line">    </div><div class="line"># 普通方法</div><div class="line">if entry in some_queryset:</div><div class="line">   print(&quot;Entry contained in QuerySet&quot;)    </div><div class="line">   </div><div class="line"># 判断 queryset 是否含有对象，exists 比普通判断快特别是查询集比较大的情况下   </div><div class="line">if some_queryset.exists():</div><div class="line">    print(&quot;There is at least one object in some_queryset&quot;)</div><div class="line">    </div><div class="line">if some_queryset:</div><div class="line">    print(&quot;There is at least one object in some_queryset&quot;)</div></pre></td></tr></table></figure>
<ul>
<li>update</li>
</ul>
<p>对指定的字段执行SQL更新查询，并返回匹配的行数</p>
<ul>
<li>delete</li>
</ul>
<p>对QuerySet中的所有行执行SQL删除查询</p>
<ul>
<li>as_manager</li>
</ul>
<h4 id="字段查找"><a href="#字段查找" class="headerlink" title="字段查找"></a>字段查找</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">exact</td>
<td style="text-align:left">精确匹配</td>
</tr>
<tr>
<td style="text-align:left">iexact</td>
<td style="text-align:left">忽略大小写精确匹配</td>
</tr>
<tr>
<td style="text-align:left">contains</td>
<td style="text-align:left">包含关系</td>
</tr>
<tr>
<td style="text-align:left">icontains</td>
<td style="text-align:left">忽略大小写包含关系</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">在给定的列表</td>
</tr>
<tr>
<td style="text-align:left">gt</td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:left">gte</td>
<td style="text-align:left">大于等于</td>
</tr>
<tr>
<td style="text-align:left">lt</td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:left">lte</td>
<td style="text-align:left">小于等于</td>
</tr>
<tr>
<td style="text-align:left">startswith</td>
<td style="text-align:left">区分大小写，从开始位置匹配</td>
</tr>
<tr>
<td style="text-align:left">istartswith</td>
<td style="text-align:left">不区分大小写，从开始位置匹配</td>
</tr>
<tr>
<td style="text-align:left">endswith</td>
<td style="text-align:left">区分大小写，从结束位置匹</td>
</tr>
<tr>
<td style="text-align:left">iendswith</td>
<td style="text-align:left">不区分大小写，从结束位置匹配</td>
</tr>
<tr>
<td style="text-align:left">range</td>
<td style="text-align:left">范围测试（包含于之中）</td>
</tr>
<tr>
<td style="text-align:left">year</td>
<td style="text-align:left">对于日期和日期时间字段，年份匹配</td>
</tr>
<tr>
<td style="text-align:left">month</td>
<td style="text-align:left">对于日期和日期时间字段，月份匹配</td>
</tr>
<tr>
<td style="text-align:left">day</td>
<td style="text-align:left">对于日期和日期时间字段，天数匹配</td>
</tr>
<tr>
<td style="text-align:left">week_day</td>
<td style="text-align:left">星期匹配</td>
</tr>
<tr>
<td style="text-align:left">hour</td>
<td style="text-align:left">对于日期时间字段，精确的小时匹配</td>
</tr>
<tr>
<td style="text-align:left">minute</td>
<td style="text-align:left">对于日期时间字段，精确的分钟匹配</td>
</tr>
<tr>
<td style="text-align:left">second</td>
<td style="text-align:left">对于datetime字段，精确的秒匹配</td>
</tr>
<tr>
<td style="text-align:left">isnull</td>
<td style="text-align:left">判断字段值为 True 或 False</td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">一个Boolean类型的全文搜索，以全文搜索的优势</td>
</tr>
<tr>
<td style="text-align:left">regex</td>
<td style="text-align:left">正则表达式</td>
</tr>
<tr>
<td style="text-align:left">iregex</td>
<td style="text-align:left">不区分大小写的正则表达式匹配</td>
</tr>
</tbody>
</table>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/" target="_blank" rel="external">官方文档</a></p>
<p><a href="https://wizardforcel.gitbooks.io/django-chinese-docs-18/content/2_2_2_QuerySet%20method%20reference.html" target="_blank" rel="external">Django 1.8 中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;QuerySets-evaluated&quot;&gt;&lt;a href=&quot;#QuerySets-evaluated&quot; class=&quot;headerlink&quot; title=&quot;QuerySets evaluated&quot;&gt;&lt;/a&gt;QuerySets evaluated&lt;/h3&gt;&lt;p&gt;可以创建、过滤、切片和传递查询集而不用真实操作数据库。在你对查询集做求值之前，不会发生任何实际的数据库操作。&lt;/p&gt;
&lt;p&gt;对于查询集我们使用以下方法进行求值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;li&gt;Slicing&lt;/li&gt;
&lt;li&gt;Pickling/Caching&lt;/li&gt;
&lt;li&gt;repr()&lt;/li&gt;
&lt;li&gt;len()&lt;/li&gt;
&lt;li&gt;list()&lt;/li&gt;
&lt;li&gt;bool()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;QuerySet-API&quot;&gt;&lt;a href=&quot;#QuerySet-API&quot; class=&quot;headerlink&quot; title=&quot;QuerySet API&quot;&gt;&lt;/a&gt;QuerySet API&lt;/h3&gt;&lt;h4 id=&quot;返回新的查询集方法&quot;&gt;&lt;a href=&quot;#返回新的查询集方法&quot; class=&quot;headerlink&quot; title=&quot;返回新的查询集方法&quot;&gt;&lt;/a&gt;返回新的查询集方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回一个新的 QuerySet 包含给定参数的查询匹配对象，更复杂的查询可以使用 Q 对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exclude&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回一个新的 QuerySet，它包含不满足给定的查找参数的对象，更复杂的查询同样可以使用 Q 对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣房源爬虫小记</title>
    <link href="http://yoursite.com/2018/04/05/douban-spider/"/>
    <id>http://yoursite.com/2018/04/05/douban-spider/</id>
    <published>2018-04-05T06:03:55.000Z</published>
    <updated>2018-11-14T15:51:00.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近又要开始找房，来上海三年不到已经是第三次搬家，真是居大不易。现在住的房子是在豆瓣小组上找的，豆瓣上个人房源较多，但是豆瓣小组没有对房源信息进行分类，找起来比较费时，索性写了个简单的爬虫，根据关键字来找房。网上也有一些现成的代码实现，想着还是自己实践一下。</p>
<p>Python 新手上路…</p>
<h3 id="获取豆瓣房源小组链接"><a href="#获取豆瓣房源小组链接" class="headerlink" title="获取豆瓣房源小组链接"></a>获取豆瓣房源小组链接</h3><p>先搜索一下上海的租房小组</p>
<p><img src="/img/270B4257-2781-4F04-A000001F-A539B7F1791D.png" alt=""></p>
<p>找几个人数较多和活跃度高的小组，进入小组讨论页面，观察 URL 的规律。<br><a id="more"></a><br><img src="/img/1D40CBE0-36C5-45E4-9B42-0E7823ADF269.png" alt=""><br><img src="/img/7BD30596-ABF6-428C-BF7B-D232B1C6605D.png" alt=""></p>
<p>由此可知我们可以通过 <code>https://www.douban.com/group/&lt;组名&gt;/disscussion</code> 来获取不同组的房源帖子信息，我选取了五个小组进行爬取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [1]: import os</div><div class="line">In [2]: group_list = [&apos;shanghaizufang&apos;, &apos;homeatshanghai&apos;, &apos;383972&apos;, &apos;shzf&apos;, &apos;251101&apos;]</div><div class="line">In [3]: index_url = [os.path.join(&apos;https://www.douban.com/group&apos;, i, &apos;discussion&apos;) for i in group_list]</div><div class="line">In [4]: index_url</div><div class="line">Out[4]:</div><div class="line">[&apos;https://www.douban.com/group/shanghaizufang/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/homeatshanghai/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/383972/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/shzf/discussion&apos;,</div><div class="line"> &apos;https://www.douban.com/group/251101/discussion&apos;]</div></pre></td></tr></table></figure>
<h3 id="资源定位"><a href="#资源定位" class="headerlink" title="资源定位"></a>资源定位</h3><p>通过查看页面元素信息，找到每个帖子标题所对应的网页代码。我们可以发现每个房源标题对应的是一个 <code>class</code> 属性为 <code>title</code> 的 <code>td</code> 标记。</p>
<p><img src="/img/59E824C2-AC6A-45F4-86D4-2582065E92A5.png" alt=""></p>
<p>使用 <code>BeautifulSoup</code> 尝试获取一下小组讨论中帖子标题网页代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [1]: import requests</div><div class="line">In [2]: from bs4 import BeautifulSoup</div><div class="line">In [3]: url = &apos;https://www.douban.com/group/shanghaizufang/discussion&apos;</div><div class="line">In [4]: headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 &apos;</div><div class="line">   ...:                                  &apos;(KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&apos;&#125;</div><div class="line">In [5]: res = requests.get(url, headers=headers)</div><div class="line">In [6]: soup = BeautifulSoup(res.text, &apos;html.parser&apos;)</div><div class="line">In [7]: title_list = soup.find_all(&apos;td&apos;, class_=&apos;title&apos;)</div><div class="line">In [8]: for tl in title_list:</div><div class="line">    ...:     print(tl)</div><div class="line">    ...:</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/114471599/&quot; title=&quot;黄浦区临地铁4号13号线单间出租。2300！无中介，可月租！&quot;&gt;</div><div class="line">                       黄浦区临地铁4号13号线单间出租。2300！无中介，可...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/113810667/&quot; title=&quot;——有阳台·房间空间大·低价出租·2260元·正南·电梯房·步行6分钟到7号线·《盒马生鲜·DFC影院·大华锦绣国际》隔壁·锦绣华城2街区&quot;&gt;</div><div class="line">                       ——有阳台·房间空间大·低价出租·2260元·正南...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td class=&quot;title&quot;&gt;</div><div class="line">&lt;a class=&quot;&quot; href=&quot;https://www.douban.com/group/topic/111282163/&quot; title=&quot;7号线杨高南路___北艾路1200弄超大1室_正南_大飘窗_2790元&quot;&gt;</div><div class="line">                       7号线杨高南路___北艾路1200弄超大1室_正南_大飘窗...</div><div class="line">                    &lt;/a&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>通过 <code>BeautifulSoup</code> 我们已经成功获取到帖子标题相关网页代码信息，接下来就是匹配我们的关键字并把对应标题的 url 保存下来，这样我们就不用一页页去找房源信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [9]: for tl in title_list:</div><div class="line">    ...:     print(tl.a[&apos;title&apos;], tl.a[&apos;href&apos;])</div><div class="line">    ...:</div><div class="line">紧靠漕河泾地铁12号线虹梅路站古美小区精装一室户随时看房 https://www.douban.com/group/topic/114690388/</div><div class="line">【性价比最高】【2/4/6/9】世纪大道地铁站口200米内，2018.4.5起三天内【出租】有效 https://www.douban.com/group/topic/114031302/</div><div class="line">陆家嘴，2号线东昌路站，精装南北两房一厅，5400元可谈，乳山四村 https://www.douban.com/group/topic/114838496/</div><div class="line">7号线30秒___高科西路2111弄（独立阳台_洗漱）2890 https://www.douban.com/group/topic/111749919/</div><div class="line">1号线外环路站______主卧朝南、近地铁 https://www.douban.com/group/topic/115006334/</div><div class="line">7号线__成山路2388弄(高档小区）__环境美_2090元 https://www.douban.com/group/topic/111343989/</div><div class="line">1500元就能租到社区一居室/复式低价火热出租ING https://www.douban.com/group/topic/114031502/</div><div class="line">1号线❤️莲花路站❤️朝南+落地窗（4分钟到地铁）___2200¥ https://www.douban.com/group/topic/115010633/</div><div class="line">工作调动2469号线德平路地铁站两房！价格可刀 https://www.douban.com/group/topic/114668639/</div><div class="line">2号线 淞虹路站 通协小区 朝南主卧带飘窗 随时入住 精装全配 可做饭 凌空首选随时入住先到先得 2700/月 https://www.douban.com/group/topic/114638949/</div><div class="line">3号线铁力路站，实体墙一室带独立卫生间，可以做饭，出租1900元。 https://www.douban.com/group/topic/115000070/</div><div class="line">1号线莲花路站_____步行2分钟（西班牙名园小区） https://www.douban.com/group/topic/115009200/</div><div class="line">—落地大阳台·2780元·豪装—海归首选房—敞亮的大房子《陆家嘴·锦绣里》高档小区—电梯房 https://www.douban.com/group/topic/113808306/</div><div class="line">静安高荣小区朝南带阳台主卧出租&lt;限女生&gt;3100/月，直接和房东签合同 https://www.douban.com/group/topic/114799989/</div><div class="line">1号线❤️外环路站【主卧独卫】地铁口__ 上海阳城小区 https://www.douban.com/group/topic/115008659/</div><div class="line">五角场附近主卧出租，市光路70弄小区，限女生 https://www.douban.com/group/topic/113345605/</div><div class="line">7号线_北艾路1200弄__正南温馨_干净安静：1690元（租女生） https://www.douban.com/group/topic/112014980/</div><div class="line">7号线锦绣路站【山姆会员店】旁边  朝南精装大1室 带飘窗__2490元 https://www.douban.com/group/topic/111243092/</div><div class="line">一三四八号线上海火车站附近 （2400）限一个女生 （实图个图）有厨房 朝南主卧 https://www.douban.com/group/topic/114856540/</div><div class="line">一室一厅一厨一卫整租！7号线，上海大学地铁站！6分钟！ https://www.douban.com/group/topic/114814137/</div><div class="line">【无中介】2号线 中山公园和8号线翔殷路（靠近10号线五角广场）及9号线松江大学城站一室户 https://www.douban.com/group/topic/114031377/</div><div class="line">七号线南陈路，整租两房两厅，便宜出租！ https://www.douban.com/group/topic/113826619/</div><div class="line">7号线__北艾路1200弄__超大一室，非常温馨：2490元 https://www.douban.com/group/topic/112276783/</div><div class="line">2/4/6/9号线世纪大道站，精装双南两房一厅，6600元可谈，梅园五街坊 https://www.douban.com/group/topic/114883174/</div><div class="line">这应该是徐家汇最好的公寓 https://www.douban.com/group/topic/113839494/</div><div class="line"></div><div class="line">In [10]: keyword = &apos;1号线&apos;</div><div class="line">In [11]: for tl in title_list:</div><div class="line">    ...:     if keyword in tl.a[&apos;title&apos;]:</div><div class="line">    ...:         print(tl.a[&apos;title&apos;], tl.a[&apos;href&apos;])</div><div class="line">    ...:</div><div class="line">1号线外环路站______主卧朝南、近地铁 https://www.douban.com/group/topic/115006334/</div><div class="line">1号线❤️莲花路站❤️朝南+落地窗（4分钟到地铁）___2200¥ https://www.douban.com/group/topic/115010633/</div><div class="line">1号线莲花路站_____步行2分钟（西班牙名园小区） https://www.douban.com/group/topic/115009200/</div><div class="line">1号线❤️外环路站【主卧独卫】地铁口__ 上海阳城小区 https://www.douban.com/group/topic/115008659/</div></pre></td></tr></table></figure>
<h3 id="页码控制"><a href="#页码控制" class="headerlink" title="页码控制"></a>页码控制</h3><p>以上海租房小组为例，之前测试爬取的路径是 <code>https://www.douban.com/group/shanghaizufang/discussion</code> 默认只会爬取第一页的 25 条信息，那么我们想爬取更多的信息，如何控制爬取的页码呢？</p>
<p><img src="http://7vzmp5.com1.z0.glb.clouddn.com/40E19CBD-E356-4CFA-B635-A430631C84D0.png" alt=""></p>
<p>通过　<code>class</code> 属性为 <code>next</code> 的 <code>span</code>　标记可以获取到下一页的链接地址，<code>https://www.douban.com/group/shanghaizufang/discussion?start=25</code> 表示第二页从第 25 条记录开始展示，我们可以通过这个控制要爬取的信息条数。</p>
<h3 id="代码概览"><a href="#代码概览" class="headerlink" title="代码概览"></a>代码概览</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"></div><div class="line">import os</div><div class="line">import requests</div><div class="line">import time</div><div class="line">from bs4 import BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line">class DouBanHouseSpider(object):</div><div class="line"></div><div class="line">    &quot;&quot;&quot;</div><div class="line">    抓取豆瓣小组房源信息</div><div class="line"></div><div class="line">     Attributes:</div><div class="line">        key_word: 房源标题关键字</div><div class="line">        page_num: 每个小组的抓取页数</div><div class="line">        group_list: 豆瓣小组列表</div><div class="line">        index_url: 豆瓣小组列表链接</div><div class="line">        data: 存放抓取结果</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, key_word, page_num):</div><div class="line">        self.key_word = key_word</div><div class="line">        self.page_num = page_num</div><div class="line">        self.group_list = [&apos;shanghaizufang&apos;, &apos;homeatshanghai&apos;, &apos;383972&apos;, &apos;shzf&apos;, &apos;251101&apos;]</div><div class="line">        self.index_url = [os.path.join(&apos;https://www.douban.com/group&apos;, i, &apos;discussion&apos;) for i in self.group_list]</div><div class="line">        self.data = &#123;&#125;</div><div class="line">        print(&apos;豆瓣房源爬虫准备就绪, 开始爬取数据...&apos;)</div><div class="line"></div><div class="line">    def get_url_content(self, url):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        根据 url 抓取页面数据</div><div class="line"></div><div class="line">        Args:</div><div class="line">            url: 豆瓣小组链接</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        try:</div><div class="line">            time.sleep(1)</div><div class="line">            headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 &apos;</div><div class="line">                                     &apos;(KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&apos;&#125;</div><div class="line">            res = requests.get(url, headers=headers)</div><div class="line">            soup = BeautifulSoup(res.text, &apos;html.parser&apos;)</div><div class="line">            title_list = soup(&apos;td&apos;, class_=&apos;title&apos;)</div><div class="line">            for tl in title_list:</div><div class="line">                if self.key_word in tl.a.attrs[&apos;title&apos;]:</div><div class="line">                    self.data[tl.a.attrs[&apos;title&apos;]] = tl.a.attrs[&apos;href&apos;]</div><div class="line">            next_page = soup(&apos;span&apos;, class_=&apos;next&apos;)</div><div class="line">            if next_page:</div><div class="line">                next_url = next_page[0].link.attrs[&apos;href&apos;]</div><div class="line">                end_title = next_url.split(&apos;=&apos;)[1]</div><div class="line">                if int(end_title) &lt; (self.page_num * 25):</div><div class="line">                    self.get_url_content(next_url)</div><div class="line">        except Exception as e:</div><div class="line">            print(&apos;抓取过程报错：%s&apos; % e)</div><div class="line"></div><div class="line">    def start_spider(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        爬虫入口</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        for i in self.index_url:</div><div class="line">            self.get_url_content(i)</div><div class="line">        for k, v in self.data.items():</div><div class="line">            print(&apos;标题：%s, 链接地址：%s&apos;%(k,v))</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    主函数</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    print(&quot;&quot;&quot;</div><div class="line">            ###############################</div><div class="line">                豆瓣房源小组爬虫</div><div class="line">                Author: Abnerzhao</div><div class="line">                Version: 0.0.1</div><div class="line">                Date: 2018-04-04</div><div class="line">            ###############################</div><div class="line">        &quot;&quot;&quot;)</div><div class="line">    key_word = input(&apos;请输入找房关键字：&apos;)</div><div class="line">    page_num = input(&apos;请输入抓取页面数：&apos;)</div><div class="line">    if not key_word:</div><div class="line">        key_word = &apos;1号线&apos;</div><div class="line">    if not page_num:</div><div class="line">        page_num = 5</div><div class="line">    house_spider = DouBanHouseSpider(key_word, int(page_num))</div><div class="line">    house_spider.start_spider()</div><div class="line">    print(&apos;豆瓣房源爬虫爬取结束...&apos;)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<blockquote>
<p>请使用 Python3，<a href="https://github.com/Abnerzhao/spider/blob/master/douban/douban_spider_exp1.py" target="_blank" rel="external">爬虫源码地址</a></p>
</blockquote>
<p>执行效果：</p>
<p><img src="/img/BAFCA92D-6F56-478A-B94E-8D18830BB546.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个爬虫很简单，没有进行模拟登陆也能抓取，当抓取页面数较大时会耗时较长。同一个房源信息可能在不同的小组中都有，所以通过一个字典来保存抓取的标题和链接，避免重复的标题。</p>
<p>后续待优化的地方:</p>
<ul>
<li>模拟登陆</li>
<li>支持多个关键字</li>
<li>多线程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又要开始找房，来上海三年不到已经是第三次搬家，真是居大不易。现在住的房子是在豆瓣小组上找的，豆瓣上个人房源较多，但是豆瓣小组没有对房源信息进行分类，找起来比较费时，索性写了个简单的爬虫，根据关键字来找房。网上也有一些现成的代码实现，想着还是自己实践一下。&lt;/p&gt;
&lt;p&gt;Python 新手上路…&lt;/p&gt;
&lt;h3 id=&quot;获取豆瓣房源小组链接&quot;&gt;&lt;a href=&quot;#获取豆瓣房源小组链接&quot; class=&quot;headerlink&quot; title=&quot;获取豆瓣房源小组链接&quot;&gt;&lt;/a&gt;获取豆瓣房源小组链接&lt;/h3&gt;&lt;p&gt;先搜索一下上海的租房小组&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/270B4257-2781-4F04-A000001F-A539B7F1791D.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;找几个人数较多和活跃度高的小组，进入小组讨论页面，观察 URL 的规律。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Celery 后台执行方法</title>
    <link href="http://yoursite.com/2018/03/25/celery-background/"/>
    <id>http://yoursite.com/2018/03/25/celery-background/</id>
    <published>2018-03-25T06:40:10.000Z</published>
    <updated>2018-03-25T06:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="init-script"><a href="#init-script" class="headerlink" title="init-script"></a>init-script</h3><p>1.先下载两个脚本文件 <a href="https://github.com/celery/celery/tree/3.1/extra/generic-init.d/" target="_blank" rel="external">generic-init.d</a>，我的项目里有定时任务，所以两个都需要用到</p>
<p>2.创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/default/celeryd</div><div class="line"># Names of nodes to start</div><div class="line">#   most people will only start one node:</div><div class="line"></div><div class="line">CELERYD_NODES=&quot;worker1&quot; # work 任务节点</div><div class="line"></div><div class="line">#   but you can also start multiple and configure settings</div><div class="line">#   for each in CELERYD_OPTS</div><div class="line">#CELERYD_NODES=&quot;worker1 worker2 worker3&quot;</div><div class="line">#   alternatively, you can specify the number of nodes to start:</div><div class="line">#CELERYD_NODES=10</div><div class="line"></div><div class="line"># Absolute or relative path to the &apos;celery&apos; command:</div><div class="line"></div><div class="line">CELERY_BIN=&quot;/home/prod/softwares/python/bin/celery&quot; # celery 命令的绝对路径</div><div class="line"></div><div class="line"># App instance to use</div><div class="line"># comment out this line if you don&apos;t use an app</div><div class="line"></div><div class="line">CELERY_APP=&quot;wfstar&quot; # 应用实例</div><div class="line"></div><div class="line"># or fully qualified:</div><div class="line">#CELERY_APP=&quot;proj.tasks:app&quot;</div><div class="line"></div><div class="line"># Where to chdir at start.</div><div class="line">CELERYD_CHDIR=&quot;/home/prod/deploys/wfstar&quot; # 项目目录</div><div class="line"></div><div class="line"># Extra command-line arguments to the worker</div><div class="line"></div><div class="line">CELERYD_OPTS=&quot;--time-limit=300 --concurrency=8&quot; # 命令行参数，更多请参考 man 手册 </div><div class="line"></div><div class="line"># Configure node-specific settings by appending node name to arguments:</div><div class="line">#CELERYD_OPTS=&quot;--time-limit=300 -c 8 -c:worker2 4 -c:worker3 2 -Ofair:worker1&quot;</div><div class="line"># Set logging level to DEBUG</div><div class="line">#CELERYD_LOG_LEVEL=&quot;DEBUG&quot;</div><div class="line"></div><div class="line"># %n will be replaced with the first part of the nodename</div><div class="line"></div><div class="line">CELERYD_LOG_FILE=&quot;/var/log/celery/%n%I.log&quot;</div><div class="line">CELERYD_PID_FILE=&quot;/var/run/celery/%n.pid&quot;</div><div class="line"></div><div class="line"># Workers should run as an unprivileged user.</div><div class="line">#   You need to create this user manually (or you can choose</div><div class="line">#   a user/group combination that already exists (e.g., nobody).</div><div class="line"></div><div class="line">CELERYD_USER=&quot;prod&quot;</div><div class="line">CELERYD_GROUP=&quot;prod&quot;</div><div class="line"></div><div class="line"># If enabled pid and log directories will be created if missing,</div><div class="line"># and owned by the userid/group configured.</div><div class="line">CELERY_CREATE_DIRS=1  # 自动创建日志和 pid 文件</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>3.将下载的 <code>celeryd</code> 和 <code>celerybeat</code> 拷贝到 /etc/init.d 目录并赋予可执行权限</p>
<blockquote>
<p>注意部分内容的修改，如执行用户</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/init.d/celeryd</div><div class="line">...</div><div class="line">DEFAULT_USER=&quot;prod&quot;</div><div class="line">DEFAULT_PID_FILE=&quot;/var/run/celery/%n.pid&quot;</div><div class="line">DEFAULT_LOG_FILE=&quot;/var/log/celery/%n.log&quot;</div><div class="line">DEFAULT_LOG_LEVEL=&quot;INFO&quot;</div><div class="line">DEFAULT_NODES=&quot;celery&quot;</div><div class="line">DEFAULT_CELERYD=&quot;-m celery worker --detach&quot;</div><div class="line">...</div><div class="line">$ cat /etc/init.d/celerybeat</div><div class="line">...</div><div class="line">CELERY_BIN=$&#123;CELERY_BIN:-&quot;celery&quot;&#125;</div><div class="line">DEFAULT_USER=&quot;prod&quot;</div><div class="line">DEFAULT_PID_FILE=&quot;/var/run/celery/beat.pid&quot;</div><div class="line">DEFAULT_LOG_FILE=&quot;/var/log/celery/beat.log&quot;</div><div class="line">DEFAULT_LOG_LEVEL=&quot;INFO&quot;</div><div class="line">DEFAULT_CELERYBEAT=&quot;$CELERY_BIN beat&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>4.启动 work 和 beat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo /etc/init.d/celeryd start</div><div class="line">$ sudo /etc/init.d/celerybeat start</div></pre></td></tr></table></figure>
<h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>1.安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get install supervisor # 因为我这里的项目用的是 Python3，所以没有使用 pip 安装</div></pre></td></tr></table></figure>
<p>2.配置</p>
<p>在 <code>/etc/supervisor/conf.d</code> 新建配置文件 <code>celery_wfstar_worker.conf</code> 和 <code>celery_wfstar_beat.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /etc/supervisor/conf.d/celery_wfstar_worker.conf</div><div class="line">[program:wfstar_worker] </div><div class="line">command=/home/prod/deploys/wfstart_env/bin/celery -A wfstar worker -l info # 执行命令</div><div class="line">directory=/home/prod/deploys/wfstar  # 运行目录</div><div class="line">user=prod  # 执行用户</div><div class="line">numprocs=1 # 启动进程数</div><div class="line">stdout_logfile=/home/prod/deploys/wfstar/logs/celery.log # 标准输出日志</div><div class="line">redirect_stderr=true # 将 stderr 的日志会写入 stdout 日志文件中</div><div class="line">autostart=true # supervisor 启动，程序自动启动</div><div class="line">autorestart=true # 自动重启</div><div class="line">startsecs=10 # 进程启动 10s 后，状态为 running 则为启动成功</div><div class="line">stopwaitsecs = 600 </div><div class="line">killasgroup=true</div><div class="line">priority=998 # 优先级</div><div class="line">stopsignal=QUIT # 停止信号</div><div class="line"></div><div class="line">$ cat /etc/supervisor/conf.d/celery_wfstar_beat.conf</div><div class="line">[program:wfstar_beat]</div><div class="line">command=/home/prod/deploys/wfstart_env/bin/celery -A wfstar beat -l info</div><div class="line">directory=/home/prod/deploys/wfstar</div><div class="line">user=prod</div><div class="line">numprocs=1</div><div class="line">stdout_logfile=/home/prod/deploys/wfstar/logs/celerybeat.log</div><div class="line">redirect_stderr=true</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">startsecs=10</div><div class="line">stopwaitsecs = 600</div><div class="line">killasgroup=true</div><div class="line">priority=999</div><div class="line">stopsignal=QUIT</div></pre></td></tr></table></figure>
<p>配置文件可参考 <a href="https://github.com/celery/celery/tree/master/extra/supervisord" target="_blank" rel="external">github celery supervisord configure</a></p>
<p>3.启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo supervisorctl reread</div><div class="line">$ sudo supervisorctl update</div><div class="line">$ sudo supervisorctl start all</div><div class="line">$ sudo supervisorctl status</div><div class="line">wfstar_beat                      RUNNING   pid 16752, uptime 0:00:34</div><div class="line">wfstar_worker                    RUNNING   pid 16751, uptime 0:00:34</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://pythad.github.io/articles/2016-12/how-to-run-celery-as-a-daemon-in-production" target="_blank" rel="external">How to run celery as a daemon</a></p>
<p><a href="https://yangchy.com/2018/01/17/Celery-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/" target="_blank" rel="external">Celery 后台运行</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;init-script&quot;&gt;&lt;a href=&quot;#init-script&quot; class=&quot;headerlink&quot; title=&quot;init-script&quot;&gt;&lt;/a&gt;init-script&lt;/h3&gt;&lt;p&gt;1.先下载两个脚本文件 &lt;a href=&quot;https://github.com/celery/celery/tree/3.1/extra/generic-init.d/&quot;&gt;generic-init.d&lt;/a&gt;，我的项目里有定时任务，所以两个都需要用到&lt;/p&gt;
&lt;p&gt;2.创建配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat /etc/default/celeryd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Names of nodes to start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   most people will only start one node:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_NODES=&amp;quot;worker1&amp;quot; # work 任务节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   but you can also start multiple and configure settings&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   for each in CELERYD_OPTS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_NODES=&amp;quot;worker1 worker2 worker3&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   alternatively, you can specify the number of nodes to start:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_NODES=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Absolute or relative path to the &amp;apos;celery&amp;apos; command:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_BIN=&amp;quot;/home/prod/softwares/python/bin/celery&amp;quot; # celery 命令的绝对路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# App instance to use&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# comment out this line if you don&amp;apos;t use an app&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_APP=&amp;quot;wfstar&amp;quot; # 应用实例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# or fully qualified:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERY_APP=&amp;quot;proj.tasks:app&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Where to chdir at start.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_CHDIR=&amp;quot;/home/prod/deploys/wfstar&amp;quot; # 项目目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Extra command-line arguments to the worker&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_OPTS=&amp;quot;--time-limit=300 --concurrency=8&amp;quot; # 命令行参数，更多请参考 man 手册 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Configure node-specific settings by appending node name to arguments:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_OPTS=&amp;quot;--time-limit=300 -c 8 -c:worker2 4 -c:worker3 2 -Ofair:worker1&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Set logging level to DEBUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#CELERYD_LOG_LEVEL=&amp;quot;DEBUG&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# %n will be replaced with the first part of the nodename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_LOG_FILE=&amp;quot;/var/log/celery/%n%I.log&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_PID_FILE=&amp;quot;/var/run/celery/%n.pid&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Workers should run as an unprivileged user.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   You need to create this user manually (or you can choose&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   a user/group combination that already exists (e.g., nobody).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_USER=&amp;quot;prod&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERYD_GROUP=&amp;quot;prod&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# If enabled pid and log directories will be created if missing,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# and owned by the userid/group configured.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_CREATE_DIRS=1  # 自动创建日志和 pid 文件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>Django Celery 定时任务笔记</title>
    <link href="http://yoursite.com/2018/02/25/django-celery-notes/"/>
    <id>http://yoursite.com/2018/02/25/django-celery-notes/</id>
    <published>2018-02-25T09:49:43.000Z</published>
    <updated>2018-03-25T09:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>Python 2.7</li>
<li>Djang 1.10</li>
<li>celery 4.1.0</li>
<li>RabbitMQ 3.2.4</li>
</ul>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="创建虚拟环境，构建-Django-项目"><a href="#创建虚拟环境，构建-Django-项目" class="headerlink" title="创建虚拟环境，构建 Django 项目"></a>创建虚拟环境，构建 Django 项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ virtualenv django-exp</div><div class="line">$ source django-exp/bin/activate</div><div class="line">$ pip intall django==1.10</div><div class="line">$ django-admin startproject myproject</div><div class="line">$ cd myproject/</div><div class="line">$ django-admin startapp myapp</div><div class="line">$ tree</div><div class="line">.</div><div class="line">├── manage.py</div><div class="line">├── myapp</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── apps.py</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── migrations</div><div class="line">│   │   └── __init__.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   └── views.py</div><div class="line">└── myproject</div><div class="line">    ├── __init__.py</div><div class="line">    ├── settings.py</div><div class="line">    ├── urls.py</div><div class="line">    └── wsgi.py</div><div class="line">$ pip install celery</div><div class="line">$ pip install pysqlite</div><div class="line">$ sudo apt-get install rabbitmq-server</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="配置-Celery"><a href="#配置-Celery" class="headerlink" title="配置 Celery"></a>配置 Celery</h4><ul>
<li><code>myproject/celery.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/celery.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line">import os</div><div class="line">from celery import Celery</div><div class="line">from django.conf import settings</div><div class="line"></div><div class="line"># set the default Django settings module for the &apos;celery&apos; program.</div><div class="line">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;myproject.settings&apos;)</div><div class="line"></div><div class="line">app = Celery(&apos;myproject&apos;)</div><div class="line"></div><div class="line"># Using a string here means the worker don&apos;t have to serialize</div><div class="line"># the configuration object to child processes.</div><div class="line"># - namespace=&apos;CELERY&apos; means all celery-related configuration keys</div><div class="line">#   should have a `CELERY_` prefix.</div><div class="line">app.config_from_object(&apos;django.conf:settings&apos;)</div><div class="line"></div><div class="line"># Load task modules from all registered Django app configs.</div><div class="line">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div><div class="line"></div><div class="line"></div><div class="line">@app.task(bind=True)</div><div class="line">def debug_task(self):</div><div class="line">    print(&apos;Request: &#123;0!r&#125;&apos;.format(self.request))</div></pre></td></tr></table></figure>
<ul>
<li><code>myproject/__init__.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/__init__.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line"></div><div class="line"># This will make sure the app is always imported when</div><div class="line"># Django starts so that shared_task will use this app.</div><div class="line">from .celery import app as celery_app</div><div class="line"></div><div class="line">__all__ = [&apos;celery_app&apos;]</div></pre></td></tr></table></figure>
<ul>
<li><code>myapp/tasks.py</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myapp/tasks.py</div><div class="line">from __future__ import absolute_import, unicode_literals</div><div class="line">from celery.task.schedules import crontab</div><div class="line">from celery.decorators import periodic_task</div><div class="line"></div><div class="line">@periodic_task(run_every=(crontab(minute=&quot;*/1&quot;))) # 每隔一分钟写入 hello world</div><div class="line">def hello_world():</div><div class="line">    with open(&quot;/tmp/output.txt&quot;, &quot;a&quot;) as f:</div><div class="line">        f.write(&quot;hello world&quot;)</div><div class="line">        f.write(&quot;\n&quot;)</div></pre></td></tr></table></figure>
<ul>
<li><code>myproject/setting.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat myproject/setting.py</div><div class="line">...</div><div class="line">CELERY_BROKER_URL = &apos;amqp://localhost&apos;</div><div class="line">CELERY_ACCEPT_CONTENT = [&apos;application/json&apos;]</div><div class="line">CELERY_RESULT_SERIALIZER = &apos;json&apos;</div><div class="line">CELERY_TASK_SERIALIZER = &apos;json&apos;</div><div class="line"></div><div class="line">INSTALLED_APPS = [</div><div class="line">    &apos;django.contrib.admin&apos;,</div><div class="line">    &apos;django.contrib.auth&apos;,</div><div class="line">    &apos;django.contrib.contenttypes&apos;,</div><div class="line">    &apos;django.contrib.sessions&apos;,</div><div class="line">    &apos;django.contrib.messages&apos;,</div><div class="line">    &apos;django.contrib.staticfiles&apos;,</div><div class="line">    &apos;myapp&apos;,</div><div class="line">]</div><div class="line">...</div><div class="line">LANGUAGE_CODE = &apos;en-us&apos;</div><div class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</div><div class="line">USE_I18N = True</div><div class="line">USE_L10N = True</div><div class="line">USE_TZ = False</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python manage.py makemigrations</div><div class="line">$ python manage.py migrate</div></pre></td></tr></table></figure>
<h4 id="启动-worker-和-beat"><a href="#启动-worker-和-beat" class="headerlink" title="启动 worker 和 beat"></a>启动 worker 和 beat</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ celery -A myproject worker -l info -B</div><div class="line">...</div><div class="line">[2018-02-25 16:59:00,000: INFO/Beat] Scheduler: Sending due task myapp.tasks.hello_world (myapp.tasks.hello_world)</div><div class="line">[2018-02-25 16:59:00,008: INFO/MainProcess] Received task: myapp.tasks.hello_world[e1aa8b70-586d-4a2b-b598-64c322b211a7]</div><div class="line">[2018-02-25 16:59:00,010: INFO/MainProcess] Task myapp.tasks.hello_world[e1aa8b70-586d-4a2b-b598-64c322b211a7] succeeded in 0.00109826028347s: None</div><div class="line">[2018-02-25 17:00:00,056: INFO/Beat] Scheduler: Sending due task myapp.tasks.hello_world (myapp.tasks.hello_world)</div><div class="line">[2018-02-25 17:00:00,058: INFO/MainProcess] Received task: myapp.tasks.hello_world[78ec725f-61b7-4fe6-a1c1-b2c60fb9ffed]</div><div class="line">[2018-02-25 17:00:00,060: INFO/MainProcess] Task myapp.tasks.hello_world[78ec725f-61b7-4fe6-a1c1-b2c60fb9ffed] succeeded in 0.000685669481754s: None</div><div class="line">$ tail /tmp/output.txt</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure>
<p>除了使用该方法，我们还可以通过 admin 后台设置计划任务，不过需要安装 <code>django-celery</code> 并设置 Database-backed，具体请参考官方文档。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://docs.celeryproject.org/en/v4.0.2/django/first-steps-with-django.html" target="_blank" rel="external">Using Celery with Django</a></p>
<p><a href="http://www.marinamele.com/2014/02/how-to-install-celery-on-django-and.html" target="_blank" rel="external">How to install Celery on Django and Create a Periodic Task</a></p>
<p><a href="https://medium.com/@yehandjoe/celery-4-periodic-task-in-django-9f6b5a8c21c7" target="_blank" rel="external">Celery 4 Periodic Task in Django</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;Djang 1.10&lt;/li&gt;
&lt;li&gt;celery 4.1.0&lt;/li&gt;
&lt;li&gt;RabbitMQ 3.2.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;h4 id=&quot;创建虚拟环境，构建-Django-项目&quot;&gt;&lt;a href=&quot;#创建虚拟环境，构建-Django-项目&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟环境，构建 Django 项目&quot;&gt;&lt;/a&gt;创建虚拟环境，构建 Django 项目&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ virtualenv django-exp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ source django-exp/bin/activate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip intall django==1.10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ django-admin startproject myproject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd myproject/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ django-admin startapp myapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tree&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── manage.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── myapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── admin.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── apps.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── migrations&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   │   └── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── models.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── tests.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── views.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── myproject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── __init__.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── settings.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── urls.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── wsgi.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip install celery&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pip install pysqlite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install rabbitmq-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>使用Sphinx + GitHub + Read the Docs搭建wiki</title>
    <link href="http://yoursite.com/2017/10/14/quickstart-wiki/"/>
    <id>http://yoursite.com/2017/10/14/quickstart-wiki/</id>
    <published>2017-10-14T07:54:01.000Z</published>
    <updated>2018-11-14T15:49:08.127Z</updated>
    
    <content type="html"><![CDATA[<p>Sphinx 是一个基于 ReStructuredText 的文档生成工具，有很多开源工程都采用sphinx作为文档生成系统，最有名的就是 python 官方文档。</p>
<p>Read the Docs是一个在线文档托管服务，可以从各种版本控制系统中导入文档。支持 webhooks，当你提交代码时，文档将被自动构建。</p>
<p>Sphinx + GitHub + ReadtheDocs 作为一个文档写作工具， 用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。我们可以使用这个工具写文档、记笔记等。</p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="安装-Sphinx"><a href="#安装-Sphinx" class="headerlink" title="安装 Sphinx"></a>安装 Sphinx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo pip install sphinx</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="创建wiki目录"><a href="#创建wiki目录" class="headerlink" title="创建wiki目录"></a>创建wiki目录</h4><p>使用 sphinx 自带的配置工具 <code>sphinx-quickstart</code> 快速创建工程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mkdir mywiki</div><div class="line">$ sphinx-quickstart  //大部分使用默认选项，直接按回车即可</div><div class="line">Welcome to the Sphinx 1.6.3 quickstart utility.</div><div class="line">...</div><div class="line"># 分离source和build目录，方便管理</div><div class="line">&gt; Separate source and build directories (y/n) [n]: y</div><div class="line"></div><div class="line"># 指定工程名、作者名、版本号、语言</div><div class="line">The project name will occur in several places in the built documentation.</div><div class="line">&gt; Project name: mywiki</div><div class="line">&gt; Author name(s): abnerzhao</div><div class="line">&gt; Project version []: 0.1</div><div class="line">&gt; Project release [0.1]:</div><div class="line">&gt; Project language [en]: zh_CN</div><div class="line">...</div><div class="line">Creating file ./source/conf.py.</div><div class="line">Creating file ./source/index.rst.</div><div class="line">Creating file ./Makefile.</div><div class="line">Creating file ./make.bat.</div><div class="line"></div><div class="line">Finished: An initial directory structure has been created.</div><div class="line">...</div><div class="line">$ ls</div><div class="line">Makefile build    make.bat source</div></pre></td></tr></table></figure>
<p>创建完成后，mywiki目录有以下文件：</p>
<ul>
<li>build目录：运行make命令后，生成的文件都在这个目录里面</li>
<li>source目录：放置文档的源文件</li>
<li>make.bat：批处理命令</li>
<li>Makefile</li>
</ul>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>conf.py 文件包含了 sphinx 工程的所有配置选项，包括一些无法在 sphinx-quickstart 中进行设置的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vi source/conf.py</div><div class="line">...</div><div class="line">html_theme = &apos;sphinx_rtd_theme&apos; # 输出html的主题</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="使用-github-进行版本控制"><a href="#使用-github-进行版本控制" class="headerlink" title="使用 github 进行版本控制"></a>使用 github 进行版本控制</h4><p>首先在 github 创建新的仓库 mywiki，然后将本地的 mywiki/source 目录 push 到 mywiki 远程仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd source</div><div class="line">$ echo &quot;# mywiki&quot; &gt;&gt; README.md</div><div class="line">$ git init</div><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;first commit&quot;</div><div class="line">$ git remote add origin git@github.com:[yourusename]/mywiki.git</div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h4 id="导入到-ReadtheDocs"><a href="#导入到-ReadtheDocs" class="headerlink" title="导入到 ReadtheDocs"></a>导入到 ReadtheDocs</h4><p>首先到 github 中选择 mywiki 仓库，Settings / Services / Add ReadTheDocs</p>
<p><img src="/img/B18863C1-6A9F-4A72-95C0-2580B1E75983.png" alt=""></p>
<p>然后到 ReadtheDocs 网站 import mywiki 仓库，导入成功后可看到如下页面：</p>
<p><img src="/img/C1184CE3-2FA6-4898-ADAE-3072C6E8FF4E.png" alt=""></p>
<h4 id="构建文档"><a href="#构建文档" class="headerlink" title="构建文档"></a>构建文档</h4><p>现在 mywiki 目录只有默认内容，需要我们自己添加内容，然后构建。构建方式有两种：</p>
<ul>
<li>命令行执行 <code>make html</code> </li>
<li>ReadtheDocs 网站手动构建</li>
</ul>
<p>我们先看一下默认构建出来是什么样子，执行<code>make html</code> 成功后，即可到 ReadtheDocs 网站阅读文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd /Users/Mr-zhao/mywiki</div><div class="line">$ ls</div><div class="line">Makefile build    make.bat source</div><div class="line">$ make html</div></pre></td></tr></table></figure>
<p><img src="/img/4CE490E0-C3D4-448A-9A69-0BC2FFF95A1D.png" alt=""></p>
<p>简单的 wiki 就基本搭建完成了，后续我们需要添加内容。不过这玩意使用的 reStructureText 语法而不是我们熟悉的 Markdown，我们可以通过 <a href="http://pandoc.org/try/" target="_blank" rel="external">pandoc</a> 进行格式转换。reStructureText 的语法也比较简单。</p>
<h4 id="开始写-wiki"><a href="#开始写-wiki" class="headerlink" title="开始写 wiki"></a>开始写 wiki</h4><p>简单添加些内容，看看效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat /Users/Mr-zhao/mywiki/index.rst</div><div class="line">.. mywiki documentation master file, created by</div><div class="line">   sphinx-quickstart on Sat Oct 14 14:26:23 2017.</div><div class="line">   You can adapt this file completely to your liking, but it should at least</div><div class="line">   contain the root `toctree` directive.</div><div class="line"></div><div class="line">Abnerzhao&apos;s Wiki</div><div class="line">=============================================</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line">   :glob:</div><div class="line"></div><div class="line">   programming/index</div><div class="line"></div><div class="line">$ cd /Users/Mr-zhao/mywiki/source/programming </div><div class="line">$ cat index.rst</div><div class="line">一、编程</div><div class="line">==================</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">    :maxdepth: 2</div><div class="line">    :glob:</div><div class="line"></div><div class="line">    python.rst</div><div class="line">$ cat python.rst</div><div class="line"></div><div class="line">1. Python</div><div class="line">----------</div><div class="line"></div><div class="line">1.1 基础知识</div><div class="line">~~~~~~~~~~~~~~</div><div class="line"></div><div class="line">1.2 爬虫</div><div class="line">~~~~~~~~~~</div><div class="line"></div><div class="line">1.3 Web</div><div class="line">~~~~~~~~~</div><div class="line">$ cd /Users/Mr-zhao/mywiki</div><div class="line">$ make html</div></pre></td></tr></table></figure></p>
<p>再次查看文档：</p>
<p><img src="/img/B35BA734-C452-44C1-AF8A-ACE9243D9D58.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Sphinx + GitHub + ReadtheDocs 总体的使用感受比 GitBook 要好，GitBook 使用起来总感觉很慢。平时写博客记点东西都比较琐碎，使用 Sphinx 更规范系统些。</p>
<p>工具倒是搭建好，能否坚持系统地总结梳理知识，Emm….这是个问题！</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html" target="_blank" rel="external">Sphinx使用手册</a><br><a href="http://jwch.sdut.edu.cn/book/tool/UseSphinx.html#id5" target="_blank" rel="external">使用sphinx记笔记</a><br><a href="http://www.jianshu.com/p/78e9e1b8553a" target="_blank" rel="external">如何用 ReadtheDocs、Sphinx 快速搭建写书环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sphinx 是一个基于 ReStructuredText 的文档生成工具，有很多开源工程都采用sphinx作为文档生成系统，最有名的就是 python 官方文档。&lt;/p&gt;
&lt;p&gt;Read the Docs是一个在线文档托管服务，可以从各种版本控制系统中导入文档。支持 webhooks，当你提交代码时，文档将被自动构建。&lt;/p&gt;
&lt;p&gt;Sphinx + GitHub + ReadtheDocs 作为一个文档写作工具， 用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。我们可以使用这个工具写文档、记笔记等。&lt;/p&gt;
&lt;h3 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h3&gt;&lt;h4 id=&quot;安装-Sphinx&quot;&gt;&lt;a href=&quot;#安装-Sphinx&quot; class=&quot;headerlink&quot; title=&quot;安装 Sphinx&quot;&gt;&lt;/a&gt;安装 Sphinx&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo pip install sphinx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="wiki" scheme="http://yoursite.com/tags/wiki/"/>
    
  </entry>
  
  <entry>
    <title>Python Torndb 简单使用</title>
    <link href="http://yoursite.com/2017/09/26/python-torndb/"/>
    <id>http://yoursite.com/2017/09/26/python-torndb/</id>
    <published>2017-09-26T09:54:46.000Z</published>
    <updated>2017-09-26T10:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://torndb.readthedocs.io/en/latest/" target="_blank" rel="external">官方文档</a>释义：</p>
<blockquote>
<p>A lightweight wrapper around MySQLdb.<br>Originally part of the Tornado framework. The tornado.database module is slated for removal in Tornado 3.0, and it is now available separately as torndb.</p>
</blockquote>
<p>torndb 是一个基于 MySQLdb 封装的轻量级模块。</p>
<p>进一步了解请阅读源码：<a href="https://github.com/bdarnell/torndb" target="_blank" rel="external">GitHub 源码地址</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ pip install torndb</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><blockquote>
<p>torndb.Connection(host, database, user=None, password=None, max_idle_time=25200, connect_timeout=0, time_zone=’+0:00’, charset=’utf8’, sql_mode=’TRADITIONAL’, **kwargs)</p>
</blockquote>
<p>默认的字符集为 <code>utf8</code>，默认时区为 <code>time_zone=&#39;+0:00&#39;</code>，默认连接数据库的端口为 <code>3306</code>，如果非 3306 端口则将端口加在 host 后面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> torndb</div><div class="line">In [<span class="number">2</span>]: db = torndb.Connection(<span class="string">'127.0.0.1:3808'</span>, <span class="string">'test'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>)</div></pre></td></tr></table></figure>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>torndb 对数据库增删查改的使用较 MySQLdb 要简洁些，把 commit、cursor 都隐藏了，查询返回的结果直接处理成字典，可直接通过字典的形式获取数据库表中对应字段内容。</p>
<p>select 操作常用方法：</p>
<ul>
<li>get：返回一条查询结果，如有多条结果返回则抛出异常</li>
<li>query：返回多条查询结果</li>
</ul>
<p>insert、update、delete 操作一般都习惯使用 execute 方法，当然也可以使用其他方法：insert、insertmany、update、updatemany、delete。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> torndb</div><div class="line">In [<span class="number">2</span>]: db = torndb.Connection(<span class="string">'127.0.0.1:3808'</span>, <span class="string">'test'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 建表</span></div><div class="line">In [<span class="number">3</span>]: sql = <span class="string">'create table userinfo(id int auto_increment, username varchar(30), email varchar(75), primary key (id))'</span></div><div class="line">In [<span class="number">4</span>]: db.execute(sql)</div><div class="line">Out[<span class="number">4</span>]: <span class="number">0L</span></div><div class="line"></div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">In [<span class="number">5</span>]: sql = <span class="string">'insert into userinfo(username, email) values(%s,%s)'</span></div><div class="line">In [<span class="number">6</span>]: db.execute(sql, <span class="string">'abner.zhao'</span>, <span class="string">'opsanberzhao@163.com'</span>)</div><div class="line">Out[<span class="number">6</span>]: <span class="number">1L</span></div><div class="line"></div><div class="line">In [<span class="number">7</span>]: db.execute(sql, <span class="string">'mike.zhang'</span>, <span class="string">'mikezhang@gmail.com'</span>)</div><div class="line">Out[<span class="number">7</span>]: <span class="number">2L</span></div><div class="line"></div><div class="line"><span class="comment"># 查询多条记录</span></div><div class="line">In [<span class="number">8</span>]: sql = <span class="string">'select username,email from userinfo'</span></div><div class="line">In [<span class="number">9</span>]: db.query(sql)</div><div class="line">Out[<span class="number">9</span>]:</div><div class="line">[&#123;<span class="string">'email'</span>: <span class="string">u'opsanberzhao@163.com'</span>, <span class="string">'username'</span>: <span class="string">u'abner.zhao'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'mikezhang@gmail.com'</span>, <span class="string">'username'</span>: <span class="string">u'mike.zhang'</span>&#125;]</div><div class="line"></div><div class="line"><span class="comment"># 查询单条记录</span></div><div class="line">In [<span class="number">10</span>]: sql = <span class="string">'select email from userinfo where username=%s'</span></div><div class="line">In [<span class="number">11</span>]: db.get(sql,<span class="string">'abner.zhao'</span>)</div><div class="line">Out[<span class="number">11</span>]: &#123;<span class="string">'email'</span>: <span class="string">u'opsanberzhao@163.com'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 更新</span></div><div class="line">In [<span class="number">12</span>]: sql = <span class="string">'update userinfo set username="mike.zhao" where id=%s'</span></div><div class="line">In [<span class="number">13</span>]: db.execute(sql, <span class="number">2</span>)</div><div class="line">Out[<span class="number">13</span>]: <span class="number">0L</span></div><div class="line"></div><div class="line"><span class="comment"># 删除</span></div><div class="line">In [<span class="number">14</span>]: sql = <span class="string">'delete from userinfo  where id=%s'</span></div><div class="line">In [<span class="number">15</span>]: db.execute(sql, <span class="number">2</span>)</div><div class="line">Out[<span class="number">15</span>]: <span class="number">0L</span></div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在使用 MySQLdb 过程中，有时会出现<code>2006，&#39;MySQL server has gone away&#39;</code>，torndb 能很好的解决该问题。</p>
<p>torndb 每次获取 cursor 的时候会检查链接是否存在或链接的 idle_time 是否超过了 max_idle_time，超过了则会重新建立一个新的链接。而 MySQLdb 的获取 cursor 时却不会重新建立链接。不过 MySQLdb 提供了ping 方法来检查。</p>
<p>总的来说， torndb 使用体验比 MySQLdb 好。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.neotitans.com/resources/python/mysql-python-connection-error-2006.html" target="_blank" rel="external">mysql-python-connection-error-2006</a></p>
<p><a href="http://torndb.readthedocs.io/en/latest/" target="_blank" rel="external">torndb doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://torndb.readthedocs.io/en/latest/&quot;&gt;官方文档&lt;/a&gt;释义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lightweight wrapper around MySQLdb.&lt;br&gt;Originally part of the Tornado framework. The tornado.database module is slated for removal in Tornado 3.0, and it is now available separately as torndb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;torndb 是一个基于 MySQLdb 封装的轻量级模块。&lt;/p&gt;
&lt;p&gt;进一步了解请阅读源码：&lt;a href=&quot;https://github.com/bdarnell/torndb&quot;&gt;GitHub 源码地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ pip install torndb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 14.04 SVN 服务快速搭建</title>
    <link href="http://yoursite.com/2017/09/04/set-up-svn-server/"/>
    <id>http://yoursite.com/2017/09/04/set-up-svn-server/</id>
    <published>2017-09-04T14:05:18.000Z</published>
    <updated>2018-11-14T15:47:37.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get install subversion apache2 libapache2-svn apache2-utils</div></pre></td></tr></table></figure>
<h3 id="创建仓库目录"><a href="#创建仓库目录" class="headerlink" title="创建仓库目录"></a>创建仓库目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo mkdir -p /home/abner/svn</div><div class="line">$ sudo svnadmin create /home/abner/svn/test_project</div><div class="line">$ sudo svnadmin create /home/abner/svn/ops</div><div class="line">$ sudo chown -R www-data:www-data /home/abner/svn</div></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><code>/etc/apache2/mods-available/dav_svn.conf</code> 文件末尾添加如下配置：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;Location /svn&gt;</div><div class="line">    DAV svn   # 启用仓库</div><div class="line">    SVNListParentPath on # 路径下有多个仓库</div><div class="line">    SVNParentPath /home/abner/svn # 仓库路径</div><div class="line">    SVNAdvertiseV2Protocol off # 禁用 V2 协议</div><div class="line">    AuthType Basic </div><div class="line">    AuthName &quot;Subversion repository&quot;  </div><div class="line">    AuthUserFile /home/abner/svn/passwd # 用户验证文件</div><div class="line">    AuthzSVNAccessFile /home/abner/svn/auth # 权限验证文件</div><div class="line">    Require valid-user # 需要有效用户，禁止匿名访问</div><div class="line">&lt;/Location&gt;</div></pre></td></tr></table></figure></p>
<h3 id="用户和权限设置"><a href="#用户和权限设置" class="headerlink" title="用户和权限设置"></a>用户和权限设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo htpasswd -c /home/abner/svn/passwd mike</div><div class="line">New password:</div><div class="line">Re-type new password:</div><div class="line">Adding password for user mike</div><div class="line">$ cat /home/abner/svn/passwd</div><div class="line">mike:$apr1$nfAtmtla$ZguuxNODA.nRu3wsUq1Qv/</div><div class="line">$ sudo htpasswd  /home/abner/svn/passwd abner # 新增用户，无需 -c 选项</div><div class="line">$ cat /home/abner/svn/auth</div><div class="line">[groups]</div><div class="line">administrator=mike,abner</div><div class="line">[test:/]</div><div class="line">@administrator=rw</div><div class="line">[test_project:/]</div><div class="line">@administrator=rw</div><div class="line">[ops:/]</div><div class="line">@administrator=rw</div></pre></td></tr></table></figure>
<h3 id="访问仓库目录"><a href="#访问仓库目录" class="headerlink" title="访问仓库目录"></a>访问仓库目录</h3><p>浏览器访问 <a href="http://127.0.0.1/svn/" target="_blank" rel="external">http://127.0.0.1/svn/</a></p>
<p><img src="/img/DA0DAFAC-78BE-43CF-8316-3D1BBAD0D585.png" alt=""></p>
<h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><p>客户端使用 svn 命令拉取代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ svn checkout username=abner http://127.0.0.1/svn/ops</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多 htpasswd、svnadmin 和 svn 命令参数和使用请参考man手册</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://help.ubuntu.com/community/Subversion" target="_blank" rel="external">Subversion - Community Help Wiki - Official Ubuntu Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件包安装&quot;&gt;&lt;a href=&quot;#软件包安装&quot; class=&quot;headerlink&quot; title=&quot;软件包安装&quot;&gt;&lt;/a&gt;软件包安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install subversion apache2 libapache2-svn apache2-utils&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建仓库目录&quot;&gt;&lt;a href=&quot;#创建仓库目录&quot; class=&quot;headerlink&quot; title=&quot;创建仓库目录&quot;&gt;&lt;/a&gt;创建仓库目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo mkdir -p /home/abner/svn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo svnadmin create /home/abner/svn/test_project&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo svnadmin create /home/abner/svn/ops&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo chown -R www-data:www-data /home/abner/svn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/apache2/mods-available/dav_svn.conf&lt;/code&gt; 文件末尾添加如下配置：&lt;br&gt;
    
    </summary>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 回调插件简单使用</title>
    <link href="http://yoursite.com/2017/04/11/ansible-callback-plugins/"/>
    <id>http://yoursite.com/2017/04/11/ansible-callback-plugins/</id>
    <published>2017-04-11T12:20:44.000Z</published>
    <updated>2018-11-14T15:47:08.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Developing-Plugins"><a href="#Developing-Plugins" class="headerlink" title="Developing Plugins"></a>Developing Plugins</h2><p>插件是增强ansible核心功能的代码片段，我们可以很方便的使用插件，编写插件代码。如果我们想要对ansible的执行结果进行分析，根据返回结果发送邮件，写入日志等都可以通过插件实现。</p>
<h3 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h3><ul>
<li><strong>Action plugins</strong> are front ends to modules and can execute actions on the controller before calling the modules themselves.（操作插件，调用模块之前执行操作）</li>
<li><strong>Cache plugins</strong> are used to keep a cache of ‘facts’ to avoid costly fact-gathering operations.（缓存插件，缓存主机facts变量）</li>
<li><strong>Callback plugins</strong> enable you to hook into Ansible events for display or logging purposes.（回调插件，对事件进行显示和记录，这个常用）<a id="more"></a></li>
<li><strong>Connection plugins</strong> define how to communicate with inventory hosts.（连接插件，定义如何与节点主机通信）</li>
<li><strong>Filters plugins</strong> allow you to manipulate data inside Ansible plays and/or templates. This is a Jinja2 feature; Ansible ships extra filter plugins.（过滤插件，Jinja2功能）</li>
<li><strong>Lookup plugins</strong> are used to pull data from an external source. These are implemented using a custom Jinja2 function.（查找插件用于从外部源提取数据）</li>
<li><strong>Strategy plugins</strong> control the flow of a play and execution logic.（策略插件）</li>
<li><strong>Shell plugins</strong> deal with low-level commands and formatting for the different shells Ansible can encounter on remote hosts.（shell插件处理低级别命令和格式化）</li>
<li><strong>Test plugins</strong> allow you to validate data inside Ansible plays and/or templates. This is a Jinja2 feature; Ansible ships extra test plugins.（测试插件）</li>
<li><strong>Vars plugins</strong> inject additional variable data into Ansible runs that did not come from an inventory, playbook, or the command line.（Vars插件）</li>
</ul>
<h2 id="Callback-plugins"><a href="#Callback-plugins" class="headerlink" title="Callback plugins"></a>Callback plugins</h2><p>在日常开发中使用回调插件比较多一点，通过callback插件，可以实现回调功能，里面定义了若干场景，如主机不可达，执行任务失败，执行任务成功等，分别对应不同的方法，这样就可以实现在不同的场景触发不同的操作。</p>
<h3 id="设置回调功能参数"><a href="#设置回调功能参数" class="headerlink" title="设置回调功能参数"></a>设置回调功能参数</h3><p>该功能ansible默认是关闭的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cat /etc/ansible/ansible.cfg </div><div class="line">...</div><div class="line">bin_ansible_callbacks = <span class="keyword">True</span> <span class="comment">#加载功能</span></div><div class="line"></div><div class="line"><span class="comment"># set plugin path directories here, separate with colons 定义插件位置</span></div><div class="line">action_plugins     = /usr/share/ansible_plugins/action_plugins</div><div class="line">callback_plugins   = /usr/share/ansible_plugins/callback_plugins</div><div class="line">connection_plugins = /usr/share/ansible_plugins/connection_plugins</div><div class="line">lookup_plugins     = /usr/share/ansible_plugins/lookup_plugins</div><div class="line">vars_plugins       = /usr/share/ansible_plugins/vars_plugins</div><div class="line">filter_plugins     = /usr/share/ansible_plugins/filter_plugins</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="编写回调脚本"><a href="#编写回调脚本" class="headerlink" title="编写回调脚本"></a>编写回调脚本</h3><p>编写回调脚本放到配置文件中定义的目录中，并赋予可执行权限。我们可以将执行结果写入本地文件、数据库或发邮件等等。在日常开发中我们会将结果写入日志或跟踪记录执行的进度和异常。</p>
<h4 id="写入本地文件"><a href="#写入本地文件" class="headerlink" title="写入本地文件"></a>写入本地文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">result_file = <span class="string">'/tmp/result'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackModule</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_ok</span><span class="params">(self, host, res)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file,<span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'success\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_failed</span><span class="params">(self, host, res, ignore_errors=False)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'failed\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_unreachable</span><span class="params">(self,host,res)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(result_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(<span class="string">'unreachable\n'</span>)</div><div class="line">            f.write(str(host))</div><div class="line">            f.write(json.dumps(res, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">$ ansible-playbook  -i hosts test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">ok: [172.31.30.178]</div><div class="line"></div><div class="line">TASK: [test | install test] ***************************************************</div><div class="line">changed: [172.31.30.178]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">172.31.30.178              : ok=2    changed=1    unreachable=0    failed=0</div><div class="line"></div><div class="line">#制造一个unreachable错误</div><div class="line">$ ansible-playbook  -i hosts  test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">fatal: [172.31.30.178] =&gt; SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue</div><div class="line"></div><div class="line">FATAL: all hosts have already failed -- aborting</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">           to retry, use: --limit @/root/startoftwares.retry</div><div class="line"></div><div class="line">172.31.30.178              : ok=0    changed=0    unreachable=1    failed=0</div><div class="line"></div><div class="line">#查看结果</div><div class="line">$ cat /tmp/result</div><div class="line">success</div><div class="line">172.31.30.178&#123;</div><div class="line">    "changed": false,</div><div class="line">    "dest": "/tmp/test.sh",</div><div class="line">    "gid": 1000,</div><div class="line">    "group": "ubuntu",</div><div class="line">    "invocation": &#123;</div><div class="line">        "module_args": "src=test.sh dest=/tmp/test.sh owner=ubuntu group=ubuntu mode=0755",</div><div class="line">        "module_name": "copy"</div><div class="line">    &#125;,</div><div class="line">    "md5sum": "da1bd2e811a9909b96b09c3988deaec6",</div><div class="line">    "mode": "0755",</div><div class="line">    "owner": "ubuntu",</div><div class="line">    "path": "/tmp/test.sh",</div><div class="line">    "size": 58,</div><div class="line">    "state": "file",</div><div class="line">    "uid": 1000</div><div class="line">&#125;</div><div class="line">success</div><div class="line">172.31.30.178&#123;</div><div class="line">    "changed": true,</div><div class="line">    "cmd": "bash /tmp/test.sh",</div><div class="line">    "delta": "0:00:03.004104",</div><div class="line">    "end": "2017-04-11 10:48:20.429600",</div><div class="line">    "invocation": &#123;</div><div class="line">        "module_args": "bash /tmp/test.sh",</div><div class="line">        "module_name": "shell"</div><div class="line">    &#125;,</div><div class="line">    "rc": 0,</div><div class="line">    "start": "2017-04-11 10:48:17.425496",</div><div class="line">    "stderr": "",</div><div class="line">    "stdout": ""</div><div class="line">&#125;</div><div class="line">unreachable</div><div class="line">172.31.30.178"SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue"</div></pre></td></tr></table></figure></p>
<h4 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">mail_host=<span class="string">"smtp.xxx.com"</span></div><div class="line">mail_user=<span class="string">"xxxxx@xxx.com"</span></div><div class="line">mail_pass=<span class="string">"xxxxxxx"</span></div><div class="line">user_to = <span class="string">"xxxxx@xxx.com"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(context)</span>:</span></div><div class="line">    msg = MIMEText(context, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = mail_user</div><div class="line">    msg[<span class="string">'To'</span>] = user_to</div><div class="line">    msg[<span class="string">'Subject'</span>] = <span class="string">'Ansible error mail'</span></div><div class="line">    server = smtplib.SMTP(mail_host, <span class="number">25</span>)</div><div class="line">    server.login(mail_user, mail_pass)</div><div class="line">    server.sendmail(mail_user, user_to, msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackModule</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_ok</span><span class="params">(self, host, res)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_failed</span><span class="params">(self, host, res, ignore_errors=False)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runner_on_unreachable</span><span class="params">(self,host,res)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(res,basestring):</div><div class="line">            context = <span class="string">'An error occured for host '</span> + host + <span class="string">' with the following message:\n\n'</span> + res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            context = <span class="string">'An error occured for host'</span> + host + <span class="string">' with the following message:\n\n'</span> + str(res)</div><div class="line">        send_mail(context)</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">$ ansible-playbook  -i hosts  test.yml</div><div class="line"></div><div class="line">PLAY [default_group] **********************************************************</div><div class="line"></div><div class="line">TASK: [test | cp test auto install script] ************************************</div><div class="line">fatal: [172.31.30.178] =&gt; SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue</div><div class="line"></div><div class="line">FATAL: all hosts have already failed -- aborting</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">           to retry, use: --limit @/root/startoftwares.retry</div><div class="line"></div><div class="line">172.31.30.178              : ok=0    changed=0    unreachable=1    failed=0</div></pre></td></tr></table></figure>
<p>查收邮件</p>
<p><img src="/img/B028FB3F-50E6-4B04-8969-BDCFD20ECAEB.png" alt=""></p>
<p>以上脚本都写的比较简单，建议参考:<a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins" target="_blank" rel="external">官方插件代码样例</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_plugins.html" target="_blank" rel="external">官方文档</a><br><a href="http://ansible-tran.readthedocs.io/en/latest/docs/intro_configuration.html#bin-ansible-callbacks" target="_blank" rel="external">中文文档配置文件参数详解</a><br><a href="http://rfyiamcool.blog.51cto.com/1030776/1440624" target="_blank" rel="external">ansible调用callbacks插件实现结果nosql输出回调</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Developing-Plugins&quot;&gt;&lt;a href=&quot;#Developing-Plugins&quot; class=&quot;headerlink&quot; title=&quot;Developing Plugins&quot;&gt;&lt;/a&gt;Developing Plugins&lt;/h2&gt;&lt;p&gt;插件是增强ansible核心功能的代码片段，我们可以很方便的使用插件，编写插件代码。如果我们想要对ansible的执行结果进行分析，根据返回结果发送邮件，写入日志等都可以通过插件实现。&lt;/p&gt;
&lt;h3 id=&quot;插件列表&quot;&gt;&lt;a href=&quot;#插件列表&quot; class=&quot;headerlink&quot; title=&quot;插件列表&quot;&gt;&lt;/a&gt;插件列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Action plugins&lt;/strong&gt; are front ends to modules and can execute actions on the controller before calling the modules themselves.（操作插件，调用模块之前执行操作）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache plugins&lt;/strong&gt; are used to keep a cache of ‘facts’ to avoid costly fact-gathering operations.（缓存插件，缓存主机facts变量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Callback plugins&lt;/strong&gt; enable you to hook into Ansible events for display or logging purposes.（回调插件，对事件进行显示和记录，这个常用）
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python正则表达式</title>
    <link href="http://yoursite.com/2017/03/05/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/05/Python正则表达式/</id>
    <published>2017-03-05T09:13:36.000Z</published>
    <updated>2017-06-23T15:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。</strong>正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果</p>
<p><strong>常用的元字符</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配数字</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词的开始或结束(空格、标点、换行都算是单词的分割)</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><strong>示例：</strong></p>
<p><code>\ba\w*\b</code>: 匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)</p>
<p><code>\d+</code>: 匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是\</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次</p>
<p><code>\b\w{6}\b</code>: 匹配刚好6个字符的单词</p>
<p><code>^\d{5,12}$</code>: 匹配5位到12位数字</p>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p><strong>常用的限定符(指定数量的代码)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">重复n次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">重复n次或更多次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">重复n到m次</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong><br>Windows\d+: 匹配Windows后面跟1个或更多数字<br>^\w+: 匹配一行的第一个单词</p>
<h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p><strong>常用的反义代码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td style="text-align:left">[^x]</td>
<td style="text-align:left">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">[^aeiou]</td>
<td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>我们要想查找数字，字母或数字，空白这些很简单，直接使用元字符对应的字符集合即可实现。但是如果想要匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p>
<p>这时我们需要在方括号<code>[]</code>中列出想要匹配的字符集合。如[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p>
<p>[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）</p>
<p>\(?0\d{2}[) -]?\d{8}:匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等</p>
<h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开，匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了</p>
<p><code>0\d{2}-\d{8}|0\d{3}-\d{7}</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</p>
<p><code>\\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[-]?\d{8}</code>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>重复单个字符在后面加上限定符就行了，如果想要重复多个字符那么就需要用<code>小括号</code>来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。</p>
<p>(\d{1,3}.){3}：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次</p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>使用反斜杠<code>\</code>来取消元字符的特殊含义</p>
<p>例如：deerchao\.net匹配deerchao.net，C:\\Windows匹配C:\Windows</p>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>Python 通过标准库的 re 模块支持正则表达式。</p>
<p><strong>常见的正则表达式函数与方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">函数/方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">re 模块的函数</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">compile(pattern,flags=0)</td>
<td style="text-align:left">对正则表达式模式 pattern 进行编译,flags是可选标志符,并返回一个 regex 对象</td>
</tr>
<tr>
<td style="text-align:left">re 模块的函数和 regex 对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">match(pattern,string, flags=0)</td>
<td style="text-align:left">尝试用正则表达式模式 pattern 匹配字符串 string,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">search(pattern,string, flags=0)</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的第一次出现,flags 是可选标志符,如果匹配成功,则返回一个匹配对象;否则返回 None</td>
</tr>
<tr>
<td style="text-align:left">findall(pattern,string[,flags])</td>
<td style="text-align:left">在字符串 string 中查找正则表达式模式 pattern 的所有出现;返回一个匹配对象的列表</td>
</tr>
<tr>
<td style="text-align:left">finditer(pattern,string[, flags])</td>
<td style="text-align:left">和 findall()相同,但返回的不是列表而是迭代器;对 于每个匹配,该迭代器返回一个匹配对象</td>
</tr>
<tr>
<td style="text-align:left">匹配对象的方法</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">split(pattern,string, max=0)</td>
<td style="text-align:left">根据正则表达式 pattern 中的分隔符把字符 string 分割为一个列表,返回成功匹配的列表,最多分割 max 次(默认是分割所有匹配的地方)</td>
</tr>
<tr>
<td style="text-align:left">sub(pattern, repl, string, max=0)</td>
<td style="text-align:left">把字符串 string 中所有匹配正则表达式 pattern 的地方替换成字符串 repl,如果 max 的值没有给出,则对所有匹配的地方进行替换</td>
</tr>
<tr>
<td style="text-align:left">group(num=0)</td>
<td style="text-align:left">返回全部匹配对象(或指定编号是 num 的子组)</td>
</tr>
<tr>
<td style="text-align:left">groups()</td>
<td style="text-align:left">返回一个包含全部匹配的子组的元组(如果没有成功匹配,就返回一个空元组)</td>
</tr>
</tbody>
</table>
<p>将一个正则表达式的样式编译为Python中正则表达式对象。由于正则表达式在执行过程中被多次用于比较，通过re.compile()进行预编译可以提升性能。􏰁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; p = re.compile(&apos;[a-z]+&apos;)</div><div class="line">&gt;&gt;&gt; p</div><div class="line">&lt;_sre.SRE_Pattern object at 0x108174df0&gt;</div><div class="line">&gt;&gt;&gt; a = p.match(&apos;abc&apos;)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c9f0&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823ca58&gt;</div><div class="line">&gt;&gt;&gt; re.match(p,&apos;123&apos;)  #匹配失败返回None</div><div class="line">&gt;&gt;&gt;</div><div class="line">#不使用compile同样可以</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;abc&apos;)</div><div class="line">&lt;_sre.SRE_Match object at 0x10823c988&gt;</div><div class="line">&gt;&gt;&gt; re.match(r&apos;[a-z]+&apos;,&apos;123&apos;)</div></pre></td></tr></table></figure>
<h3 id="匹配对象和方法"><a href="#匹配对象和方法" class="headerlink" title="匹配对象和方法"></a>匹配对象和方法</h3><p>在处理正则表达式时，除regex对象外，还有另一种对象类型-匹配对象。这些对象是在match() 或 search()被成功调用之后所返回的结果。匹配对象有两个主要方法:<strong>group() 和 groups()</strong></p>
<p>group()方法返回所有匹配对象或是根据要求返回某个特定子组。<br>groups()返回一个包含唯一或所有子组的元组。如果正则表达式中没有子组的话, groups() 将返回一个空元组,而 group()仍会返回全部匹配对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x1082483e8</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group() <span class="comment">#返回所有匹配结果</span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>) <span class="comment">#原始字符串 </span></div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>) </div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups() <span class="comment">#返回包含子组的元组</span></div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div></pre></td></tr></table></figure>
<h3 id="re-match和re-search"><a href="#re-match和re-search" class="headerlink" title="re.match和re.search"></a>re.match和re.search</h3><p><strong>re.match和re.search的区别：</strong><br>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配失败返回None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'foo'</span>, <span class="string">'seafood'</span>) <span class="comment">#匹配成功</span></div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x10823ca58</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>findall():</strong>根据正则表达式搜索字符串，返回所有符合的子字符串列表<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'fooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'foo'</span>, <span class="string">'foofooseafood'</span>)</div><div class="line">[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>]</div></pre></td></tr></table></figure></p>
<p>findall()和 search()相似之处在于二者都执行字符串搜索，但 findall()和 match()与 search()不同之处是,findall()总返回一个列表。</p>
<h3 id="切分和替换"><a href="#切分和替换" class="headerlink" title="切分和替换"></a>切分和替换</h3><p><strong>re.split()</strong>:根据正则表达式分割字符串，返回分割后的所有子字符串列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]'</span>,<span class="string">'a,b,c d;e'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</div></pre></td></tr></table></figure>
<p><strong>re.subn()和re.sub()</strong><br>将某字符串中所有匹配正则表达式模式的部分进行替换，用来替换的部分通常是一个字符串,但也可能是一个函数,该函数返回一个用来替换的字符串。subn()和sub()一样,但它还返回一个表示替换次 数的数字,替换后的字符串和表示替换次数的数字作为一个元组的元素返回。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> &gt;&gt;&gt; re.sub(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">&apos;XbcdXf&apos;</div><div class="line">&gt;&gt;&gt; re.subn(&apos;[ae]&apos;, &apos;X&apos;, &apos;abcdef&apos;)</div><div class="line">(&apos;XbcdXf&apos;, 2)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="external">Python官方文档</a><br><a href="https://book.douban.com/subject/3112503/" target="_blank" rel="external">Python核心编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则表达式是一些由字符和特殊符号组成的字符串，它们描􏰀述了这些字符和字符的某种重复方式，因此能按某种模式匹配一个有相似特征的字符串的集合。&lt;/strong&gt;正则表达式为高级文本模式匹配，以及搜索-替代等功能􏰁供了基础。&lt;/p&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;元字符是正则表达式中规定的特殊代码，有特定的含义和匹配效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的元字符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;代码&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配任意的空白符(包括空格，制表符(Tab)，换行符，中文全角空格等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配单词的开始或结束(空格、标点、换行都算是单词的分割)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://yoursite.com/categories/Dev/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix Low-level discovery</title>
    <link href="http://yoursite.com/2017/01/21/low-level-discovery/"/>
    <id>http://yoursite.com/2017/01/21/low-level-discovery/</id>
    <published>2017-01-21T14:13:32.000Z</published>
    <updated>2018-11-14T15:46:33.071Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. </p>
<p>In Zabbix, four types of item discovery are supported out of the box:</p>
<ul>
<li>discovery of file systems;</li>
<li>discovery of network interfaces;</li>
<li>discovery of CPUs and CPU cores;</li>
<li>discovery of SNMP OIDs.</li>
</ul>
<p>A user can define their own types of discovery, provided they follow a particular JSON protocol.</p>
</blockquote>
<a id="more"></a>
<p>简而言之，zabbix的低水平发现就是减少我们的重复操作，能够根据不同的监控实例自动添加监控项、触发器和图形。<br><code>vfs.fs.discovery</code>和<code>net.if.discovery</code>就是zabbix自带的自动发现键值，能够自动识别agent端的文件挂载情况和网卡信息。还有基于SNMP OID的自动发现键值，能够自动识别交换机的所有端口信息。<br>当我们的一个服务有多个端口需要监控时，我通常是先在agent端写好监控脚本，定义键值，然后再为每个端口新建监控项、触发器和图形（当然你可以直接克隆），但还是免不了一些重复操作。下面就通过一个例子看一下Low-level discovery是如何工作的：</p>
<h3 id="监控需求："><a href="#监控需求：" class="headerlink" title="监控需求："></a>监控需求：</h3><p>监控udp端口12222-12229的端口状态</p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><h4 id="1-以json格式自定义发现类型"><a href="#1-以json格式自定义发现类型" class="headerlink" title="1.以json格式自定义发现类型"></a>1.以json格式自定义发现类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cat udpport_discovery.py</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> sys,datetime,socket</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    zbxkey = sys.argv[<span class="number">1</span>]</div><div class="line">    zbx_d = &#123;&#125;</div><div class="line">    zbx_d[<span class="string">"data"</span>] = []</div><div class="line">    host_name = socket.gethostname().lower()</div><div class="line"></div><div class="line">    res = [<span class="string">'12222'</span>, <span class="string">'12223'</span>, <span class="string">'12224'</span>, <span class="string">'12225'</span>, <span class="string">'12226'</span>, <span class="string">'12227'</span>, <span class="string">'12228'</span>, <span class="string">'12229'</span>]</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> res:</div><div class="line">        d = &#123;&#125;</div><div class="line">        d[<span class="string">"&#123;#%s&#125;"</span> % zbxkey] = line</div><div class="line">        zbx_d[<span class="string">"data"</span>].append(d)</div><div class="line">    <span class="keyword">print</span> str(zbx_d).replace(<span class="string">"'"</span>,<span class="string">'"'</span>)</div></pre></td></tr></table></figure>
<h4 id="2-定义配置文件"><a href="#2-定义配置文件" class="headerlink" title="2.定义配置文件"></a>2.定义配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.conf</div><div class="line">#############Template_Udp#############</div><div class="line">UserParameter=status[*],/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udp_port.sh $1</div><div class="line">UserParameter=discovery.udpport,/home/prod/softwares/zabbix/etc/zabbix_agentd.conf.d/udpport_discovery.py PORT</div></pre></td></tr></table></figure>
<h4 id="3-检测自定义键值"><a href="#3-检测自定义键值" class="headerlink" title="3.检测自定义键值"></a>3.检测自定义键值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python udpport_discovery.py PORT</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure>
<p>zabbix server端测试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./zabbix_get -s 10.0.0.206 -k discovery.udpport</div><div class="line">&#123;&quot;data&quot;: [&#123;&quot;&#123;#PORT&#125;&quot;: &quot;12222&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12223&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12224&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12225&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12226&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12227&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12228&quot;&#125;, &#123;&quot;&#123;#PORT&#125;&quot;: &quot;12229&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-编写监控脚本"><a href="#4-编写监控脚本" class="headerlink" title="4.编写监控脚本"></a>4.编写监控脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat udp_port.sh</div><div class="line">Port=$1</div><div class="line">case $Port in</div><div class="line">        12222)   netstat -nupl | grep 12222 |wc -l;;</div><div class="line">        12223)   netstat -nupl | grep 12223 |wc -l;;</div><div class="line">        12224)   netstat -nupl | grep 12224 |wc -l;;</div><div class="line">        12225)   netstat -nupl | grep 12225 |wc -l;;</div><div class="line">        12226)   netstat -nupl | grep 12226 |wc -l;;</div><div class="line">        12227)   netstat -nupl | grep 12227 |wc -l;;</div><div class="line">        12228)   netstat -nupl | grep 12228 |wc -l;;</div><div class="line">        12229)   netstat -nupl | grep 12229 |wc -l;;</div><div class="line">        *) echo Error; exit 1;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="5-web添加模板"><a href="#5-web添加模板" class="headerlink" title="5.web添加模板"></a>5.web添加模板</h4><p><img src="/img/01256527-8987-40C4-9C65-2FC6D1D8610F.png" alt=""></p>
<p><img src="/img/E604037B-096A-4789-9AB3-A47B14020FB2.png" alt=""></p>
<h4 id="6-将模板关联对应机器"><a href="#6-将模板关联对应机器" class="headerlink" title="6.将模板关联对应机器"></a>6.将模板关联对应机器</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zabbix.com/documentation/2.4/manual/discovery/low_level_discovery" target="_blank" rel="external">LDD官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Low-level discovery provides a way to automatically create items, triggers, and graphs for different entities on a computer. For instance, Zabbix can automatically start monitoring file systems or network interfaces on your machine, without the need to create items for each file system or network interface manually. &lt;/p&gt;
&lt;p&gt;In Zabbix, four types of item discovery are supported out of the box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discovery of file systems;&lt;/li&gt;
&lt;li&gt;discovery of network interfaces;&lt;/li&gt;
&lt;li&gt;discovery of CPUs and CPU cores;&lt;/li&gt;
&lt;li&gt;discovery of SNMP OIDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A user can define their own types of discovery, provided they follow a particular JSON protocol.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Python datetime那点事</title>
    <link href="http://yoursite.com/2016/11/16/python-datetime/"/>
    <id>http://yoursite.com/2016/11/16/python-datetime/</id>
    <published>2016-11-16T13:08:40.000Z</published>
    <updated>2018-11-14T15:46:03.685Z</updated>
    
    <content type="html"><![CDATA[<p>关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。</p>
<h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><p>datetime 模块主要用来操作日期和时间</p>
<h3 id="date日期对象"><a href="#date日期对象" class="headerlink" title="date日期对象"></a>date日期对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today()  //返回当前本地日期</div><div class="line"><span class="keyword">print</span> datetime.date(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>) //生成日期对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="time时间对象"><a href="#time时间对象" class="headerlink" title="time时间对象"></a>time时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">Time = datetime.time(<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成时间对象</div><div class="line"><span class="keyword">print</span> Time</div><div class="line"><span class="keyword">print</span> Time.hour</div><div class="line"><span class="keyword">print</span> Time.minute</div><div class="line"><span class="keyword">print</span> Time.second</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="datetime日期时间对象"><a href="#datetime日期时间对象" class="headerlink" title="datetime日期时间对象"></a>datetime日期时间对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.datetime(<span class="number">2016</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">50</span>) //生成datetime对象</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() //返回当前日期时间</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //对当前时间格式化并返回字符串(将datetime对象转换为str)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now().ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> datetime.datetime.strptime(<span class="string">'2016-11-16 16:13:43'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)//将字符串转换为datetime对象</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">12</span>:<span class="number">24</span>:<span class="number">50</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47.913755</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span></div><div class="line">Wed Nov <span class="number">16</span> <span class="number">16</span>:<span class="number">58</span>:<span class="number">47</span> <span class="number">2016</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">43</span></div></pre></td></tr></table></figure>
<h3 id="timedelta对象"><a href="#timedelta对象" class="headerlink" title="timedelta对象"></a>timedelta对象</h3><p>timedelta对象表示一个时间段，即两个日期 (date) 或时间 (time) 之间的差。利用timedelta可实现时间的相加减，当然时间对象本身就能直接进行算术运算和比较运算。</p>
<blockquote>
<p>datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天后</div><div class="line"><span class="keyword">print</span> datetime.date.today() - datetime.timedelta(days=<span class="number">3</span>) //<span class="number">3</span>天前</div><div class="line"><span class="keyword">print</span> datetime.date.today() + datetime.timedelta(days=<span class="number">-3</span>) //<span class="number">3</span>天前(参数可为负)</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(weeks=<span class="number">1</span>) //<span class="number">1</span>个星期后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(days=<span class="number">1</span>) //明天</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>) //<span class="number">3</span>小时后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">5</span>) //<span class="number">5</span>分钟后</div><div class="line"><span class="keyword">print</span> datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>) //<span class="number">60</span>秒</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-19</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-13</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311780</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-17</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">26.311797</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">14</span>:<span class="number">26.311806</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">19</span>:<span class="number">26.311815</span></div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">26.311823</span></div></pre></td></tr></table></figure>
<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><p>time模块提供时间相关的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">print</span> time.ctime() //返回当前时间字符串</div><div class="line"><span class="keyword">print</span> time.localtime() //返回当前时间timetuple</div><div class="line">time.sleep(<span class="number">10</span>) //睡眠<span class="number">10</span>秒</div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) //格式化并返回字符串</div><div class="line"></div><div class="line">//stdout</div><div class="line">Wed Nov <span class="number">16</span> <span class="number">17</span>:<span class="number">25</span>:<span class="number">50</span> <span class="number">2016</span></div><div class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">16</span>, tm_hour=<span class="number">17</span>, tm_min=<span class="number">25</span>, tm_sec=<span class="number">50</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">321</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="number">2016</span><span class="number">-11</span><span class="number">-16</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h2 id="strftime-格式化字符串含义"><a href="#strftime-格式化字符串含义" class="headerlink" title="strftime()格式化字符串含义"></a>strftime()格式化字符串含义</h2><table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期名称简写</td>
<td>Sun, Mon, …, Sat</td>
</tr>
<tr>
<td>%A</td>
<td>星期名称的全称</td>
<td>Sunday, Monday, …, Saturday</td>
</tr>
<tr>
<td>%w</td>
<td>十进制数表示的星期[0表示星期日]</td>
<td>0, 1, …, 6</td>
</tr>
<tr>
<td>%d</td>
<td>十进制数表示的一个月的第几天</td>
<td>01, 02, …, 31</td>
</tr>
<tr>
<td>%b</td>
<td>月份名称的简写</td>
<td>Jan, Feb, …, Dec</td>
</tr>
<tr>
<td>%B</td>
<td>月份名称的全称</td>
<td>January, February, …, December</td>
</tr>
<tr>
<td>%m</td>
<td>十进制数表示的月份</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%y</td>
<td>十进制数表示的年份，不带有世纪</td>
<td>00, 01, …, 99</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制数表示的年份，带有世纪</td>
<td>1970, 1988, 2001, 2013</td>
</tr>
<tr>
<td>%H</td>
<td>十进制数表示的小时（24小时制）</td>
<td>00, 01, …, 23</td>
</tr>
<tr>
<td>%I</td>
<td>十进制数表示的小时（12小时制）</td>
<td>01, 02, …, 12</td>
</tr>
<tr>
<td>%p</td>
<td>AM or PM</td>
<td>AM, PM</td>
</tr>
<tr>
<td>%M</td>
<td>十进制数表示的分钟</td>
<td>00, 01, …, 59</td>
</tr>
<tr>
<td>%S</td>
<td>十进制表示的秒数</td>
<td>00, 01, …, 59</td>
</tr>
</tbody>
</table>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><img src="/img/C24469F5-B517-4D77-963E-37A6BC4B56AC.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="external">datetime官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于datetime时间操作在日常工作中也没有经常用到，但是每次要用时却又想不起来，与其重复查文档不如总结一下备忘。本文只简单记录了常用的一些方法，不同类型格式之间的转换(如时间对象类型、字符串、timestamp、time tuple类型）以及时区问题等暂未深入了解。&lt;/p&gt;
&lt;h2 id=&quot;datetime模块&quot;&gt;&lt;a href=&quot;#datetime模块&quot; class=&quot;headerlink&quot; title=&quot;datetime模块&quot;&gt;&lt;/a&gt;datetime模块&lt;/h2&gt;&lt;p&gt;datetime 模块主要用来操作日期和时间&lt;/p&gt;
&lt;h3 id=&quot;date日期对象&quot;&gt;&lt;a href=&quot;#date日期对象&quot; class=&quot;headerlink&quot; title=&quot;date日期对象&quot;&gt;&lt;/a&gt;date日期对象&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date.today()  //返回当前本地日期&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; datetime.date(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) //生成日期对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//stdout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="datetime" scheme="http://yoursite.com/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>小试Ansible Python API</title>
    <link href="http://yoursite.com/2016/11/04/ansible-python-api/"/>
    <id>http://yoursite.com/2016/11/04/ansible-python-api/</id>
    <published>2016-11-04T10:49:12.000Z</published>
    <updated>2017-06-21T15:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// ping 模块</div><div class="line">$ ansible localhost -m ping</div><div class="line">localhost | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div><div class="line">// shell 模块</div><div class="line">$ ansible localhost -m shell -a &apos;uptime&apos;</div><div class="line">localhost | success | rc=0 &gt;&gt;</div><div class="line">11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<h3 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h3><p>通过ansible.runner模块来实现</p>
<a id="more"></a>
<h4 id="使用API实现ping模块功能："><a href="#使用API实现ping模块功能：" class="headerlink" title="使用API实现ping模块功能："></a>使用API实现ping模块功能：</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">    module_name=<span class="string">'ping'</span>,  //模块名</div><div class="line">    module_args=<span class="string">''</span>,  //模块参数</div><div class="line">    pattern=<span class="string">'localhost'</span>,  //匹配主机或主机组</div><div class="line">    forks=<span class="number">2</span> //多线程</div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> data  //打印输出结果默认json格式</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;<span class="string">'dark'</span>: &#123;&#125;, <span class="string">'contacted'</span>: &#123;<span class="string">'localhost'</span>: &#123;<span class="string">'invocation'</span>: &#123;<span class="string">'module_name'</span>: <span class="string">'ping'</span>, <span class="string">'module_args'</span>: <span class="string">''</span>&#125;, <span class="string">u'changed'</span>: <span class="keyword">False</span>, <span class="string">u'ping'</span>: <span class="string">u'pong'</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>由于输出结果默认是json格式，那么我们可以格式化一下，让它更美观</p>
<blockquote>
<p>sort_keys  <code>按key排序</code><br>indent <code>缩进</code><br>separators <code>指定分隔符(默认分隔符&#39;, &#39;,使用&#39;,&#39;,&#39;: &#39; 避免尾部空格)</code></p>
</blockquote>
<p>上例中的输出格式化：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>)) //对json格式化输出</div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: false,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"ping"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用API实现shell模块功能"><a href="#使用API实现shell模块功能" class="headerlink" title="使用API实现shell模块功能"></a>使用API实现shell模块功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">runner = ansible.runner.Runner(</div><div class="line">   module_name=<span class="string">'shell'</span>,</div><div class="line">   module_args=<span class="string">'uptime'</span>,</div><div class="line">   pattern=<span class="string">'localhost'</span>,</div><div class="line">   forks=<span class="number">2</span></div><div class="line">)</div><div class="line">data = runner.run()</div><div class="line"><span class="keyword">print</span> json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line"></div><div class="line">//stdout</div><div class="line">&#123;</div><div class="line">    <span class="string">"contacted"</span>: &#123;</div><div class="line">        <span class="string">"localhost"</span>: &#123;</div><div class="line">            <span class="string">"changed"</span>: true,</div><div class="line">            <span class="string">"cmd"</span>: <span class="string">"uptime"</span>,</div><div class="line">            <span class="string">"delta"</span>: <span class="string">"0:00:00.002573"</span>,</div><div class="line">            <span class="string">"end"</span>: <span class="string">"2016-11-04 14:57:26.549208"</span>,</div><div class="line">            <span class="string">"invocation"</span>: &#123;</div><div class="line">                <span class="string">"module_args"</span>: <span class="string">"uptime"</span>,</div><div class="line">                <span class="string">"module_name"</span>: <span class="string">"shell"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"rc"</span>: <span class="number">0</span>,</div><div class="line">            <span class="string">"start"</span>: <span class="string">"2016-11-04 14:57:26.546635"</span>,</div><div class="line">            <span class="string">"stderr"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"stdout"</span>: <span class="string">" 14:57:26 up 67 days,  3:31,  1 user,  load average: 0.00, 0.06, 0.07"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dark"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印stdout"><a href="#打印stdout" class="headerlink" title="打印stdout"></a>打印stdout</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(contacted)</span>:</span></div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> contacted.items():</div><div class="line">        <span class="keyword">if</span> k == <span class="string">'stdout'</span>:</div><div class="line">            <span class="keyword">print</span> v</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'ping'</span>,</div><div class="line">        module_args=<span class="string">''</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    <span class="keyword">print</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_module</span><span class="params">()</span>:</span></div><div class="line">    runner = ansible.runner.Runner(</div><div class="line">        module_name=<span class="string">'shell'</span>,</div><div class="line">        module_args=<span class="string">'uptime'</span>,</div><div class="line">        pattern=<span class="string">'localhost'</span>,</div><div class="line">        forks=<span class="number">2</span></div><div class="line">        )</div><div class="line">    data = runner.run()</div><div class="line">    result(data[<span class="string">'contacted'</span>][<span class="string">'localhost'</span>])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    shell_module()</div><div class="line"></div><div class="line">//stdout</div><div class="line"><span class="number">15</span>:<span class="number">34</span>:<span class="number">09</span> up <span class="number">67</span> days,  <span class="number">4</span>:<span class="number">07</span>,  <span class="number">1</span> user,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></div></pre></td></tr></table></figure>
<h2 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h2><p>playbook描述了在远程主机上执行的策略或一组任务</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了一系列的task，每个task通过ansible的模块来实现特定的功能</p>
<p>exp.yml (<code>playbook使用YAML语言编写，文件名以.yaml或.yml结尾</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- hosts: localhost_group   //主机组</div><div class="line">  tasks:</div><div class="line">  - name: kernel release info  //task1</div><div class="line">    command: uname -a</div><div class="line"></div><div class="line">  - name: memory info  //task2</div><div class="line">    shell: free -m</div></pre></td></tr></table></figure>
<p>这个playbook可以查看远程主机的内核版本信息和内存信息</p>
<h3 id="ansible-playbook命令"><a href="#ansible-playbook命令" class="headerlink" title="ansible-playbook命令"></a>ansible-playbook命令</h3><p>命令行执行playbook<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  test.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=3    changed=2    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<h3 id="Python-API-1"><a href="#Python-API-1" class="headerlink" title="Python API"></a>Python API</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="keyword">import</span> ansible.playbook</div><div class="line"><span class="keyword">import</span> ansible.inventory</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> callbacks</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> utils</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">playbook_path = <span class="string">"/home/ubuntu/scripts/exp.yml"</span></div><div class="line"></div><div class="line"><span class="comment">##添加主机信息</span></div><div class="line">host = ansible.inventory.host.Host(</div><div class="line">    name = <span class="string">'localhost'</span></div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">##设置主机组并添加主机</span></div><div class="line">group = ansible.inventory.group.Group(</div><div class="line">    name = <span class="string">'localhost_group'</span></div><div class="line">    )</div><div class="line">group.add_host(host)</div><div class="line"></div><div class="line"><span class="comment">##主机列表</span></div><div class="line">example_inventory = ansible.inventory.Inventory()</div><div class="line">example_inventory.add_group(group)</div><div class="line"></div><div class="line"><span class="comment">#回调信息</span></div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)</div><div class="line"></div><div class="line"><span class="comment">#创建实例，playbook位于playbook_path</span></div><div class="line">pb = ansible.playbook.PlayBook(</div><div class="line">    playbook = playbook_path,</div><div class="line">    stats = stats,</div><div class="line">    callbacks = playbook_cb,</div><div class="line">    runner_callbacks = runner_cb,</div><div class="line">    inventory = example_inventory,</div><div class="line">    subset = <span class="string">'all'</span>,</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">#运行playbook</span></div><div class="line">pr = pb.run()</div><div class="line"></div><div class="line"><span class="comment">#打印结果</span></div><div class="line"><span class="keyword">print</span> json.dumps(pr, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div></pre></td></tr></table></figure>
<p>//stdout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [localhost]</div><div class="line"></div><div class="line">TASK: [kernel info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line">&#123;</div><div class="line">    &quot;localhost&quot;: &#123;</div><div class="line">    &quot;changed&quot;: 2,</div><div class="line">    &quot;failures&quot;: 0,</div><div class="line">    &quot;ok&quot;: 3,</div><div class="line">    &quot;skipped&quot;: 0,</div><div class="line">    &quot;unreachable&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ansible-runner更多信息"><a href="#ansible-runner更多信息" class="headerlink" title="ansible.runner更多信息"></a>ansible.runner更多信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ansible.runner</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(ansible.runner)</div><div class="line">[<span class="string">'C'</span>, <span class="string">'DefaultRunnerCallbacks'</span>, <span class="string">'HAS_ATFORK'</span>, <span class="string">'HostVars'</span>, <span class="string">'ModuleReplacer'</span>, <span class="string">'OUTPUT_LOCKFILE'</span>, <span class="string">'PROCESS_LOCKFILE'</span>, <span class="string">'Queue'</span>, <span class="string">'ReturnData'</span>, <span class="string">'Runner'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__path__'</span>, <span class="string">'_executor_hook'</span>, <span class="string">'ansible'</span>, <span class="string">'atfork'</span>, <span class="string">'base64'</span>, <span class="string">'check_conditional'</span>, <span class="string">'collections'</span>, <span class="string">'connection'</span>, <span class="string">'errors'</span>, <span class="string">'getpass'</span>, <span class="string">'jinja2'</span>, <span class="string">'module_common'</span>, <span class="string">'module_replacer'</span>, <span class="string">'multiprocessing'</span>, <span class="string">'multiprocessing_runner'</span>, <span class="string">'os'</span>, <span class="string">'pipes'</span>, <span class="string">'poller'</span>, <span class="string">'pwd'</span>, <span class="string">'random'</span>, <span class="string">'return_data'</span>, <span class="string">'signal'</span>, <span class="string">'socket'</span>, <span class="string">'split_args'</span>, <span class="string">'string_functions'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'tempfile'</span>, <span class="string">'template'</span>, <span class="string">'time'</span>, <span class="string">'traceback'</span>, <span class="string">'utils'</span>, <span class="string">'vv'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(ansible.runner.Runner)</div></pre></td></tr></table></figure>
<h4 id="Python-yaml-模块自定义playbook"><a href="#Python-yaml-模块自定义playbook" class="headerlink" title="Python yaml 模块自定义playbook"></a>Python yaml 模块自定义playbook</h4><p>define_yaml.py<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">playbook_path = <span class="string">'/home/ubuntu/scripts'</span></div><div class="line"></div><div class="line">Yml_args = &#123;&#125;</div><div class="line">Yml = []</div><div class="line">Yml_args[<span class="string">"gather_facts"</span>] = <span class="keyword">False</span></div><div class="line">Yml_args[<span class="string">"hosts"</span>] = <span class="string">"localhost_group"</span></div><div class="line">Yml_args[<span class="string">"remote_user"</span>] = <span class="string">"ubuntu"</span></div><div class="line">Yml_task = []</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'uptime'</span>, <span class="string">'name'</span>: <span class="string">'uptime info'</span>&#125;)</div><div class="line">Yml_task.append(&#123;<span class="string">'shell'</span>: <span class="string">'free -m'</span>, <span class="string">'name'</span>: <span class="string">'memory info'</span>&#125;)</div><div class="line">Yml_args[<span class="string">"tasks"</span>] = Yml_task</div><div class="line">Yml.append(Yml_args)</div><div class="line">Yml = yaml.dump(Yml)</div><div class="line">Yml_path = os.path.join(playbook_path, <span class="string">"exp.yml"</span>)</div><div class="line"><span class="keyword">with</span> open(Yml_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(Yml)</div></pre></td></tr></table></figure></p>
<p>运行并检测：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ python define_yaml.py</div><div class="line"></div><div class="line">$ ansible-playbook  -i /etc/ansible/hosts  exp.yml</div><div class="line"></div><div class="line">PLAY [localhost_group] ********************************************************</div><div class="line"></div><div class="line">TASK: [uptime info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">TASK: [memory info] ***********************************************************</div><div class="line">changed: [localhost]</div><div class="line"></div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">localhost                  : ok=2    changed=2    unreachable=0    failed=0</div><div class="line"></div><div class="line">$ cat exp.yml</div><div class="line">- gather_facts: false</div><div class="line">  hosts: localhost_group</div><div class="line">  remote_user: ubuntu</div><div class="line">  tasks:</div><div class="line">  - &#123;name: uptime info, shell: uptime&#125;</div><div class="line">  - &#123;name: memory info, shell: free -m&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ansible.com/ansible/dev_guide/developing_api.html" target="_blank" rel="external">Ansible Python API</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;h3 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ping 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success &amp;gt;&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// shell 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ansible localhost -m shell -a &amp;apos;uptime&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localhost | success | rc=0 &amp;gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11:00:11 up 66 days, 23:34,  1 user,  load average: 0.00, 0.01, 0.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-API&quot;&gt;&lt;a href=&quot;#Python-API&quot; class=&quot;headerlink&quot; title=&quot;Python API&quot;&gt;&lt;/a&gt;Python API&lt;/h3&gt;&lt;p&gt;通过ansible.runner模块来实现&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ansible基础知识备忘</title>
    <link href="http://yoursite.com/2016/05/20/ansible/"/>
    <id>http://yoursite.com/2016/05/20/ansible/</id>
    <published>2016-05-20T08:25:38.000Z</published>
    <updated>2018-11-14T15:45:28.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、体系结构"><a href="#一、体系结构" class="headerlink" title="一、体系结构"></a>一、体系结构</h2><p>ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系统安装以外的批量系统配置、批量任务执行及批量程序部署等功能。</p>
<p><img src="/img/25.png" alt=""></p>
<ul>
<li>Inventory：主机库，定义可控制的主机</li>
<li>Modules：基于模块化设计，通过模块来实现批量部署</li>
<li>playbook：剧本，使用YAML编写的声明性的配置文件</li>
<li>plugins: 插件，完成日志记录、邮件等功能</li>
</ul>
<a id="more"></a>
<h2 id="二、-特点"><a href="#二、-特点" class="headerlink" title="二、 特点"></a>二、 特点</h2><ul>
<li>高度模块化，借助模块完成各种任务</li>
<li>agentless，无需在被控制端安装agent</li>
<li>默认基于ssh协议向被控制端发送操作指令<ul>
<li>基于密钥认证</li>
<li>在inventory文件中指定账号和密码</li>
</ul>
</li>
<li>批量任务执行可写成剧本playbook</li>
<li>幂等性：不会重复执行相同操作</li>
</ul>
<h2 id="三、简单使用"><a href="#三、简单使用" class="headerlink" title="三、简单使用"></a>三、简单使用</h2><h3 id="3-1-ssh免密钥登录"><a href="#3-1-ssh免密钥登录" class="headerlink" title="3.1 ssh免密钥登录"></a>3.1 ssh免密钥登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ssh-keygen -t rsa -P &apos;&apos;</div><div class="line"># ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.249.6.64</div><div class="line"># ssh-copy-id  -i /root/.ssh/id_rsa.pub  10.48.156.8</div></pre></td></tr></table></figure>
<h3 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><h4 id="ansible-doc"><a href="#ansible-doc" class="headerlink" title="ansible-doc"></a>ansible-doc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Options:</div><div class="line"></div><div class="line">   -l, --list            List available modules  //列出所有模块</div><div class="line">   -s, --snippet         Show playbook snippet for specified module(s) //查看指定模块用法</div><div class="line"></div><div class="line">// 更多信息请参考manual手册</div></pre></td></tr></table></figure>
<h4 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h4><blockquote>
<p>ansible <host-pattern>  [-f forks][-m module_name] [-a args] [options]</host-pattern></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Options:</div><div class="line"></div><div class="line">    -a MODULE_ARGS, --args=MODULE_ARGS</div><div class="line">                        module arguments   // 传递模块参数</div><div class="line">    -f FORKS, --forks=FORKS  // 指定并发数</div><div class="line">                        specify number of parallel processes to use</div><div class="line">                        (default=5)</div><div class="line">    -i INVENTORY, --inventory-file=INVENTORY</div><div class="line">                        specify inventory host file</div><div class="line">                        (default=/etc/ansible/hosts)</div><div class="line">    -m MODULE_NAME, --module-name=MODULE_NAME</div><div class="line">                        module name to execute (default=command)</div><div class="line">//更多信息请参考manual手册</div></pre></td></tr></table></figure>
<h4 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h4><blockquote>
<p>ansible-playbook <filename.yml> … [options]</filename.yml></p>
</blockquote>
<h2 id="四、模块"><a href="#四、模块" class="headerlink" title="四、模块"></a>四、模块</h2><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>命令模块: ansible默认模块，用于在远程执行命令，command模块并不支持shell变量和管道等，若想使用shell来执行，应使用shell模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^command</div><div class="line">command              Executes a command on a remote node</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m command -a &quot;date&quot;</div><div class="line">10.249.6.64 | success | rc=0 &gt;&gt;</div><div class="line">Wed May 11 21:21:35 CST 2016</div></pre></td></tr></table></figure>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>ping模块：测试指定主机是否能连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  -w ^ping</div><div class="line">ping                 Try to connect to host and return `pong&apos; on success.</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m ping</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h3><p>计划任务模块 ：管理计划任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  ^cron</div><div class="line">cron                 Manage cron.d and crontab entries.</div><div class="line"></div><div class="line"># ansible-doc  -s cron</div><div class="line">- name: Manage cron.d and crontab entries.</div><div class="line">action: cron</div><div class="line">    backup                 # If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup&apos; variable by this module.</div><div class="line">    cron_file              # If specified, uses this file in cron.d instead of an individual user&apos;s crontab.</div><div class="line">    day                    # Day of the month the job should run ( 1-31, *, */2, etc )</div><div class="line">    hour                   # Hour when the job should run ( 0-23, *, */2, etc )</div><div class="line">    job                    # The command to execute. Required if state=present.</div><div class="line">    minute                 # Minute when the job should run ( 0-59, *, */2, etc )</div><div class="line">    month                  # Month of the year the job should run ( 1-12, *, */2, etc )</div><div class="line">    name                   # Description of a crontab entry.</div><div class="line">    reboot                 # If the job should be run at reboot. This option is deprecated. Users should use special_time.</div><div class="line">    special_time           # Special time specification nickname.</div><div class="line">    state                  # Whether to ensure the job is present or absent.</div><div class="line">    user                   # The specific user who&apos;s crontab should be modified.</div><div class="line">    weekday                # Day of the week that the job should run ( 0-7 for Sunday - Saturday, *, etc )</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m cron -a &apos;name=&quot;sync time&quot; minute=&quot;*/10&quot; \</div><div class="line">  job=&quot;/usr/sbin/ntpdate 0.centos.pool.ntp.org &amp;&amp; hwclock -w&quot; &apos;</div><div class="line"></div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;jobs&quot;: [</div><div class="line">    &quot;sync time&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>用户模块：管理用户账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^user</div><div class="line">user                 Manage user accounts</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m user -a &apos;name=work shell=/bin/bash home=/home/www&apos;   //添加用户</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;comment&quot;: &quot;&quot;,</div><div class="line">    &quot;createhome&quot;: true,</div><div class="line">    &quot;group&quot;: 500,</div><div class="line">    &quot;home&quot;: &quot;/home/www&quot;,</div><div class="line">    &quot;name&quot;: &quot;work&quot;,</div><div class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;,</div><div class="line">    &quot;state&quot;: &quot;present&quot;,</div><div class="line">    &quot;system&quot;: false,</div><div class="line">    &quot;uid&quot;: 500</div><div class="line">&#125;</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m user -a &apos;name=work state=absent&apos;  // 删除用户</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;force&quot;: false,</div><div class="line">    &quot;name&quot;: &quot;work&quot;,</div><div class="line">    &quot;remove&quot;: false,</div><div class="line">    &quot;state&quot;: &quot;absent&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>copy模块：文件复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#  ansible-doc -l | grep ^copy</div><div class="line">copy                 Copies files to remote locations.</div><div class="line"></div><div class="line"># ansible-doc -s copy</div><div class="line">- name: Copies files to remote locations.</div><div class="line">action: copy</div><div class="line">    backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.</div><div class="line">    content                # When used instead of &apos;src&apos;, sets the contents of a file directly to the specified value.</div><div class="line">    dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.</div><div class="line">    directory_mode         # When doing a recursive copy set the mode for the directories. If this is not set we will default the system defaults.</div><div class="line">    force                  # the default is `yes&apos;, which will replace the remote file when contents are different than the source.  If `no&apos;, the file will only be transferred if the destination does not exist.</div><div class="line">    src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with &quot;/&quot;, only inside contents of that directory are copied to destination. Otherwise, if it does not end with &quot;/&quot;, the directory itself with all contents is copied. This behavior is similar to Rsync.</div><div class="line">    validate               # The validation command to run before copying into place.  The path to the file to validate is passed in via &apos;%s&apos; which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won&apos;t work.</div><div class="line"></div><div class="line"># ansible 10.249.6.64 -m copy -a &quot;src=/root/test.txt dest=/tmp/&quot;</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;dest&quot;: &quot;/tmp/test.txt&quot;,</div><div class="line">    &quot;gid&quot;: 0,</div><div class="line">    &quot;group&quot;: &quot;root&quot;,</div><div class="line">    &quot;md5sum&quot;: &quot;d41d8cd98f00b204e9800998ecf8427e&quot;,</div><div class="line">    &quot;mode&quot;: &quot;0644&quot;,</div><div class="line">    &quot;owner&quot;: &quot;root&quot;,</div><div class="line">    &quot;size&quot;: 0,</div><div class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1463662606.99-26627840524349/source&quot;,</div><div class="line">    &quot;state&quot;: &quot;file&quot;,</div><div class="line">    &quot;uid&quot;: 0</div><div class="line">&#125;</div><div class="line"># ansible 10.249.6.64 -m copy -a &quot;content=&apos;hello world&apos; dest=/tmp/test.txt&quot;</div><div class="line"># ansible 10.249.6.64 -m copy -a &apos;src=/root/test.txt dest=/tmp/test.txt owner=evans group=evans mode=600 backup=yes&apos;</div></pre></td></tr></table></figure>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>file模块：文件模块，设置文件属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep -w ^file</div><div class="line">file                 Sets attributes of files</div><div class="line"># ansible 10.249.6.64 -m file -a &quot;src=/tmp/test.txt path=/tmp/test.link state=link&quot;</div><div class="line"># ansible 10.249.6.64 -m file -a &quot;owner=evans group=evans mode=600 path=/tmp/test.txt&quot;</div></pre></td></tr></table></figure>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>service模块： 服务模块，管理系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep ^service</div><div class="line">service              Manage services.</div><div class="line"># ansible-doc -s service</div><div class="line">- name: Manage services.</div><div class="line">  action: service</div><div class="line">    arguments              # Additional arguments provided on the command line</div><div class="line">    enabled                # Whether the service should start on boot. *At least one of state and enabled are required.*</div><div class="line">    name=                  # Name of the service.</div><div class="line">    pattern                # If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps&apos; command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.</div><div class="line">    runlevel               # For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.</div><div class="line">    sleep                  # If the service is being `restarted&apos; then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.</div><div class="line">    state                  # `started&apos;/`stopped&apos; are idempotent actions that will not run commands unless necessary.  `restarted&apos; will always bounce the service.  `reloaded&apos; will always reload. *At least one of state and enabled are required.*</div><div class="line"># ansible 10.249.6.64 -m service -a &quot;name=mysqld state=restarted enabled=true&quot;  //重启mysql服务并设置开机自启动</div></pre></td></tr></table></figure>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>shell模块：远程执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible 10.249.6.64 -m shell -a &apos;date&apos;</div><div class="line">10.249.6.64 | success | rc=0 &gt;&gt;</div><div class="line">Thu May 19 21:20:51 CST 2016</div></pre></td></tr></table></figure>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>script模块：脚本模块，远程主机运行脚本<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc  -l | grep ^script</div><div class="line">script               Runs a local script on a remote node after transferring it..</div><div class="line"># ansible 10.249.6.64 -m script -a &apos;/root/test.sh&apos;  //在远程主机上运行脚本，并没有拷贝到指定目录</div><div class="line">10.249.6.64 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;rc&quot;: 0,</div><div class="line">    &quot;stderr&quot;: &quot;&quot;,</div><div class="line">    &quot;stdout&quot;: &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="yum、apt"><a href="#yum、apt" class="headerlink" title="yum、apt"></a>yum、apt</h3><p>yum模块和apt模块：包管理模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum                  Manages packages with the `yum&apos; package manager</div><div class="line">apt                  Manages apt-packages</div><div class="line"># ansible 10.249.6.64 -m yum -a &quot;name=tree state=present&quot;</div><div class="line"># ansible 10.249.6.43 -m apt -a &quot;name=tree state=present&quot;</div><div class="line"># ansible 10.249.6.43 -m apt -a &quot;name=tree state=absent&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p> state<br>Whether to install (<code>present&#39;,</code>latest’), or remove (`absent’) a package.</p>
</blockquote>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>setup模块：收集主机信息，playbook运行时，会自动调用setup模块收集远程主机的相关信息（称为facts，如操作系统版本、ip地址、cpu数量等），这些信息保存于变量中，可在playbook中引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ansible-doc -l | grep  setup</div><div class="line">setup                Gathers facts about remote hosts</div><div class="line"># ansible-doc -s setup</div><div class="line">- name: Gathers facts about remote hosts</div><div class="line">    action: setup</div><div class="line">    fact_path              # path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format</div><div class="line">    filter                 # if supplied, only return facts that match this shell-style (fnmatch) wildcard.</div><div class="line"># ansible 10.249.6.43 -m setup</div><div class="line"># ansible 10.249.6.43 -m setup -a &apos;filter=ansible_eth0&apos;   //过滤信息</div><div class="line"># ansible 10.249.6.64 -m setup --tree /tmp/test.txt  //将收集的信息输出到本地文件</div></pre></td></tr></table></figure>
<p>更多模块信息请查看：<a href="http://docs.ansible.com/ansible/list_of_all_modules.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="五、playbook"><a href="#五、playbook" class="headerlink" title="五、playbook"></a>五、playbook</h2><h3 id="5-1-YAML"><a href="#5-1-YAML" class="headerlink" title="5.1 YAML"></a>5.1 YAML</h3><p>YAML是一种可读性高的用来表达资料序列的语言，其语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。</p>
<p>所有的yaml文件都以”—“开头表示开始一个document，所有的列表元素以”-“开头，键值对用”:”，后面必须有空格。YAML文件扩展名通常为.yaml或.yml</p>
<h3 id="5-2-playbook简介"><a href="#5-2-playbook简介" class="headerlink" title="5.2 playbook简介"></a>5.2 playbook简介</h3><p>playbook是ansible管理配置、部署应用和编排的文件，可用来描述在远程主机上执行的策略或一组任务。</p>
<p>一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块。</p>
<p>playbook使用YAML语言编写，文件名以.yaml或.yml结尾。此外playbook和模板文件（template）还可使用jinja2语法语法实现高级功能。</p>
<p>5.2.1 playbook的基本组成</p>
<ul>
<li>targets：指定要执行playbook的远程主机组</li>
<li>variables：定义playbook运行时需要使用的变量</li>
<li>tasks：要执行的任务</li>
<li>handlers：处理器，在某些条件下被触发的操作</li>
</ul>
<p>简单playbook示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># cat nginx.yml</div><div class="line">---</div><div class="line">- hosts: 10.249.6.43</div><div class="line">  user: root</div><div class="line">  vars:</div><div class="line">    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf</div><div class="line">  tasks:</div><div class="line">  - name: install nginx</div><div class="line">    apt: name=nginx state=latest</div><div class="line">    when: ansible_distribution == &apos;Ubuntu&apos;</div><div class="line"></div><div class="line">  - name: configration file</div><div class="line">    tags: conf</div><div class="line">    copy: src=/root/mirror.conf dest=&#123;&#123;remote_conffile_path&#125;&#125;</div><div class="line">    notify: restart nginx</div><div class="line"></div><div class="line">  - name: start nginx</div><div class="line">    service: name=nginx enabled=yes state=started</div><div class="line"></div><div class="line">  handlers:</div><div class="line">  - name: restart nginx</div><div class="line">    service: name=nginx state=restarted</div><div class="line"># ansible-playbook  nginx.yml   // 执行playbook</div></pre></td></tr></table></figure>
<ul>
<li>hosts、user</li>
</ul>
<p>hosts用于指定要执行指定任务的主机，其可以是一个或多个由逗号分隔主机组；user则用于指定远程主机上的执行任务的用户，还能使用sudo</p>
<ul>
<li>task list、action</li>
</ul>
<p>task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个。如果中途发生错误，所有已执行任务都将回滚，因此，在更正playbook后重新执行一次即可。</p>
<p> task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致。</p>
<p> 每个task都应该有其name，用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出。</p>
<p>定义task的可以使用“action: module options”或“module: options”的格式，推荐使用后者以实现向后兼容例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: make sure apache is running</div><div class="line">  service: name=httpd state=running</div></pre></td></tr></table></figure>
<p>在众多模块中，只有command和shell模块仅需要给定一个列表而无需使用“key=value”格式，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: disable selinux</div><div class="line">  command: /sbin/setenforce 0</div></pre></td></tr></table></figure>
<p>shell模块执行多条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- name: update zabbix agent conf</div><div class="line">  shell: |</div><div class="line">       ...</div></pre></td></tr></table></figure>
<p>如果模块执行返回值不为零，即表示执行失败，任务会立即中止，后续任务不再执行。可以使用ignore_errors来忽略错误信息确保后续任务的执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tasks:</div><div class="line">    - name: run this command and ignore the result</div><div class="line">      shell: /usr/bin/somecommand</div><div class="line">      ignore_errors: yes</div></pre></td></tr></table></figure>
<ul>
<li>handlers</li>
</ul>
<p>当关注的资源发生变化时触发一定的操作。handler是task列表，这些task与前述的task并没有本质上的不同。</p>
<p>“notify”这个action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，取而代之，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- name: template configuration file</div><div class="line">  template: src=/root/template.conf dest=/etc/template.conf</div><div class="line"></div><div class="line">notify:</div><div class="line">  - restart memcached</div><div class="line">  - restart apache</div><div class="line"></div><div class="line">handlers:</div><div class="line">  - name: restart memcached</div><div class="line">    service: name=memcached state=restarted</div><div class="line">  - name: restart apache</div><div class="line">    service: name=apache state=restarted</div></pre></td></tr></table></figure>
<ul>
<li>vars</li>
</ul>
<p>变量名仅能由字母、数字和下划线组成，且只能以字母开头</p>
<ul>
<li>when</li>
</ul>
<p>条件判断：如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提，这时就要用到条件判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;</div><div class="line"></div><div class="line">when: ansible_distribution == &apos;CentOS&apos; or ansible_distribution == &apos;RedHat&apos; and ansible_distribution_version|int &gt;=6</div></pre></td></tr></table></figure>
<p>忽略此前某语句的错误并基于其结果（failed或者sucess）运行后面指定的语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- hosts: 10.249.6.64</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">    - name: false test</div><div class="line">      command: /bin/false</div><div class="line">      register: result</div><div class="line">      ignore_errors: yes</div><div class="line">    - name: when false  to do</div><div class="line">      command: touch /tmp/1.txt</div><div class="line">      when: result | failed</div><div class="line">    - name: when success to do</div><div class="line">      command: touch /tmp/2.txt</div><div class="line">      when: result | success</div><div class="line">    - name: when skip to do</div><div class="line">      command: touch /tmp/3.txt</div><div class="line">      when: result | skipped</div></pre></td></tr></table></figure>
<ul>
<li>item</li>
</ul>
<p>item 迭代：当有需要重复性执行的任务时，可以使用迭代机制。其使用格式为将需要迭代的内容定义为item变量引用，并通过with_items语句来指明迭代的元素列表即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- name: install base software</div><div class="line">  apt: pkg=&#123;&#123; item &#125;&#125; state=present force=yes</div><div class="line">  with_items:</div><div class="line">    - gcc</div><div class="line">    - g++</div><div class="line">    - mysql-client-5.5</div><div class="line">    - libmcrypt-dev</div><div class="line">    - libmysqlclient-dev</div><div class="line">    - libgmp10</div><div class="line">    - vim</div><div class="line">    - openssh-client</div><div class="line">    - ethtool</div><div class="line">  when: ansible_distribution == &apos;Debian&apos; or ansible_distribution == &apos;Ubuntu&apos;</div></pre></td></tr></table></figure>
<ul>
<li>tag</li>
</ul>
<p>tag标签：让用户选择运行playbook中的某个或某些任务。虽然ansible具有幂等性，会跳过没有变化的部分，有些代码为测试其确实没有发生变化，也会耗费很长时间。我们将playbook中的指定任务打上标签，在运行playbook时指定标签名称，这样就不用运行全部代码了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">- hosts: 10.249.6.43</div><div class="line">  user: root</div><div class="line">  vars:</div><div class="line">    remote_conffile_path: /etc/nginx/sites-enabled/mirror.conf</div><div class="line">  tasks:</div><div class="line">  - name: install nginx</div><div class="line">    apt: name=nginx state=latest</div><div class="line">    when: ansible_distribution == &apos;Ubuntu&apos;</div><div class="line">      </div><div class="line">  - name: configration file</div><div class="line">    tags: conf</div><div class="line">    copy: src=/root/mirror.conf dest=&#123;&#123;remote_conffile_path&#125;&#125;</div><div class="line">    notify: restart nginx</div><div class="line"></div><div class="line">  - name: start nginx</div><div class="line">    service: name=nginx enabled=yes state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart nginx</div><div class="line">    service: name=nginx state=restarted</div><div class="line"># ansible-playbook nginx.yml -t conf   // 只执行tags部分</div></pre></td></tr></table></figure>
<h2 id="六、roles"><a href="#六、roles" class="headerlink" title="六、roles"></a>六、roles</h2><p>roles 用于层次性、结构化地组织playbook。</p>
<p>roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。roles就是通过分别将变量、文件、任务、模块及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ls</div><div class="line">deploy_hosts  deploy.yml  roles  run.sh</div><div class="line"># cat deploy_hosts   //主机或主机组列表</div><div class="line">[web]</div><div class="line">10.126.83.30</div><div class="line">10.126.93.83</div><div class="line">[db]</div><div class="line">10.126.87.150</div><div class="line">10.126.92.89</div><div class="line"># cat deploy.yml  // 总的playbook 调用roles</div><div class="line">---</div><div class="line">- name: init for os</div><div class="line">  hosts: web</div><div class="line">  user: root</div><div class="line">  gather_facts: True</div><div class="line">  roles:</div><div class="line">    - init</div><div class="line">    - raid</div><div class="line">- name: init for os</div><div class="line">  hosts: db</div><div class="line">  user: root</div><div class="line">  gather_facts: True</div><div class="line">  roles:</div><div class="line">    - init</div><div class="line">    - raid</div><div class="line">    - db_init</div><div class="line"></div><div class="line"># cat run.sh  // 运行playbook脚本</div><div class="line">#!/bin/bash</div><div class="line">/usr/bin/ansible-playbook -i ./deploy_hosts deploy.yml</div><div class="line"># ls roles/</div><div class="line">db_init   init    raid</div></pre></td></tr></table></figure>
<p>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录，用不到的目录可以创建为空目录，也可以不创建。</p>
<p>role内各目录中可用的文件:</p>
<ul>
<li><p>tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；此文件可以使用include包含其它的位于此目录中的task文件</p>
</li>
<li><p>files目录：存放由copy或script等模块调用的静态文件</p>
</li>
<li><p>templates目录：template模块会自动在此目录中寻找Jinja2模板文件</p>
</li>
<li><p>handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；此文件可以使用include包含其它的位于此目录中的handler文件</p>
</li>
<li><p>vars目录：至少有一个main.yml文件，用于定义此角色用到的变量</p>
</li>
<li><p>meta目录：至少有一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；ansible 1.3及其以后的版本才支持</p>
</li>
<li><p>default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</p>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://9124573.blog.51cto.com/9114573/1769887" target="_blank" rel="external">轻量级自动化运维工具ansible</a></p>
<p><a href="http://docs.ansible.com/ansible/intro.html" target="_blank" rel="external">ansible doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、体系结构&quot;&gt;&lt;a href=&quot;#一、体系结构&quot; class=&quot;headerlink&quot; title=&quot;一、体系结构&quot;&gt;&lt;/a&gt;一、体系结构&lt;/h2&gt;&lt;p&gt;ansible是一款基于python开发，揉合了众多自动化运维工具功能的轻量级自动化运维工具，目前实现了除系统安装以外的批量系统配置、批量任务执行及批量程序部署等功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inventory：主机库，定义可控制的主机&lt;/li&gt;
&lt;li&gt;Modules：基于模块化设计，通过模块来实现批量部署&lt;/li&gt;
&lt;li&gt;playbook：剧本，使用YAML编写的声明性的配置文件&lt;/li&gt;
&lt;li&gt;plugins: 插件，完成日志记录、邮件等功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>运维必备之Linux命令概览</title>
    <link href="http://yoursite.com/2016/01/01/command/"/>
    <id>http://yoursite.com/2016/01/01/command/</id>
    <published>2016-01-01T12:48:46.000Z</published>
    <updated>2018-11-14T00:11:37.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><img src="/img/C3EB9F70-7F51-4B46-8B14-825CD9B8C11B.png" alt=""></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="/img/BF852F66-2D8E-42D8-A4EB-2826A98C354C.png" alt=""></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><img src="/img/429014F3-442B-4115-A97D-32D62E6BEE7F.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Linux Performance</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;监控&quot;&gt;&lt;a href=&quot;#监控&quot; class=&quot;headerlink&quot; title=&quot;监控&quot;&gt;&lt;/a&gt;监控&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/C3EB9F70-7F51-4B46-8B14-825CD9B8C11B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Cmd" scheme="http://yoursite.com/categories/Cmd/"/>
    
    
      <category term="命令汇总" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>ipmitool智能平台管理工具</title>
    <link href="http://yoursite.com/2015/09/15/ipmitool/"/>
    <id>http://yoursite.com/2015/09/15/ipmitool/</id>
    <published>2015-09-15T13:23:05.000Z</published>
    <updated>2017-06-23T15:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IPMI"><a href="#IPMI" class="headerlink" title="IPMI"></a>IPMI</h3><blockquote>
<p>Intelligent Platform Management Interface</p>
</blockquote>
<p>IPMI是一个开放的标准，监控，记录，回收，库存和硬件实现独立于主CPU，BIOS，以及操作系统的控制权。无论在开机还是关机的状态下，只要接通电源就可以实现对服务器的监控。</p>
<blockquote>
<p>The service processor (or Baseboard Management Controller, BMC) is the brain behind platform management and its primary purpose is to handle the autonomous sensor monitoring and event logging features.</p>
</blockquote>
<p>IPMI是一种规范的标准，其中最重要的物理部件就是BMC(Baseboard Management Controller)一种嵌入式管理微控制器，它相当于整个平台管理的“大脑”，通过它ipmi可以监控各个传感器的数据并记录各种事件的日志。</p>
<p>利用 IPMI可以监视服务器的物理特征，如温度、电压、电扇工作状态、电源供应以及机箱入侵等。</p>
<h3 id="ipmitool"><a href="#ipmitool" class="headerlink" title="ipmitool"></a>ipmitool</h3><blockquote>
<p>ipmitool - utility for controlling IPMI-enabled devices</p>
</blockquote>
<p>ipmitool 用于管理和配置，支持智能平台管理接口(IPMI)1.5版和2.0版规范的设备的命令行工具</p>
<h3 id="ipmitool常用选项"><a href="#ipmitool常用选项" class="headerlink" title="ipmitool常用选项"></a>ipmitool常用选项</h3><p>Ipmitool本地监控命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool –I open command</div></pre></td></tr></table></figure>
<p>其中-I open表示使用OpenIPMI接口，command有以下项：</p>
<ul>
<li><p>raw：发送一个原始的IPMI请求，并且打印回复信息。</p>
</li>
<li><p><code>Lan</code>：配置网络（lan）信道(channel)</p>
</li>
<li><p>chassis ：查看底盘的状态和设置电源</p>
</li>
<li><p>event：向BMC发送一个已经定义的事件（event），可用于测试配置的SNMP是否成功</p>
</li>
<li><p>mc：  查看MC（Management Contollor）状态和各种允许的项</p>
</li>
<li><p>sdr：打印传感器仓库中的所有监控项和从传感器读取到的值。</p>
</li>
<li><p><code>Sensor</code>：打印详细的传感器信息。</p>
</li>
<li><p>Fru：打印内建的Field Replaceable Unit (FRU)信息</p>
</li>
<li><p>Sel： 打印 System Event Log (SEL)</p>
</li>
<li><p>Pef： 设置 Platform Event Filtering(PEF)，事件过滤平台用于在监控系统发现有event时候，用PEF中的策略进行事件过滤，然后看是否需要报警。</p>
</li>
<li><p>Sol/isol：用于配置通过串口的Lan进行监控</p>
</li>
<li><p>User：设置BMC中用户的信息 。</p>
</li>
<li><p>Channel：设置Management Controller信道。</p>
</li>
</ul>
<h3 id="ipmitool-常用命令举例"><a href="#ipmitool-常用命令举例" class="headerlink" title="ipmitool 常用命令举例"></a>ipmitool 常用命令举例</h3><p>查看传感器中的各种监测值和该值的监测阈值，包括CPU温度，电压，风扇转速，电源调制模块温度，电源电压等信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool -I open sensor list</div></pre></td></tr></table></figure>
<p>查看idrac卡相关信息，包括IP、MAC地址等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool -I open lan print</div></pre></td></tr></table></figure>
<h4 id="通过ipmitool重置idrac登陆密码"><a href="#通过ipmitool重置idrac登陆密码" class="headerlink" title="通过ipmitool重置idrac登陆密码"></a>通过ipmitool重置idrac登陆密码</h4><p>1.加载内核模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># modprobe ipmi_msghandler</div><div class="line"># modprobe ipmi_devintf</div><div class="line"># modprobe ipmi_si</div></pre></td></tr></table></figure>
<p>2.查看idrac用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool user list &lt;channel_no&gt;</div></pre></td></tr></table></figure>
<p>DELL的<channel_no>是1，HP的是2</channel_no></p>
<p>如果不知道机器的型号可以通过如下命令获取通道号,获取到的通道号代表管理员id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># for i in &#123;1..14&#125;; do ipmitool lan print $i 2&gt;/dev/null | grep -q ^Set &amp;&amp; echo $i; done</div></pre></td></tr></table></figure>
<p>3.重置管理员密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># ipmitool lan set &lt;channel_no&gt; password  xxxxxx</div><div class="line"># ipmitool lan set 2 password  xxxxxx</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://openipmi.sourceforge.net/IPMI.pdf" target="_blank" rel="external">http://openipmi.sourceforge.net/IPMI.pdf</a></p>
<p><a href="http://www.openfusion.net/tags/ipmi/" target="_blank" rel="external">http://www.openfusion.net/tags/ipmi/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IPMI&quot;&gt;&lt;a href=&quot;#IPMI&quot; class=&quot;headerlink&quot; title=&quot;IPMI&quot;&gt;&lt;/a&gt;IPMI&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Intelligent Platform Management Interface&lt;/p&gt;
&lt;/b
    
    </summary>
    
    
  </entry>
  
</feed>
